



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for creating the post combine grades data tables. You also normalize the grades by scout to 
account for the differences in how they give them out.

Should it be done by grade level as well as scout and position and trait?

Inherently, players the the top of the board will have higher avg position specific grades

So this could potentially lead to some scouts (Eric, Chad, Vince) who tend to view the higher players to have higher average grades

And other scouts (Andrew) who tend to view the lower players to have lower average grades



*skill id 1438 which is "Coverage" has no grades in it...you may want to get rid of it, just find out if it's old or what will be swtiched to later*



----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available. 

OUTPUT TABLES:
#temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions') IS NOT NULL
	DROP TABLE #temp_draft_board_positions

    SELECT player_id
	      ,position
		  ,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
		        WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
				WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
				ELSE NULL
		   END AS order_by
	 INTO #temp_draft_board_positions
	 FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE position != '' AND position IS NOT NULL


-- Check if #temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_with_order

    SELECT player_id
	      ,position
	      ,RANK() OVER (PARTITION BY player_id ORDER BY order_by) AS draft_board_position_order
	  INTO #temp_draft_board_positions_with_order
	  FROM #temp_draft_board_positions

/*
SELECT *
FROM #temp_draft_board_positions_with_order
*/

-- Check if #temp_draft_board_positions_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_positions_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_positions_latest

    SELECT *
	  INTO #temp_draft_board_positions_latest
	  FROM #temp_draft_board_positions_with_order
	 WHERE draft_board_position_order = 1

/*
SELECT DISTINCT position
FROM #temp_draft_board_positions_latest
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the master evaluations table.

OUTPUT TABLES:
#temp_evaluations_3_to_7
#temp_evaluations_overall

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

DECLARE @current_season INT
SELECT @current_season = (SELECT MAX(season) FROM Analytics.dbo.map_nfl_league_year_dates WHERE GETDATE() >= regular_season_start)

-- Check if #temp_evaluations_3_to_7 exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_3_to_7') IS NOT NULL
	DROP TABLE #temp_evaluations_3_to_7

    SELECT re.id AS report_id
          ,author_id AS scout_id
          ,re.player_id AS bane_player_id
		  ,pl.draft_year
		  ,CASE WHEN re.position_id IS NULL THEN 'NONE' ELSE CASE WHEN po.abbreviation = 'DE43' THEN 'OB' ELSE translation END END AS position
          ,ev.[id] AS evaluation_id
		  ,CASE WHEN ev.skill_id IN (1370,1389,1439) THEN 1370
			    WHEN ev.skill_id IN (1414,1418) THEN 1414
				WHEN ev.skill_id IN (1448,1363) THEN 1448
				WHEN ev.skill_id IN (1364,1449,1496) THEN 1364
				WHEN ev.skill_id IN (1426,1446) THEN 1426
				WHEN ev.skill_id IN (1401,1397) THEN 1401
				WHEN ev.skill_id IN (1420,1400) THEN 1420
				WHEN ev.skill_id IN (1416,1411) THEN 1416
				WHEN ev.skill_id IN (1371,1386) THEN 1386
				WHEN ev.skill_id IN (1374,1387) THEN 1387
				WHEN ev.skill_id IN (1393,1451) THEN 1451
				WHEN ev.skill_id IN (1369,1430) THEN 1369
				WHEN ev.skill_id IN (1412,1429,1408) THEN 1412
				ELSE ev.skill_id
			END AS skill_id
           ,CASE WHEN ev.skill_id IN (1370,1389,1439) THEN 'CF-CMP'
                 WHEN ev.skill_id IN (1414,1418) THEN 'PS-PASS/R'
                 WHEN ev.skill_id IN (1448,1363) THEN 'PS-BLOCK'
                 WHEN ev.skill_id IN (1364,1449,1496) THEN 'PS-HNDS'
                 WHEN ev.skill_id IN (1426,1446) THEN 'PS-PRESS/K/MENT'
                 WHEN ev.skill_id IN (1401,1397) THEN 'PS-REL'
                 WHEN ev.skill_id IN (1420,1400) THEN 'PS-SUS/RUNB'
                 WHEN ev.skill_id IN (1416,1411) THEN 'PS-SHD/B/HNDS'
				 WHEN ev.skill_id IN (1371,1386) THEN 'C'
				 WHEN ev.skill_id IN (1374,1387) THEN 'D'
				 WHEN ev.skill_id IN (1393,1451) THEN 'PS-PROD'
				 WHEN ev.skill_id IN (1369,1430) THEN 'CF-SIZ'
				 WHEN ev.skill_id IN (1412,1429,1408) THEN 'PS-TKL'
                 ELSE sk.[code]
            END AS skill_code
           ,CASE WHEN ev.skill_id IN (1370,1389,1439) THEN 'critical factors'
                 WHEN ev.skill_id IN (1414,1418) THEN 'position specifics'
                 WHEN ev.skill_id IN (1448,1363) THEN 'position specifics'
                 WHEN ev.skill_id IN (1364,1449,1496) THEN 'position specifics'
                 WHEN ev.skill_id IN (1426,1446) THEN 'position specifics'
                 WHEN ev.skill_id IN (1401,1397) THEN 'position specifics'
                 WHEN ev.skill_id IN (1420,1400) THEN 'position specifics'
                 WHEN ev.skill_id IN (1416,1411) THEN 'position specifics'
				 WHEN ev.skill_id IN (1371,1386) THEN 'sticd'
				 WHEN ev.skill_id IN (1374,1387) THEN 'sticd'
				 WHEN ev.skill_id IN (1393,1451) THEN 'position specifics'
				 WHEN ev.skill_id IN (1369,1430) THEN 'critical factors'
				 WHEN ev.skill_id IN (1412,1429,1408) THEN 'position specifics'
                 ELSE sk.[type]
            END AS skill_type
           ,CASE WHEN ev.skill_id IN (1370,1389,1439) THEN 'Competitiveness'
                 WHEN ev.skill_id IN (1414,1418) THEN 'Pass Rush Ability'
                 WHEN ev.skill_id IN (1448,1363) THEN 'Blocking'
                 WHEN ev.skill_id IN (1364,1449,1496) THEN 'Hands'
                 WHEN ev.skill_id IN (1426,1446) THEN 'Pressure Kicks / Mental Stability'
                 WHEN ev.skill_id IN (1401,1397) THEN 'Release'
                 WHEN ev.skill_id IN (1420,1400) THEN 'Sustain / Run Blocking'
                 WHEN ev.skill_id IN (1416,1411) THEN 'Shed Blockers / Use of Hands'
				 WHEN ev.skill_id IN (1371,1386) THEN 'Character'
				 WHEN ev.skill_id IN (1374,1387) THEN 'Durability'
				 WHEN ev.skill_id IN (1393,1451) THEN 'Production'
				 WHEN ev.skill_id IN (1369,1430) THEN 'Size'
				 WHEN ev.skill_id IN (1412,1429,1408) THEN 'Tackling'
                 ELSE sk.[name]
            END AS skill_name
           ,CAST(gr.value AS FLOAT) AS value            
	  INTO #temp_evaluations_3_to_7
      FROM [BaneProductionAnalytics].[dbo].[reports] re
INNER JOIN [BaneProductionAnalytics].[dbo].[taggings] t 
		ON t.taggable_id = re.id 
	   AND UPPER(t.taggable_type) = 'REPORT'
	   AND t.tag_id = 11 --(it is a college report)
INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl 
        ON re.player_id = pl.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[evaluations] ev
	    ON re.id=ev.report_id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[skills] sk
        ON ev.skill_id=sk.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[grades] gr
		ON ev.grade_id=gr.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[users] us
		ON re.author_id=us.id    
 LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] po
		ON re.position_id = po.id     
     WHERE 1=1
       AND re.is_deleted = 0
	   AND UPPER(us.[type]) NOT LIKE '%COACH%'  
	   AND UPPER(re.[type]) <> 'SPECIAL TEAMS' 
	   AND translation NOT IN ('ST','PK','PT','LS')
       AND gr.scale_id = 5 --(it is a 3-7 component grade)
	   AND re.[type] IN ('fall','all star game','cross-check','post cc')
	   --AND MONTH(re.created_at) IN (6,7,8,9,10,11,12,1,2,3,4)
	   AND draft_year >= 2005
	   AND draft_year <= @current_season + 1
  ORDER BY re.id
          ,ev.id
          ,sk.id
          ,gr.id


/*
SELECT *
FROM #temp_evaluations_3_to_7
WHERE skill_id = 1438
*/

-- Check if #temp_evaluations_overall exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_overall') IS NOT NULL
	DROP TABLE #temp_evaluations_overall

    SELECT re.id AS report_id
          ,author_id AS scout_id
          ,re.player_id AS bane_player_id
		  ,pl.draft_year
		  ,CASE WHEN re.position_id IS NULL THEN 'NONE' ELSE CASE WHEN po.abbreviation = 'DE43' THEN 'OB' ELSE translation END END AS position
          ,NULL AS evaluation_id
          ,-999 AS skill_id
          ,'GRADE' AS skill_code
          ,'overall grade' AS skill_type
          ,'overall grade' AS skill_name
          ,CASE WHEN CAST(gr.value AS NUMERIC (3,1)) IN (8.0) THEN 100
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (7.0) THEN 92
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.9) THEN 82
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.7,6.5) THEN 71
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.3) THEN 64
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.1,6.0) THEN 58
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.9) THEN 53.5
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.8) THEN 50
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.7) THEN 47
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.6) THEN 45.5
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.4) THEN 43
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.2) THEN 41
                WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.0) THEN 40
                ELSE NULL
           END AS value            
	  INTO #temp_evaluations_overall
      FROM [BaneProductionAnalytics].[dbo].[reports] re
INNER JOIN [BaneProductionAnalytics].[dbo].[taggings] t 
		ON t.taggable_id = re.id 
	   AND UPPER(t.taggable_type) = 'REPORT'
	   AND t.tag_id = 11 --(it is a college report)
INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl 
        ON re.player_id = pl.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[grades] gr
		ON re.grade_id=gr.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[users] us
		ON re.author_id=us.id    
 LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] po
		ON re.position_id = po.id     
 LEFT JOIN #temp_draft_board_positions_latest dbp
		ON re.player_id = dbp.player_id           
     WHERE 1=1
       AND re.is_deleted = 0
	   AND UPPER(us.[type]) NOT LIKE '%COACH%'  
	   AND UPPER(re.[type]) <> 'SPECIAL TEAMS' 
	   AND translation NOT IN ('ST','PK','PT','LS')
       AND gr.scale_id IN (4,6) --(it is an overall grade)
	   AND re.[type] IN ('fall','all star game','cross-check','post cc')
	   --AND MONTH(re.created_at) IN (6,7,8,9,10,11,12,1,2,3,4)
	   AND draft_year >= 2005
	   AND draft_year <= @current_season + 1
  ORDER BY re.id
          ,gr.id

/*
SELECT *
FROM #temp_evaluations_overall
WHERE bane_player_id = 34953
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the overall grades to the 3 to 7 scale grades and insert them into the table for R.

OUTPUT TABLES:
#temp_evaluations_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_master exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_master') IS NOT NULL
	DROP TABLE #temp_evaluations_master

    SELECT *
	  INTO #temp_evaluations_master
      FROM #temp_evaluations_3_to_7

INSERT INTO #temp_evaluations_master
	SELECT *
	  FROM #temp_evaluations_overall


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Count the number of skill grades per scout per position. So that you can exclude any where a scout
hasn't graded at least 5 players.

OUTPUT TABLES:
#temp_evaluations_scout_counts

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_scout_counts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_scout_counts') IS NOT NULL
	DROP TABLE #temp_evaluations_scout_counts

    SELECT scout_id
		  ,skill_id
		  ,position
	      ,COUNT(*) AS evaluation_count
		  ,AVG(value) AS evaluation_mean
		  ,STDEVP(value) AS evaluation_stdev
	  INTO #temp_evaluations_scout_counts
      FROM #temp_evaluations_master
  GROUP BY scout_id
		  ,skill_id
		  ,position


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join in the evaluation count so you can exclude the evaluations where the scout hasn't done enough evaluations.

OUTPUT TABLES:
#temp_evaluations_updated

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_updated exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_updated') IS NOT NULL
	DROP TABLE #temp_evaluations_updated

	SELECT ev.*
	  INTO #temp_evaluations_updated
	  FROM #temp_evaluations_master ev
INNER JOIN #temp_evaluations_scout_counts co
		ON ev.scout_id = co.scout_id
	   AND ev.skill_id = co.skill_id
	   AND ev.position = co.position
	   AND co.evaluation_count >= 5

/*
SELECT *
FROM #temp_evaluations_master
WHERE bane_player_id = 34953
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join in the evaluation count so you can exclude the evaluations where the scout hasn't done enough evaluations.

OUTPUT TABLES:
Analytics.dbo.work_r_input_post_combine_grades_to_adjust

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*
DECLARE @current_season INT
SELECT @current_season = (SELECT MAX(season) FROM Analytics.dbo.map_nfl_league_year_dates WHERE GETDATE() >= regular_season_start)
*/

TRUNCATE TABLE Analytics.dbo.r_input_draft_model_post_combine_grades_to_adjust

INSERT INTO Analytics.dbo.r_input_draft_model_post_combine_grades_to_adjust
	SELECT *
	  FROM #temp_evaluations_updated
	 WHERE draft_year <= @current_season

/*
SELECT *
FROM Analytics.dbo.r_input_draft_model_post_combine_grades_to_adjust
WHERE skill_id = 1417
AND position = 'DE'
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Run the below R Program to find the grade adjustment factors.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--X:\R\college_scouting\draft_modeling\post_combine\adjusted_grades\post_combine_grade_adjustments


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join in the scout grade adjustment factors to create the adjusted grades

OUTPUT TABLES:
#temp_evaluations_adjusted

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_adjusted exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_adjusted') IS NOT NULL
	DROP TABLE #temp_evaluations_adjusted

    SELECT ev.*
		  ,(value - evaluation_mean) / NULLIF(evaluation_stdev,0) AS value_z_score
	      ,CASE WHEN ev.scout_id = 2 THEN value ELSE value - COALESCE(adjustment,0) END AS value_adjusted --Scout ID 2 does not get a grade adjustment, it is the zero in the regression
	  INTO #temp_evaluations_adjusted
      FROM #temp_evaluations_master ev
 LEFT JOIN Analytics.dbo.r_output_draft_model_post_combine_grade_adjustments ga
        ON ev.scout_id = ga.scout_id
	   AND ev.skill_id = ga.skill_id	
	   AND ev.position = ga.position
 LEFT JOIN #temp_evaluations_scout_counts sc
        ON ev.scout_id = sc.scout_id
	   AND ev.skill_id = sc.skill_id	
	   AND ev.position = sc.position

/*
SELECT *
FROM #temp_evaluations_adjusted
WHERE bane_player_id = 7710
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the mean adjusted grade for every player / skill.

OUTPUT TABLES:
#temp_evaluations_player_means

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_player_means exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_player_means') IS NOT NULL
	DROP TABLE #temp_evaluations_player_means

    SELECT bane_player_id
	      ,skill_id
		  ,skill_code
		  ,MAX(value) AS value_max
		  ,AVG(value) AS value_mean
		  ,MIN(value) AS value_min
		  ,MAX(value_adjusted) AS value_adjusted_max
		  ,AVG(value_adjusted) AS value_adjusted_mean
		  ,MIN(value_adjusted) AS value_adjusted_min
		  ,MAX(value_z_score) AS value_z_score_max
		  ,AVG(value_z_score) AS value_z_score_mean
		  ,MIN(value_z_score) AS value_z_score_min
	  INTO #temp_evaluations_player_means
      FROM #temp_evaluations_adjusted
  GROUP BY bane_player_id
	      ,skill_id
		  ,skill_code

/*
SELECT *
FROM #temp_evaluations_player_means
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the player grades so you have one row per player with all of his mean grades.
Then you can join this table to his eventual pro grades and model based off of that.

OUTPUT TABLES:
#temp_evaluations_pivot_mean

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_pivot_mean exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_pivot_mean') IS NOT NULL
	DROP TABLE #temp_evaluations_pivot_mean

    SELECT bane_player_id
		  ,[CF-AA] AS cf_athletic_ability_mean
		  ,[CF-ACC] AS cf_accuracy_mean
		  ,[CF-ANG/APP] AS cf_angle_approach_mean
		  ,[CF-ARM/S] AS cf_arm_strength_mean
		  ,[CF-AWA] AS cf_mental_awareness_mean
		  ,[CF-CMP] AS cf_competitiveness_mean

		  ,[CF-FLI/BALL] AS cf_flight_of_ball_mean
		  ,[CF-MOB] AS cf_mobility_mean
		  ,[CF-MTL/GAM] AS cf_mental_game_management_mean
		  ,[CF-PLYSPD] AS cf_playing_speed_mean
		  ,[CF-PRO] AS cf_production_mean
		  ,[CF-SIZ] AS cf_size_mean
		  ,[CF-STR/EXPL] AS cf_strength_explosion_mean
		  ,[PS-ACC] AS ps_accurracy_mean
		  ,[PS-APPR/LN] AS ps_approach_line_mean
		  ,[PS-BALLPROT] AS ps_ball_protection_mean

		  ,[PS-BLOCK] AS ps_blocking_mean

		  ,[PS-BLTZ/PICK] AS ps_blitz_pickup_fbi_mean
		  ,[PS-BODY/A] AS ps_body_adjustment_mean
		  ,[PS-CLS/B] AS ps_close_on_the_ball_mean
		  ,[PS-COV] AS ps_coverage_mean
		  ,[PS-DEC/M] AS ps_decision_making_mean
		  ,[PS-DIR/K] AS ps_directional_kicker_mean
		  ,[PS-DRP/S] AS ps_drops_setup_mean
		  ,[PS-ELU] AS ps_elusiveness_mean
		  ,[PS-FOOT/S] AS ps_foot_speed_mean
		  ,[PS-HANDL/T] AS ps_handling_time_mean
		  ,[PS-HND/QK] AS ps_hand_quickness_mean
		  ,[PS-HNDS] AS ps_hands_mean

		  ,[PS-INSRUN] AS ps_inside_run_mean
		  ,[PS-KEY/D] AS ps_key_and_diagnose_mean
		  ,[PS-LAT/M] AS ps_lateral_movement_mean
		  ,[PS-MM/C] AS ps_m_m_cover_mean
		  ,[PS-OUTRUN] AS ps_outside_run_mean
		  ,[PS-PASS/BLK] AS ps_pass_blocking_mean
		  ,[PS-PASS/R] AS ps_pass_rush_ability_mean
		  ,[PS-PASS/RNG] AS ps_pass_ability_range_mean
		  ,[PS-PKT/A] AS ps_pocket_awareness_mean
		  ,[PS-PLANT/R] AS ps_plant_relationship_mean
		  ,[PS-PLY/M] AS ps_play_making_mean
		  ,[PS-POA/R] AS ps_poa_run_mean

		  ,[PS-PRESS/K/MENT] AS ps_pressure_kicks_mental_stability_mean
		  ,[PS-PROD] AS ps_production_mean
		  ,[PS-PROD/A] AS ps_production_accuracy_mean
		  ,[PS-PULL] AS ps_pulling_mean
		  ,[PS-PUR] AS ps_pursuit_mean
		  ,[PS-RAC] AS ps_run_after_catch_mean

		  ,[PS-REL] AS ps_release_mean
		  ,[PS-RISE] AS ps_rise_mean

		  ,[PS-RNG/B] AS ps_range_ball_awareness_mean
		  ,[PS-ROU] AS ps_routes_mean
		  ,[PS-SHD/B/HNDS] AS ps_shed_blockers_use_of_hands_mean

		  ,[PS-SIZ] AS ps_size_mean
		  ,[PS-SIZ/S] AS ps_size_strength_mean
		  ,[PS-SPD/HWS] AS ps_speed_hws_chart_mean
		  ,[PS-ST] AS ps_special_teams_mean
		  ,[PS-STAWY/KICKER] AS ps_straightaway_kicker_mean
		  ,[PS-STEP/P] AS ps_stepping_pattern_mean
		  ,[PS-STYLE] AS ps_style_mean
		  ,[PS-SUS/RUNB] AS ps_sustain_run_blocking_mean
		  ,[PS-TKL] AS ps_tackling_mean
		  ,[PS-TUFF/TKL] AS ps_toughness_tackling_mean
		  ,[PS-VEL] AS ps_velocity_mean
		  ,[PS-VIS] AS ps_vision_instincts_mean
		  ,[PS-ZNE/C] AS ps_zone_cover_mean

		  ,[C] AS sticd_character_mean
		  ,[D] AS sticd_durability_mean
		  ,[I] AS sticd_instincts_mean
		  ,[S] AS sticd_speed_mean
		  ,[T] AS sticd_toughness_mean
		  ,[GRADE] as grade_overall_mean
	  INTO #temp_evaluations_pivot_mean
      FROM (
    SELECT bane_player_id
		  ,skill_code
		  ,value_adjusted_mean
      FROM #temp_evaluations_player_means WHERE skill_code IN ('CF-AA', 'CF-ACC', 'CF-ANG/APP', 'CF-ARM/S', 'CF-AWA', 'CF-CMP', 'CF-FLI/BALL', 'CF-MOB', 'CF-MTL/GAM', 'CF-PLYSPD', 'CF-PRO', 'CF-SIZ', 'CF-STR/EXPL', 'PS-ACC', 'PS-APPR/LN', 'PS-BALLPROT', 'PS-BLOCK', 'PS-BLTZ/PICK', 'PS-BODY/A', 'PS-CLS/B', 'PS-COV', 'PS-DEC/M', 'PS-DIR/K', 'PS-DRP/S', 'PS-ELU', 'PS-FOOT/S', 'PS-HANDL/T', 'PS-HND/QK', 'PS-HNDS', 'PS-INSRUN', 'PS-KEY/D', 'PS-LAT/M', 'PS-MM/C', 'PS-OUTRUN', 'PS-PASS/BLK', 'PS-PASS/R', 'PS-PASS/RNG', 'PS-PKT/A', 'PS-PLANT/R', 'PS-PLY/M', 'PS-POA/R', 'PS-PRESS/K/MENT', 'PS-PROD', 'PS-PROD/A', 'PS-PULL', 'PS-PUR', 'PS-RAC', 'PS-REL', 'PS-RISE', 'PS-RNG/B', 'PS-ROU', 'PS-SHD/B/HNDS', 'PS-SIZ', 'PS-SIZ/S', 'PS-SPD/HWS', 'PS-ST', 'PS-STAWY/KICKER', 'PS-STEP/P', 'PS-STYLE', 'PS-SUS/RUNB', 'PS-TKL', 'PS-TUFF/TKL', 'PS-VEL', 'PS-VIS', 'PS-ZNE/C', 'C', 'D', 'I', 'S', 'T', 'GRADE')) up
     PIVOT (MAX(value_adjusted_mean) FOR skill_code IN ([CF-AA], [CF-ACC], [CF-ANG/APP], [CF-ARM/S], [CF-AWA], [CF-CMP], [CF-FLI/BALL], [CF-MOB], [CF-MTL/GAM], [CF-PLYSPD], [CF-PRO], [CF-SIZ], [CF-STR/EXPL], [PS-ACC], [PS-APPR/LN], [PS-BALLPROT], [PS-BLOCK], [PS-BLTZ/PICK], [PS-BODY/A], [PS-CLS/B], [PS-COV], [PS-DEC/M], [PS-DIR/K], [PS-DRP/S], [PS-ELU], [PS-FOOT/S], [PS-HANDL/T], [PS-HND/QK], [PS-HNDS], [PS-INSRUN], [PS-KEY/D], [PS-LAT/M], [PS-MM/C], [PS-OUTRUN], [PS-PASS/BLK], [PS-PASS/R], [PS-PASS/RNG], [PS-PKT/A], [PS-PLANT/R], [PS-PLY/M], [PS-POA/R], [PS-PRESS/K/MENT], [PS-PROD], [PS-PROD/A], [PS-PULL], [PS-PUR], [PS-RAC], [PS-REL], [PS-RISE], [PS-RNG/B], [PS-ROU], [PS-SHD/B/HNDS], [PS-SIZ], [PS-SIZ/S], [PS-SPD/HWS], [PS-ST], [PS-STAWY/KICKER], [PS-STEP/P], [PS-STYLE], [PS-SUS/RUNB], [PS-TKL], [PS-TUFF/TKL], [PS-VEL], [PS-VIS], [PS-ZNE/C], [C], [D], [I], [S], [T], [GRADE])) AS pvt
  ORDER BY bane_player_id

/*
SELECT *
FROM #temp_evaluations_pivot_mean 
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the player grades so you have one row per player with all of his max grades.
Then you can join this table to his eventual pro grades and model based off of that.

OUTPUT TABLES:
#temp_evaluations_pivot_max

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_pivot_max exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_pivot_max') IS NOT NULL
	DROP TABLE #temp_evaluations_pivot_max

    SELECT bane_player_id
		  ,[CF-AA] AS cf_athletic_ability_max
		  ,[CF-ACC] AS cf_accuracy_max
		  ,[CF-ANG/APP] AS cf_angle_approach_max
		  ,[CF-ARM/S] AS cf_arm_strength_max
		  ,[CF-AWA] AS cf_mental_awareness_max
		  ,[CF-CMP] AS cf_competitiveness_max

		  ,[CF-FLI/BALL] AS cf_flight_of_ball_max
		  ,[CF-MOB] AS cf_mobility_max
		  ,[CF-MTL/GAM] AS cf_mental_game_management_max
		  ,[CF-PLYSPD] AS cf_playing_speed_max
		  ,[CF-PRO] AS cf_production_max
		  ,[CF-SIZ] AS cf_size_max
		  ,[CF-STR/EXPL] AS cf_strength_explosion_max
		  ,[PS-ACC] AS ps_accurracy_max
		  ,[PS-APPR/LN] AS ps_approach_line_max
		  ,[PS-BALLPROT] AS ps_ball_protection_max

		  ,[PS-BLOCK] AS ps_blocking_max

		  ,[PS-BLTZ/PICK] AS ps_blitz_pickup_fbi_max
		  ,[PS-BODY/A] AS ps_body_adjustment_max
		  ,[PS-CLS/B] AS ps_close_on_the_ball_max
		  ,[PS-COV] AS ps_coverage_max
		  ,[PS-DEC/M] AS ps_decision_making_max
		  ,[PS-DIR/K] AS ps_directional_kicker_max
		  ,[PS-DRP/S] AS ps_drops_setup_max
		  ,[PS-ELU] AS ps_elusiveness_max
		  ,[PS-FOOT/S] AS ps_foot_speed_max
		  ,[PS-HANDL/T] AS ps_handling_time_max
		  ,[PS-HND/QK] AS ps_hand_quickness_max
		  ,[PS-HNDS] AS ps_hands_max

		  ,[PS-INSRUN] AS ps_inside_run_max
		  ,[PS-KEY/D] AS ps_key_and_diagnose_max
		  ,[PS-LAT/M] AS ps_lateral_movement_max
		  ,[PS-MM/C] AS ps_m_m_cover_max
		  ,[PS-OUTRUN] AS ps_outside_run_max
		  ,[PS-PASS/BLK] AS ps_pass_blocking_max
		  ,[PS-PASS/R] AS ps_pass_rush_ability_max
		  ,[PS-PASS/RNG] AS ps_pass_ability_range_max
		  ,[PS-PKT/A] AS ps_pocket_awareness_max
		  ,[PS-PLANT/R] AS ps_plant_relationship_max
		  ,[PS-PLY/M] AS ps_play_making_max
		  ,[PS-POA/R] AS ps_poa_run_max

		  ,[PS-PRESS/K/MENT] AS ps_pressure_kicks_mental_stability_max
		  ,[PS-PROD] AS ps_production_max
		  ,[PS-PROD/A] AS ps_production_accuracy_max
		  ,[PS-PULL] AS ps_pulling_max
		  ,[PS-PUR] AS ps_pursuit_max
		  ,[PS-RAC] AS ps_run_after_catch_max

		  ,[PS-REL] AS ps_release_max
		  ,[PS-RISE] AS ps_rise_max

		  ,[PS-RNG/B] AS ps_range_ball_awareness_max
		  ,[PS-ROU] AS ps_routes_max
		  ,[PS-SHD/B/HNDS] AS ps_shed_blockers_use_of_hands_max

		  ,[PS-SIZ] AS ps_size_max
		  ,[PS-SIZ/S] AS ps_size_strength_max
		  ,[PS-SPD/HWS] AS ps_speed_hws_chart_max
		  ,[PS-ST] AS ps_special_teams_max
		  ,[PS-STAWY/KICKER] AS ps_straightaway_kicker_max
		  ,[PS-STEP/P] AS ps_stepping_pattern_max
		  ,[PS-STYLE] AS ps_style_max
		  ,[PS-SUS/RUNB] AS ps_sustain_run_blocking_max
		  ,[PS-TKL] AS ps_tackling_max
		  ,[PS-TUFF/TKL] AS ps_toughness_tackling_max
		  ,[PS-VEL] AS ps_velocity_max
		  ,[PS-VIS] AS ps_vision_instincts_max
		  ,[PS-ZNE/C] AS ps_zone_cover_max

		  ,[C] AS sticd_character_max
		  ,[D] AS sticd_durability_max
		  ,[I] AS sticd_instincts_max
		  ,[S] AS sticd_speed_max
		  ,[T] AS sticd_toughness_max
		  ,[GRADE] as grade_overall_max
	  INTO #temp_evaluations_pivot_max
      FROM (
    SELECT bane_player_id
		  ,skill_code
		  ,value_adjusted_max
      FROM #temp_evaluations_player_means WHERE skill_code IN ('CF-AA', 'CF-ACC', 'CF-ANG/APP', 'CF-ARM/S', 'CF-AWA', 'CF-CMP', 'CF-FLI/BALL', 'CF-MOB', 'CF-MTL/GAM', 'CF-PLYSPD', 'CF-PRO', 'CF-SIZ', 'CF-STR/EXPL', 'PS-ACC', 'PS-APPR/LN', 'PS-BALLPROT', 'PS-BLOCK', 'PS-BLTZ/PICK', 'PS-BODY/A', 'PS-CLS/B', 'PS-COV', 'PS-DEC/M', 'PS-DIR/K', 'PS-DRP/S', 'PS-ELU', 'PS-FOOT/S', 'PS-HANDL/T', 'PS-HND/QK', 'PS-HNDS', 'PS-INSRUN', 'PS-KEY/D', 'PS-LAT/M', 'PS-MM/C', 'PS-OUTRUN', 'PS-PASS/BLK', 'PS-PASS/R', 'PS-PASS/RNG', 'PS-PKT/A', 'PS-PLANT/R', 'PS-PLY/M', 'PS-POA/R', 'PS-PRESS/K/MENT', 'PS-PROD', 'PS-PROD/A', 'PS-PULL', 'PS-PUR', 'PS-RAC', 'PS-REL', 'PS-RISE', 'PS-RNG/B', 'PS-ROU', 'PS-SHD/B/HNDS', 'PS-SIZ', 'PS-SIZ/S', 'PS-SPD/HWS', 'PS-ST', 'PS-STAWY/KICKER', 'PS-STEP/P', 'PS-STYLE', 'PS-SUS/RUNB', 'PS-TKL', 'PS-TUFF/TKL', 'PS-VEL', 'PS-VIS', 'PS-ZNE/C', 'C', 'D', 'I', 'S', 'T', 'GRADE')) up
     PIVOT (MAX(value_adjusted_max) FOR skill_code IN ([CF-AA], [CF-ACC], [CF-ANG/APP], [CF-ARM/S], [CF-AWA], [CF-CMP], [CF-FLI/BALL], [CF-MOB], [CF-MTL/GAM], [CF-PLYSPD], [CF-PRO], [CF-SIZ], [CF-STR/EXPL], [PS-ACC], [PS-APPR/LN], [PS-BALLPROT], [PS-BLOCK], [PS-BLTZ/PICK], [PS-BODY/A], [PS-CLS/B], [PS-COV], [PS-DEC/M], [PS-DIR/K], [PS-DRP/S], [PS-ELU], [PS-FOOT/S], [PS-HANDL/T], [PS-HND/QK], [PS-HNDS], [PS-INSRUN], [PS-KEY/D], [PS-LAT/M], [PS-MM/C], [PS-OUTRUN], [PS-PASS/BLK], [PS-PASS/R], [PS-PASS/RNG], [PS-PKT/A], [PS-PLANT/R], [PS-PLY/M], [PS-POA/R], [PS-PRESS/K/MENT], [PS-PROD], [PS-PROD/A], [PS-PULL], [PS-PUR], [PS-RAC], [PS-REL], [PS-RISE], [PS-RNG/B], [PS-ROU], [PS-SHD/B/HNDS], [PS-SIZ], [PS-SIZ/S], [PS-SPD/HWS], [PS-ST], [PS-STAWY/KICKER], [PS-STEP/P], [PS-STYLE], [PS-SUS/RUNB], [PS-TKL], [PS-TUFF/TKL], [PS-VEL], [PS-VIS], [PS-ZNE/C], [C], [D], [I], [S], [T], [GRADE])) AS pvt
  ORDER BY bane_player_id

/*
SELECT *
FROM #temp_evaluations_pivot_mean 
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the player grades so you have one row per player with all of his min grades.
Then you can join this table to his eventual pro grades and model based off of that.

OUTPUT TABLES:
#temp_evaluations_pivot_min

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_evaluations_pivot_min exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_evaluations_pivot_min') IS NOT NULL
	DROP TABLE #temp_evaluations_pivot_min

    SELECT bane_player_id
		  ,[CF-AA] AS cf_athletic_ability_min
		  ,[CF-ACC] AS cf_accuracy_min
		  ,[CF-ANG/APP] AS cf_angle_approach_min
		  ,[CF-ARM/S] AS cf_arm_strength_min
		  ,[CF-AWA] AS cf_mental_awareness_min
		  ,[CF-CMP] AS cf_competitiveness_min

		  ,[CF-FLI/BALL] AS cf_flight_of_ball_min
		  ,[CF-MOB] AS cf_mobility_min
		  ,[CF-MTL/GAM] AS cf_mental_game_management_min
		  ,[CF-PLYSPD] AS cf_playing_speed_min
		  ,[CF-PRO] AS cf_production_min
		  ,[CF-SIZ] AS cf_size_min
		  ,[CF-STR/EXPL] AS cf_strength_explosion_min
		  ,[PS-ACC] AS ps_accurracy_min
		  ,[PS-APPR/LN] AS ps_approach_line_min
		  ,[PS-BALLPROT] AS ps_ball_protection_min

		  ,[PS-BLOCK] AS ps_blocking_min

		  ,[PS-BLTZ/PICK] AS ps_blitz_pickup_fbi_min
		  ,[PS-BODY/A] AS ps_body_adjustment_min
		  ,[PS-CLS/B] AS ps_close_on_the_ball_min
		  ,[PS-COV] AS ps_coverage_min
		  ,[PS-DEC/M] AS ps_decision_making_min
		  ,[PS-DIR/K] AS ps_directional_kicker_min
		  ,[PS-DRP/S] AS ps_drops_setup_min
		  ,[PS-ELU] AS ps_elusiveness_min
		  ,[PS-FOOT/S] AS ps_foot_speed_min
		  ,[PS-HANDL/T] AS ps_handling_time_min
		  ,[PS-HND/QK] AS ps_hand_quickness_min
		  ,[PS-HNDS] AS ps_hands_min

		  ,[PS-INSRUN] AS ps_inside_run_min
		  ,[PS-KEY/D] AS ps_key_and_diagnose_min
		  ,[PS-LAT/M] AS ps_lateral_movement_min
		  ,[PS-MM/C] AS ps_m_m_cover_min
		  ,[PS-OUTRUN] AS ps_outside_run_min
		  ,[PS-PASS/BLK] AS ps_pass_blocking_min
		  ,[PS-PASS/R] AS ps_pass_rush_ability_min
		  ,[PS-PASS/RNG] AS ps_pass_ability_range_min
		  ,[PS-PKT/A] AS ps_pocket_awareness_min
		  ,[PS-PLANT/R] AS ps_plant_relationship_min
		  ,[PS-PLY/M] AS ps_play_making_min
		  ,[PS-POA/R] AS ps_poa_run_min

		  ,[PS-PRESS/K/MENT] AS ps_pressure_kicks_mental_stability_min
		  ,[PS-PROD] AS ps_production_min
		  ,[PS-PROD/A] AS ps_production_accuracy_min
		  ,[PS-PULL] AS ps_pulling_min
		  ,[PS-PUR] AS ps_pursuit_min
		  ,[PS-RAC] AS ps_run_after_catch_min

		  ,[PS-REL] AS ps_release_min
		  ,[PS-RISE] AS ps_rise_min

		  ,[PS-RNG/B] AS ps_range_ball_awareness_min
		  ,[PS-ROU] AS ps_routes_min
		  ,[PS-SHD/B/HNDS] AS ps_shed_blockers_use_of_hands_min

		  ,[PS-SIZ] AS ps_size_min
		  ,[PS-SIZ/S] AS ps_size_strength_min
		  ,[PS-SPD/HWS] AS ps_speed_hws_chart_min
		  ,[PS-ST] AS ps_special_teams_min
		  ,[PS-STAWY/KICKER] AS ps_straightaway_kicker_min
		  ,[PS-STEP/P] AS ps_stepping_pattern_min
		  ,[PS-STYLE] AS ps_style_min
		  ,[PS-SUS/RUNB] AS ps_sustain_run_blocking_min
		  ,[PS-TKL] AS ps_tackling_min
		  ,[PS-TUFF/TKL] AS ps_toughness_tackling_min
		  ,[PS-VEL] AS ps_velocity_min
		  ,[PS-VIS] AS ps_vision_instincts_min
		  ,[PS-ZNE/C] AS ps_zone_cover_min

		  ,[C] AS sticd_character_min
		  ,[D] AS sticd_durability_min
		  ,[I] AS sticd_instincts_min
		  ,[S] AS sticd_speed_min
		  ,[T] AS sticd_toughness_min
		  ,[GRADE] as grade_overall_min
	  INTO #temp_evaluations_pivot_min
      FROM (
    SELECT bane_player_id
		  ,skill_code
		  ,value_adjusted_min
      FROM #temp_evaluations_player_means WHERE skill_code IN ('CF-AA', 'CF-ACC', 'CF-ANG/APP', 'CF-ARM/S', 'CF-AWA', 'CF-CMP', 'CF-FLI/BALL', 'CF-MOB', 'CF-MTL/GAM', 'CF-PLYSPD', 'CF-PRO', 'CF-SIZ', 'CF-STR/EXPL', 'PS-ACC', 'PS-APPR/LN', 'PS-BALLPROT', 'PS-BLOCK', 'PS-BLTZ/PICK', 'PS-BODY/A', 'PS-CLS/B', 'PS-COV', 'PS-DEC/M', 'PS-DIR/K', 'PS-DRP/S', 'PS-ELU', 'PS-FOOT/S', 'PS-HANDL/T', 'PS-HND/QK', 'PS-HNDS', 'PS-INSRUN', 'PS-KEY/D', 'PS-LAT/M', 'PS-MM/C', 'PS-OUTRUN', 'PS-PASS/BLK', 'PS-PASS/R', 'PS-PASS/RNG', 'PS-PKT/A', 'PS-PLANT/R', 'PS-PLY/M', 'PS-POA/R', 'PS-PRESS/K/MENT', 'PS-PROD', 'PS-PROD/A', 'PS-PULL', 'PS-PUR', 'PS-RAC', 'PS-REL', 'PS-RISE', 'PS-RNG/B', 'PS-ROU', 'PS-SHD/B/HNDS', 'PS-SIZ', 'PS-SIZ/S', 'PS-SPD/HWS', 'PS-ST', 'PS-STAWY/KICKER', 'PS-STEP/P', 'PS-STYLE', 'PS-SUS/RUNB', 'PS-TKL', 'PS-TUFF/TKL', 'PS-VEL', 'PS-VIS', 'PS-ZNE/C', 'C', 'D', 'I', 'S', 'T', 'GRADE')) up
     PIVOT (MAX(value_adjusted_min) FOR skill_code IN ([CF-AA], [CF-ACC], [CF-ANG/APP], [CF-ARM/S], [CF-AWA], [CF-CMP], [CF-FLI/BALL], [CF-MOB], [CF-MTL/GAM], [CF-PLYSPD], [CF-PRO], [CF-SIZ], [CF-STR/EXPL], [PS-ACC], [PS-APPR/LN], [PS-BALLPROT], [PS-BLOCK], [PS-BLTZ/PICK], [PS-BODY/A], [PS-CLS/B], [PS-COV], [PS-DEC/M], [PS-DIR/K], [PS-DRP/S], [PS-ELU], [PS-FOOT/S], [PS-HANDL/T], [PS-HND/QK], [PS-HNDS], [PS-INSRUN], [PS-KEY/D], [PS-LAT/M], [PS-MM/C], [PS-OUTRUN], [PS-PASS/BLK], [PS-PASS/R], [PS-PASS/RNG], [PS-PKT/A], [PS-PLANT/R], [PS-PLY/M], [PS-POA/R], [PS-PRESS/K/MENT], [PS-PROD], [PS-PROD/A], [PS-PULL], [PS-PUR], [PS-RAC], [PS-REL], [PS-RISE], [PS-RNG/B], [PS-ROU], [PS-SHD/B/HNDS], [PS-SIZ], [PS-SIZ/S], [PS-SPD/HWS], [PS-ST], [PS-STAWY/KICKER], [PS-STEP/P], [PS-STYLE], [PS-SUS/RUNB], [PS-TKL], [PS-TUFF/TKL], [PS-VEL], [PS-VIS], [PS-ZNE/C], [C], [D], [I], [S], [T], [GRADE])) AS pvt
  ORDER BY bane_player_id

/*
SELECT *
FROM #temp_evaluations_pivot_mean 
*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join his pivoted college grades to the pivoted pro grades table.

OUTPUT TABLES:

Analytics.dbo.r_input_draft_model_post_combine_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

DECLARE @current_season INT
SELECT @current_season = (SELECT MAX(season) FROM Analytics.dbo.map_nfl_league_year_dates WHERE GETDATE() >= regular_season_start)

TRUNCATE TABLE Analytics.dbo.r_input_draft_model_post_combine_grades

INSERT INTO Analytics.dbo.r_input_draft_model_post_combine_grades
    SELECT ep_mean.bane_player_id
		  ,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		  ,pl.draft_year
		  ,CASE WHEN dbp.position IN ('RUSH','SAM','DP') THEN 'OB'
				WHEN dbp.position IN ('FS','SS') THEN 'DS'
				WHEN dbp.position IN ('OH') THEN 'RB'
				WHEN dbp.position IN ('P') THEN 'PT'
				WHEN dbp.position IN ('WO') THEN 'WR'
				WHEN dbp.position IN ('WO') THEN 'WR'
				WHEN COALESCE(dbp.position,pn.abbreviation) = 'DE43' THEN 'OB'
				ELSE COALESCE(dbp.position,pn.translation)
		   END AS position
		  ,grade_overall_max
		  ,grade_overall_mean
		  ,grade_overall_min
		  ,cf_accuracy_max
		  ,cf_accuracy_mean
		  ,cf_accuracy_min
		  ,cf_angle_approach_max
		  ,cf_angle_approach_mean
		  ,cf_angle_approach_min
		  ,cf_arm_strength_max
		  ,cf_arm_strength_mean
		  ,cf_arm_strength_min
		  ,cf_athletic_ability_max
		  ,cf_athletic_ability_mean
		  ,cf_athletic_ability_min
		  ,cf_competitiveness_max
		  ,cf_competitiveness_mean
		  ,cf_competitiveness_min
		  ,cf_flight_of_ball_max
		  ,cf_flight_of_ball_mean
		  ,cf_flight_of_ball_min
		  ,cf_mental_awareness_max
		  ,cf_mental_awareness_mean
		  ,cf_mental_awareness_min
		  ,cf_mental_game_management_max
		  ,cf_mental_game_management_mean
		  ,cf_mental_game_management_min
		  ,cf_mobility_max
		  ,cf_mobility_mean
		  ,cf_mobility_min
		  ,cf_playing_speed_max
		  ,cf_playing_speed_mean
		  ,cf_playing_speed_min
		  ,cf_production_max
		  ,cf_production_mean
		  ,cf_production_min
		  ,cf_size_max
		  ,cf_size_mean
		  ,cf_size_min
		  ,cf_strength_explosion_max
		  ,cf_strength_explosion_mean
		  ,cf_strength_explosion_min
		  ,ps_accurracy_max
		  ,ps_accurracy_mean
		  ,ps_accurracy_min
		  ,ps_approach_line_max
		  ,ps_approach_line_mean
		  ,ps_approach_line_min
		  ,ps_ball_protection_max
		  ,ps_ball_protection_mean
		  ,ps_ball_protection_min
		  ,ps_blitz_pickup_fbi_max
		  ,ps_blitz_pickup_fbi_mean
		  ,ps_blitz_pickup_fbi_min
		  ,ps_blocking_max
		  ,ps_blocking_mean
		  ,ps_blocking_min
		  ,ps_body_adjustment_max
		  ,ps_body_adjustment_mean
		  ,ps_body_adjustment_min
		  ,ps_close_on_the_ball_max
		  ,ps_close_on_the_ball_mean
		  ,ps_close_on_the_ball_min
		  ,ps_coverage_max
		  ,ps_coverage_mean
		  ,ps_coverage_min
		  ,ps_decision_making_max
		  ,ps_decision_making_mean
		  ,ps_decision_making_min
		  ,ps_directional_kicker_max
		  ,ps_directional_kicker_mean
		  ,ps_directional_kicker_min
		  ,ps_drops_setup_max
		  ,ps_drops_setup_mean
		  ,ps_drops_setup_min
		  ,ps_elusiveness_max
		  ,ps_elusiveness_mean
		  ,ps_elusiveness_min
		  ,ps_foot_speed_max
		  ,ps_foot_speed_mean
		  ,ps_foot_speed_min
		  ,ps_hand_quickness_max
		  ,ps_hand_quickness_mean
		  ,ps_hand_quickness_min
		  ,ps_handling_time_max
		  ,ps_handling_time_mean
		  ,ps_handling_time_min
		  ,ps_hands_max
		  ,ps_hands_mean
		  ,ps_hands_min
		  ,ps_inside_run_max
		  ,ps_inside_run_mean
		  ,ps_inside_run_min
		  ,ps_key_and_diagnose_max
		  ,ps_key_and_diagnose_mean
		  ,ps_key_and_diagnose_min
		  ,ps_lateral_movement_max
		  ,ps_lateral_movement_mean
		  ,ps_lateral_movement_min
		  ,ps_m_m_cover_max
		  ,ps_m_m_cover_mean
		  ,ps_m_m_cover_min
		  ,ps_outside_run_max
		  ,ps_outside_run_mean
		  ,ps_outside_run_min
		  ,ps_pass_ability_range_max
		  ,ps_pass_ability_range_mean
		  ,ps_pass_ability_range_min
		  ,ps_pass_blocking_max
		  ,ps_pass_blocking_mean
		  ,ps_pass_blocking_min
		  ,ps_pass_rush_ability_max
		  ,ps_pass_rush_ability_mean
		  ,ps_pass_rush_ability_min
		  ,ps_plant_relationship_max
		  ,ps_plant_relationship_mean
		  ,ps_plant_relationship_min
		  ,ps_play_making_max
		  ,ps_play_making_mean
		  ,ps_play_making_min
		  ,ps_poa_run_max
		  ,ps_poa_run_mean
		  ,ps_poa_run_min
		  ,ps_pocket_awareness_max
		  ,ps_pocket_awareness_mean
		  ,ps_pocket_awareness_min
		  ,ps_pressure_kicks_mental_stability_max
		  ,ps_pressure_kicks_mental_stability_mean
		  ,ps_pressure_kicks_mental_stability_min
		  ,ps_production_accuracy_max
		  ,ps_production_accuracy_mean
		  ,ps_production_accuracy_min
		  ,ps_production_max
		  ,ps_production_mean
		  ,ps_production_min
		  ,ps_pulling_max
		  ,ps_pulling_mean
		  ,ps_pulling_min
		  ,ps_pursuit_max
		  ,ps_pursuit_mean
		  ,ps_pursuit_min
		  ,ps_range_ball_awareness_max
		  ,ps_range_ball_awareness_mean
		  ,ps_range_ball_awareness_min
		  ,ps_release_max
		  ,ps_release_mean
		  ,ps_release_min
		  ,ps_rise_max
		  ,ps_rise_mean
		  ,ps_rise_min
		  ,ps_routes_max
		  ,ps_routes_mean
		  ,ps_routes_min
		  ,ps_run_after_catch_max
		  ,ps_run_after_catch_mean
		  ,ps_run_after_catch_min
		  ,ps_shed_blockers_use_of_hands_max
		  ,ps_shed_blockers_use_of_hands_mean
		  ,ps_shed_blockers_use_of_hands_min
		  ,ps_size_max
		  ,ps_size_mean
		  ,ps_size_min
		  ,ps_size_strength_max
		  ,ps_size_strength_mean
		  ,ps_size_strength_min
		  ,ps_special_teams_max
		  ,ps_special_teams_mean
		  ,ps_special_teams_min
		  ,ps_speed_hws_chart_max
		  ,ps_speed_hws_chart_mean
		  ,ps_speed_hws_chart_min
		  ,ps_stepping_pattern_max
		  ,ps_stepping_pattern_mean
		  ,ps_stepping_pattern_min
		  ,ps_straightaway_kicker_max
		  ,ps_straightaway_kicker_mean
		  ,ps_straightaway_kicker_min
		  ,ps_style_max
		  ,ps_style_mean
		  ,ps_style_min
		  ,ps_sustain_run_blocking_max
		  ,ps_sustain_run_blocking_mean
		  ,ps_sustain_run_blocking_min
		  ,ps_tackling_max
		  ,ps_tackling_mean
		  ,ps_tackling_min
		  ,ps_toughness_tackling_max
		  ,ps_toughness_tackling_mean
		  ,ps_toughness_tackling_min
		  ,ps_velocity_max
		  ,ps_velocity_mean
		  ,ps_velocity_min
		  ,ps_vision_instincts_max
		  ,ps_vision_instincts_mean
		  ,ps_vision_instincts_min
		  ,ps_zone_cover_max
		  ,ps_zone_cover_mean
		  ,ps_zone_cover_min
		  ,sticd_character_max
		  ,sticd_character_mean
		  ,sticd_character_min
		  ,sticd_durability_max
		  ,sticd_durability_mean
		  ,sticd_durability_min
		  ,sticd_instincts_max
		  ,sticd_instincts_mean
		  ,sticd_instincts_min
		  ,sticd_speed_max
		  ,sticd_speed_mean
		  ,sticd_speed_min
		  ,sticd_toughness_max
		  ,sticd_toughness_mean
		  ,sticd_toughness_min
		  ,CASE WHEN pl.draft_year > @current_season THEN NULL ELSE CAST(salaries AS FLOAT) END AS pct_of_cap
		  ,season
		  ,CASE WHEN pl.draft_year > @current_season THEN 1 ELSE season_in_league END AS season_in_league
		  ,CASE WHEN pl.draft_year > @current_season THEN NULL ELSE COALESCE(grade_value,50) END AS pro_grade
	  FROM #temp_evaluations_pivot_mean ep_mean
INNER JOIN #temp_evaluations_pivot_min ep_min
		ON ep_mean.bane_player_id = ep_min.bane_player_id
INNER JOIN #temp_evaluations_pivot_max ep_max
		ON ep_mean.bane_player_id = ep_max.bane_player_id
INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON ep_mean.bane_player_id = pl.id
 LEFT JOIN BaneProductionAnalytics.dbo.positions pn
		ON pl.position_id = pn.id  
 LEFT JOIN #temp_draft_board_positions_latest dbp
		ON ep_mean.bane_player_id = dbp.player_id        
 LEFT JOIN AnalyticsWork.dbo.salaries_for_modeling sal
		ON ep_mean.bane_player_id = sal.id
	   AND sal.salaries NOT IN ('Injured','Pre-2011')
 LEFT JOIN Analytics.dbo.analysis_players_pro_grades_first_4_seasons pg
		ON ep_mean.bane_player_id = pg.bane_player_id

/*
SELECT *
FROM Analytics.dbo.r_input_draft_model_post_combine_grades
WHERE player = 'Kizer, Deshone'
*/
