


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for creating the advanced measurables.

It also finds similar players because many of the advanced
measurables are used in the SimScore model.

v6 - Replaced "forty_time" with "dash_forty" (and similar variable name replacement)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available.  This is 
for bucketing for z scores for later on.

OUTPUT TABLES:
##temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions

    SELECT player_id
	      ,position
		  ,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
		        WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
				WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
				ELSE NULL
		   END AS order_by
	 INTO ##temp_draft_board_positions
	 FROM [bane_production_analytics].[dbo].[draft_board_grades]
	WHERE position != '' AND position IS NOT NULL


-- Check if ##temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions_with_order

    SELECT player_id
	      ,position
	      ,RANK() OVER (PARTITION BY player_id ORDER BY order_by) AS draft_board_position_order
	 INTO ##temp_draft_board_positions_with_order
	 FROM ##temp_draft_board_positions

--SELECT * FROM ##temp_draft_board_positions_with_order


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the master measurables table.

Variable workout_type_for_models:
1 - Combine Electronic
2 - Other Electronic
3 - Combine Handheld
4 - Other Handheld

OUTPUT TABLES:
##temp_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if temp_all_measurables exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_master') IS NOT NULL
	DROP TABLE ##temp_measurables_master

    SELECT wo.id AS workout_id
		  ,wo.[description] AS workout_description
		  ,CASE WHEN re.id = 1 THEN 1
		        WHEN re.id = 2 THEN 3
				WHEN re.id != 1 AND UPPER(re.[description]) LIKE '%ELECTRONIC%' THEN 2
				WHEN re.id IN (4,5) THEN 4
				WHEN re.id IS NULL THEN CASE WHEN wt.[type] = 'COMB' THEN 3 
											 WHEN wt.[type] IN ('RCOMB','ALLSTAR','APT','SRCOMB','PDAY','LW','PW') THEN 4
											 ELSE NULL
											 END
				ELSE NULL
		   END AS workout_type_for_models
	      ,wo.player_id
		  ,me.measurable_type_id
		  ,mt.code
		  ,CASE WHEN re.id IS NULL THEN CASE WHEN wt.[type] = 'COMB' THEN 2
		                                     WHEN wt.[type] IN ('RCOMB','ALLSTAR','APT','SRCOMB','PDAY') THEN 5
											 WHEN wt.[type] IN ('LW','PW') THEN 4
											 ELSE NULL
										END	  
		        ELSE re.id 
		   END AS reliability_id
		  ,me.order_by AS attempt
		  ,me.value
	  INTO ##temp_measurables_master
      FROM [bane_production_analytics].[dbo].[workouts] wo
 LEFT JOIN [bane_production_analytics].[dbo].[measurables] me
        ON wo.id=me.workout_id
 LEFT JOIN [bane_production_analytics].[dbo].[measurable_types] mt
		ON me.measurable_type_id=mt.id
 LEFT JOIN [bane_production_analytics].[dbo].[player_workout_types] wt
		ON wo.player_workout_type_id=wt.id
 LEFT JOIN [bane_production_analytics].[dbo].[reliabilities] re
		ON me.reliability_id=re.id
	 WHERE (re.translation IN ('I','V','W') OR wt.[type] IN ('COMB','RCOMB','ALLSTAR','APT','SRCOMB','PDAY','LW','PW'))
	   AND NOT (wt.[type] = 'RPT' AND re.translation = 'I')
	   AND value IS NOT NULL
  ORDER BY wo.player_id
          ,wo.id
		  ,me.measurable_type_id
		  ,re.id

--SELECT * FROM ##temp_measurables_master where player_id=4648


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the 40, 20, and 10 Times so you can get Flying 10 and 20
from the same run.  You want to avoid taking his best 40, and
his best 20 from different runs to calculate his best flying 20.
Also pivot his other runs (Shuttles, etc.) so you can calculate
the advanced measurables.

Pivot the measures in a separate table (because you want MAXes
not MINs) and then join those, along with weight, to the above
pivot.  

When you join the tables together, bear in mind that the runs
will have more than one workout_type_for_models (because they
will have electronic times, too).  Since the measures (weight,
height, hand size) will only have handheld times, there will 
be duplicate rows for all of those (since they join to both 
the electronic and hand times).  That's the reason for the 
CASE statement in the join step.

You want to join the measures onto every attempt of the runs, 
but you need to be careful to not double count them later

If a player has two MEASURES of the same value, does he have duplicates during the pivot?
May need to try adding a second step that just does a group by and a max to get one row per max

OUTPUT TABLES:
##temp_advanced_pivot

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if ##temp_runs_advanced_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_advanced_pivot') IS NOT NULL
	DROP TABLE ##temp_runs_advanced_pivot

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,reliability_id
		  ,attempt
	      ,[40YTime] AS dash_forty
	      ,[20YTime] AS dash_twenty
	      ,[10YTime] AS dash_ten
		  ,[20YShuttle] AS shuttle_short
		  ,[3Cone] AS three_cone
		  ,[60YShuttle] AS shuttle_long
	  INTO ##temp_runs_advanced_pivot
      FROM (
    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,code
		  ,reliability_id
		  ,attempt
		  ,value
      FROM ##temp_measurables_master WHERE code IN ('40YTime', '20YTime', '10YTime', '20YShuttle', '3Cone', '60YShuttle')) up
     PIVOT (MIN(value) FOR code IN ([40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle])) AS pvt
	 WHERE reliability_id IS NOT NULL
  ORDER BY player_id, workout_id

--SELECT * FROM ##temp_runs_advanced_pivot where WORKOUT_ID=539354

-- Check if ##temp_measures_advanced_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_advanced_pivot') IS NOT NULL
	DROP TABLE ##temp_measures_advanced_pivot

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,reliability_id
-----------Don't use attempt here, you're just taking the best measurements. You can't do that with the Dashes because the Flying Times need to be taken by attempt.
		  --,[Wgt] AS [weight]
	      ,[HgtCnv] AS height
	      ,[ArmLngCnv] AS arm_length
	      ,[WSpanCnv] AS wingspan
		  ,[HSpanCnv] AS hand_size
		  ,[BroadJumpCnv] AS jump_broad
		  ,[StrengthReps225] AS bench_reps
		  ,[VertJumpCnv] AS jump_vertical
		  ,[TestScore] AS test_score
	  INTO ##temp_measures_advanced_pivot
      FROM (
    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,reliability_id
		  ,code
		  ,value
      FROM ##temp_measurables_master WHERE code IN ('HgtCnv', 'ArmLngCnv', 'WSpanCnv', 'HSpanCnv', 'BroadJumpCnv','VertJumpCnv', 'StrengthReps225', 'TestScore')) up
     PIVOT (MAX(value) FOR code IN ([HgtCnv], [ArmLngCnv], [WSpanCnv], [HSpanCnv], [BroadJumpCnv],[VertJumpCnv], [StrengthReps225], [TestScore])) AS pvt
	 WHERE reliability_id IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_measures_advanced_pivot where player_id=4648


-- Check if ##temp_advanced_pivot_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_advanced_pivot_no_wgt') IS NOT NULL
	DROP TABLE ##temp_advanced_pivot_no_wgt

    SELECT COALESCE(ru.workout_id,me.workout_id) AS workout_id
		  ,COALESCE(ru.workout_description,me.workout_description) AS workout_description
		  ,COALESCE(ru.workout_type_for_models,me.workout_type_for_models) AS workout_type_for_models
	      ,COALESCE(ru.player_id,me.player_id) AS player_id
		  ,COALESCE(ru.reliability_id,me.reliability_id) AS reliability_id
		  ,attempt
	      ,dash_forty
	      ,dash_twenty
	      ,dash_ten
		  ,shuttle_short
		  ,three_cone
		  ,shuttle_long
	      --,[weight]
--There might be a better way to do this...just join them to every row but take the averages of the pivoted tables before the join?
	      ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE height END AS height
	      ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE arm_length END AS arm_length
	      ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE wingspan END AS wingspan
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE hand_size END AS hand_size
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE jump_broad END AS jump_broad
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE bench_reps END AS bench_reps
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE jump_vertical END AS jump_vertical
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE test_score END AS test_score
	  INTO ##temp_advanced_pivot_no_wgt
      FROM ##temp_runs_advanced_pivot ru
 FULL JOIN ##temp_measures_advanced_pivot me
        ON ru.workout_id = me.workout_id
	   AND ru.workout_type_for_models=me.workout_type_for_models

--SELECT * FROM ##temp_advanced_pivot_no_wgt

 -- Check if ##temp_advanced_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_advanced_pivot') IS NOT NULL
	DROP TABLE ##temp_advanced_pivot

    SELECT nw.*
	      ,Value AS [weight]
	  INTO ##temp_advanced_pivot
	  FROM ##temp_advanced_pivot_no_wgt nw
 LEFT JOIN ##temp_measurables_master ma
        ON nw.workout_id = ma.workout_id
	   AND ma.code='Wgt'

 --SELECT * FROM ##temp_advanced_pivot


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a temp table for each of the measurables. By doing it
this way you can have a normalized table in the end.

For the variables that pull from multiple different drills
(like Lateral Agility Score using 40 and Shuttle) just use
the overall MIN or MAX without regard for Electronic or 
Handheld.  Because the drills are timed by hand, we decided
to allow the use of hand timed 40 for consistency.  Also, 
all of these default to 1 for the "attempt" variable.

If you decide to change this in the future (or if they start 
timing the drills electronically) you will have to add
reliability as a variable in those tables.


CONVERSIONS & EQUATIONS TO NOTE:
1 pound = 0.453595 kilograms
1 yard = 0.9144 meters
s = v0t + 1/2at^2

OUTPUT TABLES:
##temp_flyings_ten
##temp_flyings_twenty
##temp_accelerations_ten
##temp_accelerations_twenty
##temp_accelerations_forty
##temp_velocities_ten
##temp_velocities_twenty
##temp_velocities_forty
##temp_momentums_ten
##temp_momentums_twenty
##temp_momentums_forty
##temp_works_ten_sandy
##temp_works_twenty_sandy
##temp_works_forty_sandy
##temp_powers_ten
##temp_powers_twenty
##temp_powers_forty
##temp_speed_scores_barnwell
##temp_speed_scores_adjusted
##temp_lateral_agility_scores
##temp_speed_scores_cohen
##temp_explosions_index
##temp_explosions_lower
##temp_benches_work
##temp_verticals_power
##temp_verticals_power_kubiak
##temp_verticals_power_spags
##temp_broads_power_sandy
##temp_jumps_combined
##temp_lengths_vertical
##temp_lengths_vertical_with_jump
##temp_ratios_arm_to_height
##temp_ratios_wing_to_height
##temp_radius_arms
##temp_body_mass_indices

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*-------------------------------
Flying 10
-------------------------------*/

-- Check if ##temp_flyings_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_flyings_ten') IS NOT NULL
	DROP TABLE ##temp_flyings_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Flying10Time' AS code
		  ,reliability_id
		  ,attempt
	      ,(dash_twenty-dash_ten) AS value
	  INTO ##temp_flyings_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_twenty IS NOT NULL
	   AND dash_ten IS NOT NULL
  ORDER BY workout_id

  --select * from ##temp_flyings_ten

/*-------------------------------
Flying 20
-------------------------------*/

-- Check if ##temp_flyings_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_flyings_twenty') IS NOT NULL
	DROP TABLE ##temp_flyings_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Flying20Time' AS code
		  ,reliability_id
		  ,attempt
	      ,(dash_forty-dash_twenty) AS value
	  INTO ##temp_flyings_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND dash_twenty IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_flyings_twenty

/*-------------------------------
Acceleration at 10
-------------------------------*/

-- Check if ##temp_accelerations_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_accelerations_ten') IS NOT NULL
	DROP TABLE ##temp_accelerations_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Acceleration10' AS code
		  ,reliability_id
		  ,attempt
	      ,2*(10*0.9144)/POWER(dash_ten,2) AS value
	  INTO ##temp_accelerations_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_accelerations_ten

/*-------------------------------
Acceleration at 20
-------------------------------*/

-- Check if ##temp_accelerations_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_accelerations_twenty') IS NOT NULL
	DROP TABLE ##temp_accelerations_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Acceleration20' AS code
		  ,reliability_id
		  ,attempt
	      ,2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/POWER((dash_twenty-dash_ten),2) AS value
	  INTO ##temp_accelerations_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_accelerations_twenty

/*-------------------------------
Acceleration at 40
-------------------------------*/

-- Check if ##temp_accelerations_forty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_accelerations_forty') IS NOT NULL
	DROP TABLE ##temp_accelerations_forty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Acceleration40' AS code
		  ,reliability_id
		  ,attempt
	      ,2*(20-(2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/(dash_twenty-dash_ten)))/POWER(dash_forty-dash_twenty,2) AS value
	  INTO ##temp_accelerations_forty
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND dash_forty IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_accelerations_forty

/*-------------------------------
Velocity 10
-------------------------------*/

-- Check if ##temp_velocities_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_velocities_ten') IS NOT NULL
	DROP TABLE ##temp_velocities_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Velocity10' AS code
		  ,reliability_id
		  ,attempt
	      ,2*(10*0.9144)/dash_ten AS value
	  INTO ##temp_velocities_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_velocities_ten

/*-------------------------------
Velocity 20
-------------------------------*/

-- Check if ##temp_velocities_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_velocities_twenty') IS NOT NULL
	DROP TABLE ##temp_velocities_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Velocity20' AS code
		  ,reliability_id
		  ,attempt
	      ,2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/(dash_twenty-dash_ten)/dash_ten AS value
	  INTO ##temp_velocities_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_velocities_twenty

/*-------------------------------
Velocity 40
-------------------------------*/

-- Check if ##temp_velocities_forty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_velocities_forty') IS NOT NULL
	DROP TABLE ##temp_velocities_forty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Velocity40' AS code
		  ,reliability_id
		  ,attempt
	      ,2*(20-(2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/(dash_twenty-dash_ten)))/(dash_forty-dash_twenty) AS value
	  INTO ##temp_velocities_forty
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND dash_forty IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_velocities_forty

/*-------------------------------
Momentum 10
Momentum is mass times velocity
-------------------------------*/

-- Check if ##temp_momentums_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_momentums_ten') IS NOT NULL
	DROP TABLE ##temp_momentums_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Momentum10' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight]*0.453595)*(2*(10*0.9144)/dash_ten) AS value
	  INTO ##temp_momentums_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_momentums_ten

/*-------------------------------
Momentum 20
Momentum is mass times velocity
-------------------------------*/

-- Check if ##temp_momentums_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_momentums_twenty') IS NOT NULL
	DROP TABLE ##temp_momentums_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Momentum20' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight]*0.453595)*(2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/(dash_twenty-dash_ten)) AS value
	  INTO ##temp_momentums_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_momentums_twenty

/*-------------------------------
Momentum 40
Momentum is mass times velocity
-------------------------------*/

-- Check if ##temp_momentums_forty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_momentums_forty') IS NOT NULL
	DROP TABLE ##temp_momentums_forty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Momentum40' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight]*0.453595)*(2*(20-(2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/(dash_twenty-dash_ten)))/(dash_forty-dash_twenty)) AS value
	  INTO ##temp_momentums_forty
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND dash_forty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_momentums_forty

/*-------------------------------
Work 10
(Sandy Version)
Work is force times distance
Force is mass times acceleration  
-------------------------------*/

-- Check if ##temp_works_ten_sandy exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_works_ten_sandy') IS NOT NULL
	DROP TABLE ##temp_works_ten_sandy

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Work10Sandy' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight]*0.453595)*POWER((2*(10*0.9144)/dash_ten),2)*10 AS value
	  INTO ##temp_works_ten_sandy
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_works_ten_sandy

/*-------------------------------
Work 20
(Sandy Version)
(This is actually the work done between 10 and 20, not just the work done overall from 0 to 20)
Work is force times distance
Force is mass times acceleration  
-------------------------------*/

-- Check if ##temp_works_twenty_sandy exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_works_twenty_sandy') IS NOT NULL
	DROP TABLE ##temp_works_twenty_sandy

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Work20Sandy' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight]*0.453595)*(2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/POWER((dash_twenty-dash_ten),2))*10 AS value
	  INTO ##temp_works_twenty_sandy
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_works_twenty_sandy

/*-------------------------------
Work 40
(Sandy Version)
(This is actually the work done between 20 and 40, not just the work done overall from 0 to 40)
Work is force times distance
Force is mass times acceleration  
-------------------------------*/

-- Check if ##temp_works_forty_sandy exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_works_forty_sandy') IS NOT NULL
	DROP TABLE ##temp_works_forty_sandy

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Work40Sandy' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight]*0.453595)*(2*(20-(2*(10-((2*(10*0.9144)/dash_ten)*(dash_twenty-dash_ten)))/(dash_twenty-dash_ten)))/POWER(dash_forty-dash_twenty,2))*20 AS value
	  INTO ##temp_works_forty_sandy
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND dash_forty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_works_forty_sandy

/*-------------------------------
Power 10
Power is work over time 
-------------------------------*/

-- Check if ##temp_powers_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_powers_ten') IS NOT NULL
	DROP TABLE ##temp_powers_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Power10' AS code
		  ,reliability_id
		  ,attempt
	      ,(([weight]*0.453595)*(10*0.9144))/dash_ten AS value
	  INTO ##temp_powers_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_powers_ten

/*-------------------------------
Power 20
Power is work over time 
-------------------------------*/

-- Check if ##temp_powers_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_powers_twenty') IS NOT NULL
	DROP TABLE ##temp_powers_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Power20' AS code
		  ,reliability_id
		  ,attempt
	      ,(([weight]*0.453595)*(20*0.9144))/dash_twenty AS value
	  INTO ##temp_powers_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_twenty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_powers_twenty

/*-------------------------------
Power 40
Power is work over time 
-------------------------------*/

-- Check if ##temp_powers_forty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_powers_forty') IS NOT NULL
	DROP TABLE ##temp_powers_forty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Power40' AS code
		  ,reliability_id
		  ,attempt
	      ,(([weight]*0.453595)*(40*0.9144))/dash_forty AS value
	  INTO ##temp_powers_forty
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_powers_forty

/*-------------------------------
Speed Score Barnwell
-------------------------------*/

-- Check if ##temp_speed_scores_barnwell exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_speed_scores_barnwell') IS NOT NULL
	DROP TABLE ##temp_speed_scores_barnwell

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'SpeedScoreBarnwell' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight]*200)/POWER(dash_forty,4) AS value
	  INTO ##temp_speed_scores_barnwell
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_speed_scores_barnwell

/*-------------------------------
Speed Score Adjusted
-------------------------------*/

-- Check if ##temp_speed_scores_adjusted exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_speed_scores_adjusted') IS NOT NULL
	DROP TABLE ##temp_speed_scores_adjusted

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'SpeedScoreAdjusted' AS code
		  ,reliability_id
		  ,attempt
	      ,([weight] * 125)/(dash_forty *dash_ten*shuttle_short*three_cone) AS value
	  INTO ##temp_speed_scores_adjusted
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND dash_ten IS NOT NULL
	   AND shuttle_short IS NOT NULL
	   AND three_cone IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_speed_scores_adjusted

/*-------------------------------
Speed Score Cohen
-------------------------------*/

-- Check if ##temp_speed_scores_cohen exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_speed_scores_cohen') IS NOT NULL
	DROP TABLE ##temp_speed_scores_cohen

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'SpeedScoreCohen' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,MIN(dash_forty)+MIN(dash_ten)+MIN(shuttle_short)+MIN(three_cone) AS value
	  INTO ##temp_speed_scores_cohen
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND dash_ten IS NOT NULL
	   AND shuttle_short IS NOT NULL
	   AND three_cone IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_speed_scores_cohen

/*-------------------------------
Lateral Agility
-------------------------------*/

-- Check if ##temp_lateral_agility_scores exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_lateral_agility_scores') IS NOT NULL
	DROP TABLE ##temp_lateral_agility_scores

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'LateralAgility' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,(MIN(dash_forty)-MIN(shuttle_short)) AS value
	  INTO ##temp_lateral_agility_scores
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND shuttle_short IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id

--SELECT * FROM ##temp_lateral_agility_scores

/*-------------------------------
Explosion Index (Kirwan/Cohen)
-------------------------------*/

-- Check if ##temp_explosions_index exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_explosions_index') IS NOT NULL
	DROP TABLE ##temp_explosions_index

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'ExplosionIndex' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,MAX(jump_vertical) + MAX(jump_broad)/12 + MAX(bench_reps) AS value
	  INTO ##temp_explosions_index
      FROM ##temp_advanced_pivot
	 WHERE jump_vertical IS NOT NULL
	   AND jump_broad IS NOT NULL
	   AND bench_reps IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_explosions_index

/*-------------------------------
Lower Body Explosion
-------------------------------*/

-- Check if ##temp_explosions_lower exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_explosions_lower') IS NOT NULL
	DROP TABLE ##temp_explosions_lower

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'ExplosionLower' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,MAX(jump_vertical) + 3.5*(MAX(jump_broad)/12)*(MAX([weight])/(MAX(height)/12))/3000 AS value
	  INTO ##temp_explosions_lower
      FROM ##temp_advanced_pivot
	 WHERE jump_vertical IS NOT NULL
	   AND jump_broad IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND height IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_explosions_lower

/*-------------------------------
Bench Work Joules

225 lbs = 100 kg
9.8 m/s is the force of gravity
0.0254 inches in a meter
divide the above by the time it takes him to do his reps to get bench_watts (not jj)
-------------------------------*/

-- Check if ##temp_benches_work exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_benches_work') IS NOT NULL
	DROP TABLE ##temp_benches_work

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BenchWorkJoules' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,((100*9.8)/(MAX(arm_length)*0.0254))*MAX(bench_reps) AS value
	  INTO ##temp_benches_work
      FROM ##temp_advanced_pivot
	 WHERE arm_length IS NOT NULL
	   AND bench_reps IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_benches_work

/*-------------------------------
Vertical Jump Power

I dont know where the below equation 
comes from, it was in Sandy's code

Vertical Jump Power Equation
60.7*jump (in cm) + 45.3*[weight] (in kg) - 2055
-------------------------------*/

-- Check if ##temp_verticals_power exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_verticals_power') IS NOT NULL
	DROP TABLE ##temp_verticals_power

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'JumpVertPower' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,(60.7*MAX(jump_vertical)*2.54) + (45.3*(MAX([weight])*0.453595)) - 2055  AS value
	  INTO ##temp_verticals_power
      FROM ##temp_advanced_pivot
	 WHERE jump_vertical IS NOT NULL
	   AND [weight] IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_verticals_power

/*-------------------------------
Vertical Jump Power
(Kubiak Version)

-------------------------------*/

-- Check if ##temp_verticals_power_kubiak exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_verticals_power_kubiak') IS NOT NULL
	DROP TABLE ##temp_verticals_power_kubiak

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'JumpVertPowerKubiak' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,8*MAX([weight])*SQRT(MAX(jump_vertical)/12) AS value
	  INTO ##temp_verticals_power_kubiak
      FROM ##temp_advanced_pivot
	 WHERE jump_vertical IS NOT NULL
	   AND [weight] IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_verticals_power_kubiak

/*-------------------------------
Vertical Jump Power
(Spagnuolo Version)
-------------------------------*/

-- Check if ##temp_verticals_power_spags exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_verticals_power_spags') IS NOT NULL
	DROP TABLE ##temp_verticals_power_spags

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'JumpVertPowerSpags' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,SQRT(MAX([weight]))*SQRT(MAX(jump_vertical)) AS value
	  INTO ##temp_verticals_power_spags
      FROM ##temp_advanced_pivot
	 WHERE jump_vertical IS NOT NULL
	   AND [weight] IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_verticals_power_spags

/*-------------------------------
Broad Jump Power
(Sandy Version)

I dont know where the below equation 
comes from, it was in Sandy's code
-------------------------------*/

-- Check if ##temp_broads_power_sandy exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_broads_power_sandy') IS NOT NULL
	DROP TABLE ##temp_broads_power_sandy

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'JumpBroadPowerSandy' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,4*SQRT(2)*MAX([weight])*SQRT(MAX(jump_broad)/12) AS value
	  INTO ##temp_broads_power_sandy
      FROM ##temp_advanced_pivot
	 WHERE jump_broad IS NOT NULL
	   AND [weight] IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_broads_power_sandy

/*-------------------------------
Combined Jump
(Sandy Version)

I dont know where the below equation 
comes from, it was in Sandy's code
-------------------------------*/

-- Check if ##temp_jumps_combined exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_jumps_combined') IS NOT NULL
	DROP TABLE ##temp_jumps_combined

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'JumpCombined' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,(MAX(jump_vertical) + MAX(jump_broad))/2 AS value
	  INTO ##temp_jumps_combined
      FROM ##temp_advanced_pivot
	 WHERE jump_broad IS NOT NULL
	   AND jump_vertical IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_jumps_combined

/*-------------------------------
Vertical Length
-------------------------------*/

-- Check if ##temp_lengths_vertical exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_lengths_vertical') IS NOT NULL
	DROP TABLE ##temp_lengths_vertical

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'LengthVertical' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,MAX(height) + MAX(arm_length) AS value
	  INTO ##temp_lengths_vertical
      FROM ##temp_advanced_pivot
	 WHERE height IS NOT NULL
	   AND arm_length IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_lengths_vertical

/*-------------------------------
Vertical Length With Jump
-------------------------------*/

-- Check if ##temp_lengths_vertical_with_jump exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_lengths_vertical_with_jump') IS NOT NULL
	DROP TABLE ##temp_lengths_vertical_with_jump

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'LengthVerticalWithJump' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,MAX(height) + MAX(arm_length) + MAX(jump_vertical) AS value
	  INTO ##temp_lengths_vertical_with_jump
      FROM ##temp_advanced_pivot
	 WHERE height IS NOT NULL
	   AND arm_length IS NOT NULL
	   AND jump_vertical IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_lengths_vertical_with_jump

/*-------------------------------
Arm Length to Height Ratio
-------------------------------*/

-- Check if ##temp_ratios_arm_to_height exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_ratios_arm_to_height') IS NOT NULL
	DROP TABLE ##temp_ratios_arm_to_height

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'RatioArmToHeight' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,MAX(arm_length)*2 / MAX(height) AS value
	  INTO ##temp_ratios_arm_to_height
      FROM ##temp_advanced_pivot
	 WHERE height IS NOT NULL
	   AND arm_length IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_ratios_arm_to_height

/*-------------------------------
Wingspan to Height Ratio
-------------------------------*/

-- Check if ##temp_ratios_wing_to_height exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_ratios_wing_to_height') IS NOT NULL
	DROP TABLE ##temp_ratios_wing_to_height

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'RatioWingToHeight' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,MAX(wingspan) / MAX(height) AS value
	  INTO ##temp_ratios_wing_to_height
      FROM ##temp_advanced_pivot
	 WHERE height IS NOT NULL
	   AND wingspan IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_ratios_wing_to_height

/*-------------------------------
Arm Radius
-------------------------------*/

-- Check if ##temp_radius_arms exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_radius_arms') IS NOT NULL
	DROP TABLE ##temp_radius_arms

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'ArmRadius' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,POWER(MAX(arm_length),2) AS value
	  INTO ##temp_radius_arms
      FROM ##temp_advanced_pivot
	 WHERE arm_length IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_radius_arms

/*-------------------------------
Arm Radius
-------------------------------*/

-- Check if ##temp_body_mass_indices exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_body_mass_indices') IS NOT NULL
	DROP TABLE ##temp_body_mass_indices

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BodyMassIndex' AS code
		  ,MAX(reliability_id) AS reliability_id
		  ,1 AS attempt
	      ,730*MAX([weight]) / MAX(height) AS value
	  INTO ##temp_body_mass_indices
      FROM ##temp_advanced_pivot
	 WHERE [weight] IS NOT NULL
	   AND height IS NOT NULL
  GROUP BY workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
  ORDER BY workout_id
  
--SELECT * FROM ##temp_body_mass_indices


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append all the Advanced Measurables to the Master 
measurables table.

OUTPUT TABLES:
##temp_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_flyings_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_flyings_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_accelerations_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_accelerations_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_accelerations_forty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_velocities_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_velocities_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_velocities_forty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_momentums_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_momentums_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_momentums_forty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_works_ten_sandy

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_works_twenty_sandy

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_works_forty_sandy

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_powers_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_powers_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_powers_forty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_speed_scores_barnwell

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_speed_scores_adjusted

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_lateral_agility_scores

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_speed_scores_cohen

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_explosions_index

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_explosions_lower

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_benches_work

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_verticals_power

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_verticals_power_kubiak

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_verticals_power_spags

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_broads_power_sandy

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_jumps_combined

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_lengths_vertical

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_lengths_vertical_with_jump

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_ratios_arm_to_height

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_ratios_wing_to_height

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_radius_arms
	  
INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_body_mass_indices

--SELECT * FROM ##temp_measurables_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Order his individual workout times so you get the best time from
a given workout. Create a variable so you can look up the best
time for a given workout, for a given model workout type, for 
a given reliability, and for overall best.

OUTPUT TABLES:

##temp_measurables_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measurables_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_with_order') IS NOT NULL
	DROP TABLE ##temp_measurables_with_order

    SELECT *
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BodyMassIndex','SpeedScoreCohen') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY workout_id, code ORDER BY value DESC, attempt DESC)
		   END AS measurable_order_by_workout
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BodyMassIndex','SpeedScoreCohen') THEN RANK() OVER (PARTITION BY player_id, reliability_id, code ORDER BY value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY player_id, reliability_id, code ORDER BY value DESC, attempt DESC)
		   END AS measurable_order_by_reliability
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BodyMassIndex','SpeedScoreCohen') THEN RANK() OVER (PARTITION BY player_id, workout_type_for_models, code ORDER BY value, attempt DESC, workout_id)
		        ELSE RANK() OVER (PARTITION BY player_id, workout_type_for_models, code ORDER BY value DESC, attempt DESC, workout_id)
		   END AS measurable_order_by_model_type
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BodyMassIndex','SpeedScoreCohen') THEN RANK() OVER (PARTITION BY player_id, code ORDER BY value, attempt DESC, workout_type_for_models, workout_id, attempt)
		        ELSE RANK() OVER (PARTITION BY player_id, code ORDER BY value DESC, attempt DESC, workout_type_for_models, workout_id, attempt)
		   END AS measurable_order_all
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BodyMassIndex','SpeedScoreCohen') THEN RANK() OVER (PARTITION BY player_id, code ORDER BY reliability_id, value, attempt DESC, workout_type_for_models, workout_id, attempt)
		        ELSE RANK() OVER (PARTITION BY player_id, code ORDER BY reliability_id, value DESC, attempt DESC, workout_type_for_models, workout_id, attempt)
		   END AS measurable_order_all_with_reliabilty
      INTO ##temp_measurables_with_order
      FROM ##temp_measurables_master
  ORDER BY player_id
          ,workout_id
		  ,code

--SELECT * FROM ##temp_measurables_with_order where code in ('ArmLngCnv','StrengthReps225','BenchWorkJoules')



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Run Measurables Table for finding the averages. 

Because of the way you are now handling the order, you need to join 
the weight back in on workout ID, because it may not have the same
order by variable as the others.  You want the weight and the time
to come from the same workout.

The reason you have to join weight in on a separate table is there is 
no such thing as an "Indy Electronic" or "Other Electronic" weight.
Because the weight is handheld, if you pivot with weight the electronic 
times will not have an associated weight.

OUTPUT TABLES:
##temp_runs_no_wgt
##temp_runs_player_overall_best

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_no_wgt') IS NOT NULL
	DROP TABLE ##temp_runs_no_wgt

    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
	      --,Wgt AS [weight]
	      ,[40YTime] AS dash_forty
	      ,[20YTime] AS dash_twenty
	      ,[10YTime] AS dash_ten
		  ,[20YShuttle] AS shuttle_short
		  ,[3Cone] AS three_cone
		  ,[60YShuttle] AS shuttle_long
		  ,[Flying10Time] AS flying_ten
		  ,[Flying20Time] AS flying_twenty
		  ,[SpeedScoreCohen] AS speed_score_cohen
		  ,[BodyMassIndex] AS body_mass_index
	  INTO ##temp_runs_no_wgt
      FROM (
    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
--Use measurable_order_all_workouts so that you only get the best measurable from every player.
		  ,measurable_order_all_with_reliabilty
		  ,code
		  ,value
      FROM ##temp_measurables_with_order WHERE code IN ('40YTime', '20YTime', '10YTime', '20YShuttle', '3Cone', '60YShuttle', 'Flying10Time', 'Flying20Time','SpeedScoreCohen','BodyMassIndex')) up
     PIVOT (MIN(value) FOR code IN ([40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle], [Flying10Time], [Flying20Time], [SpeedScoreCohen],[BodyMassIndex])) AS pvt
	 WHERE measurable_order_all_with_reliabilty=1
  ORDER BY player_id, workout_id  

 --SELECT * FROM ##temp_runs_no_wgt


 -- Check if ##temp_runs_player_overall_best exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_player_overall_best') IS NOT NULL
	DROP TABLE ##temp_runs_player_overall_best

    SELECT nw.*
	      ,Value AS [weight]
	  INTO ##temp_runs_player_overall_best
	  FROM ##temp_runs_no_wgt nw
INNER JOIN ##temp_measurables_with_order wo
        ON nw.workout_id = wo.workout_id
	   AND wo.code='Wgt'

 --SELECT * FROM ##temp_runs_player_overall_best


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the mean and standard deviations for each weight bucket.
For the dashes, the buckets range from 3 to 7 pounds wide, depending
on sample sizes.  

Instead of just creating a 5 (or 3 or 7) pound bucket that each weight 
falls into, for every individual weight create a bucket that includes 
the 2 (or 1 or 3) pounds above and below.

OUTPUT TABLES:
##temp_runs_avg_stdev


----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_avg_stdev exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_avg_stdev') IS NOT NULL
	DROP TABLE ##temp_runs_avg_stdev

    SELECT DISTINCT r1.[weight]
-----------Forty Yard Dash
	      ,CASE WHEN r1.[weight] < 150 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 150 AND r1.[weight] <= 154) OR (r1.[weight] IN (346,347)) THEN (SELECT AVG(dash_forty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 155 AND r1.[weight] <= 160) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT AVG(dash_forty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(dash_forty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS dash_forty_mean
	      ,CASE WHEN r1.[weight] < 150 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 150 AND r1.[weight] <= 154) OR (r1.[weight] IN (346,347)) THEN (SELECT STDEVP(dash_forty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 155 AND r1.[weight] <= 160) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT STDEVP(dash_forty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(dash_forty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS dash_forty_stdev
-----------Twenty Yard Dash
	      ,CASE WHEN r1.[weight] < 150 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 150 AND r1.[weight] <= 154) OR (r1.[weight] IN (346,347)) THEN (SELECT AVG(dash_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 155 AND r1.[weight] <= 160) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT AVG(dash_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(dash_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS dash_twenty_mean
	      ,CASE WHEN r1.[weight] < 150 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 150 AND r1.[weight] <= 154) OR (r1.[weight] IN (346,347)) THEN (SELECT STDEVP(dash_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 155 AND r1.[weight] <= 160) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT STDEVP(dash_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(dash_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS dash_twenty_stdev
-----------Ten Yard Dash
	      ,CASE WHEN r1.[weight] < 159 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 159 AND r1.[weight] <= 161) OR (r1.[weight] IN (346,347)) THEN (SELECT AVG(dash_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 168) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT AVG(dash_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(dash_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS dash_ten_mean
	      ,CASE WHEN r1.[weight] < 159 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 159 AND r1.[weight] <= 161) OR (r1.[weight] IN (346,347)) THEN (SELECT STDEVP(dash_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 168) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT STDEVP(dash_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(dash_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS dash_ten_stdev
-----------Flying Twenty
	      ,CASE WHEN r1.[weight] < 150 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 150 AND r1.[weight] <= 154) OR (r1.[weight] IN (346,347)) THEN (SELECT AVG(flying_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 155 AND r1.[weight] <= 160) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT AVG(flying_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(flying_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS flying_twenty_mean
	      ,CASE WHEN r1.[weight] < 150 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 150 AND r1.[weight] <= 154) OR (r1.[weight] IN (346,347)) THEN (SELECT STDEVP(flying_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 155 AND r1.[weight] <= 160) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT STDEVP(flying_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(flying_twenty) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS flying_twenty_stdev
-----------Ten Yard Dash
	      ,CASE WHEN r1.[weight] < 159 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 159 AND r1.[weight] <= 161) OR (r1.[weight] IN (346,347)) THEN (SELECT AVG(flying_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 168) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT AVG(flying_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(flying_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS flying_ten_mean
	      ,CASE WHEN r1.[weight] < 159 OR r1.[weight] > 347 THEN NULL
		        WHEN (r1.[weight] >= 159 AND r1.[weight] <= 161) OR (r1.[weight] IN (346,347)) THEN (SELECT STDEVP(flying_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 168) OR (r1.[weight] >= 336 AND r1.[weight] <= 345) THEN (SELECT STDEVP(flying_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(flying_ten) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS flying_ten_stdev
-----------Long Shuttle
	      ,CASE WHEN r1.[weight] < 162 OR r1.[weight] > 269 THEN NULL
		        WHEN (r1.[weight] IN (162)) THEN (SELECT AVG(shuttle_long) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 163 AND r1.[weight] <= 172) OR (r1.[weight] >= 262 AND r1.[weight] <= 269) THEN (SELECT AVG(shuttle_long) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(shuttle_long) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS shuttle_long_mean
	      ,CASE WHEN r1.[weight] < 162 OR r1.[weight] > 269 THEN NULL
		        WHEN (r1.[weight] IN (162)) THEN (SELECT STDEVP(shuttle_long) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 163 AND r1.[weight] <= 172) OR (r1.[weight] >= 262 AND r1.[weight] <= 269) THEN (SELECT STDEVP(shuttle_long) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(shuttle_long) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS shuttle_long_stdev
-----------Short Shuttle
	      ,CASE WHEN r1.[weight] < 160 OR r1.[weight] > 339 THEN NULL
		        WHEN (r1.[weight] IN (160,161)) THEN (SELECT AVG(shuttle_short) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 171) OR (r1.[weight] >= 327 AND r1.[weight] <= 339) THEN (SELECT AVG(shuttle_short) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(shuttle_short) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS shuttle_short_mean
	      ,CASE WHEN r1.[weight] < 160 OR r1.[weight] > 339 THEN NULL
		        WHEN (r1.[weight] IN (160,161)) THEN (SELECT STDEVP(shuttle_short) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 171) OR (r1.[weight] >= 327 AND r1.[weight] <= 339) THEN (SELECT STDEVP(shuttle_short) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(shuttle_short) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS shuttle_short_stdev
-----------Three Cone
	      ,CASE WHEN r1.[weight] < 160 OR r1.[weight] > 341 THEN NULL
		        WHEN (r1.[weight] IN (160,161,340,341)) THEN (SELECT AVG(three_cone) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 172) OR (r1.[weight] >= 326 AND r1.[weight] <= 339) THEN (SELECT AVG(three_cone) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(three_cone) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS three_cone_mean
	      ,CASE WHEN r1.[weight] < 160 OR r1.[weight] > 341 THEN NULL
		        WHEN (r1.[weight] IN (160,161,340,341)) THEN (SELECT STDEVP(three_cone) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 172) OR (r1.[weight] >= 326 AND r1.[weight] <= 339) THEN (SELECT STDEVP(three_cone) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(three_cone) FROM ##temp_runs_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS three_cone_stdev
	  INTO ##temp_runs_avg_stdev
      FROM ##temp_runs_player_overall_best r1
	 WHERE r1.[weight] >= 140
	   AND r1.[weight] <= 400
  ORDER BY r1.[weight]

--SELECT * FROM ##temp_runs_avg_stdev


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Run Measurables Table for creating player z scores.
Keep the players' best times for ever given workout_type_for_models.

Because we aren't as interested the actual time as his time/weight z score, 
we want the lowest of those, not necessarily the lowest raw time.

The reason you have to join weight in on a separate table is there is 
no such thing as an "Indy Electronic" or "Other Electronic" weight.
Because the weight is handheld, if you pivot with weight the electronic 
times will not have an associated weight.

OUTPUT TABLES:
##temp_runs_player_no_wgt
##temp_runs_player_model_type_best

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_player_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_player_no_wgt') IS NOT NULL
	DROP TABLE ##temp_runs_player_no_wgt

    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
	      --,Wgt AS [weight]
	      ,[40YTime] AS dash_forty
	      ,[20YTime] AS dash_twenty
	      ,[10YTime] AS dash_ten
		  ,[20YShuttle] AS shuttle_short
		  ,[3Cone] AS three_cone
		  ,[60YShuttle] AS shuttle_long
		  ,[Flying10Time] AS flying_ten
		  ,[Flying20Time] AS flying_twenty
		  ,[SpeedScoreCohen] AS speed_score_cohen
		  ,[BodyMassIndex] AS body_mass_index
	  INTO ##temp_runs_player_no_wgt
      FROM (
    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
		  ,measurable_order_by_model_type
		  ,code
		  ,value
      FROM ##temp_measurables_with_order WHERE code IN ('40YTime', '20YTime', '10YTime', '20YShuttle', '3Cone', '60YShuttle', 'Flying10Time', 'Flying20Time','SpeedScoreCohen','BodyMassIndex')) up
     PIVOT (MIN(value) FOR code IN ([40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle], [Flying10Time], [Flying20Time], [SpeedScoreCohen], [BodyMassIndex])) AS pvt
	 WHERE measurable_order_by_model_type=1
  ORDER BY player_id, workout_id  

 --SELECT * FROM ##temp_runs_player_no_wgt


 -- Check if ##temp_runs_player_model_type_best exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_player_model_type_best') IS NOT NULL
	DROP TABLE ##temp_runs_player_model_type_best

    SELECT nw.*
	      ,Value AS [weight]
	  INTO ##temp_runs_player_model_type_best
	  FROM ##temp_runs_player_no_wgt nw
INNER JOIN ##temp_measurables_with_order wo
        ON nw.workout_id = wo.workout_id
	   AND wo.code='Wgt'

 --SELECT * FROM ##temp_runs_player_model_type_best



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the z scores for the 40/20/10 yard dashes
and the short/long shuttles and 3 cone drill.

OUTPUT TABLES:
##temp_runs_with_z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_with_z exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_with_z') IS NOT NULL
	DROP TABLE ##temp_runs_with_z

    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
	      ,mb.[weight]
	      ,dash_forty
		  ,(dash_forty - dash_forty_mean) / dash_forty_stdev AS dash_forty_z_score
	      ,dash_twenty
		  ,(dash_twenty - dash_twenty_mean) / dash_twenty_stdev AS dash_twenty_z_score
	      ,dash_ten
		  ,(dash_ten - dash_ten_mean) / dash_ten_stdev AS dash_ten_z_score
	      ,flying_ten
		  ,(flying_ten - flying_ten_mean) / flying_ten_stdev AS flying_ten_z_score
		  ,flying_twenty
		  ,(flying_twenty - flying_twenty_mean) / flying_twenty_stdev AS flying_twenty_z_score
		  ,shuttle_long
		  ,(shuttle_long - shuttle_long_mean) / shuttle_long_stdev AS shuttle_long_z_score
		  ,shuttle_short
		  ,(shuttle_short - shuttle_short_mean) / shuttle_short_stdev AS shuttle_short_z_score
		  ,three_cone
		  ,(three_cone - three_cone_mean) / three_cone_stdev AS three_cone_z_score
		  ,speed_score_cohen
		  ,body_mass_index
	  INTO ##temp_runs_with_z 
	  FROM ##temp_runs_avg_stdev av
INNER JOIN ##temp_runs_player_model_type_best mb
        ON av.[weight] = mb.[weight]

--SELECT * FROM ##temp_runs_with_z


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the table with each player's best run z scores for every
workout_type_for_models variable. This gives you more flexilibity
with which "best" to use.

OUTPUT TABLES:
##temp_runs_best_z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_best_z exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_best_z') IS NOT NULL
	DROP TABLE ##temp_runs_best_z

    SELECT player_id
		  ,workout_type_for_models
		  ,MAX([weight]) AS [weight]
		  ,MIN(dash_forty) AS dash_forty_best
		  ,MIN(dash_forty_z_score) AS dash_forty_z_score_best
	      ,MIN(dash_twenty) AS dash_twenty_best
	      ,MIN(dash_twenty_z_score) AS dash_twenty_z_score_best
	      ,MIN(dash_ten) AS dash_ten_best
	      ,MIN(dash_ten_z_score) AS dash_ten_z_score_best
	      ,MIN(flying_twenty) AS flying_twenty_best
	      ,MIN(flying_twenty_z_score) AS flying_twenty_z_score_best
	      ,MIN(flying_ten) AS flying_ten_best
	      ,MIN(flying_ten_z_score) AS flying_ten_z_score_best
		  ,MIN(shuttle_long) AS shuttle_long_best
		  ,MIN(shuttle_long_z_score) AS shuttle_long_z_score_best
	      ,MIN(shuttle_short) AS shuttle_short_best
	      ,MIN(shuttle_short_z_score) AS shuttle_short_z_score_best
	      ,MIN(three_cone) AS three_cone_best
		  ,MIN(three_cone_z_score) AS three_cone_z_score_best
		  ,MIN(speed_score_cohen) AS speed_score_cohen_best
		  ,MIN(body_mass_index) AS body_mass_index_best
	  INTO ##temp_runs_best_z
	  FROM ##temp_runs_with_z
  GROUP BY player_id, workout_type_for_models
  ORDER BY player_id, workout_type_for_models

--SELECT * FROM ##temp_runs_best_z


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Non-Run Measurables Table for finding the averages. 

Some are bucketed by position (hand size), some are bucketed by 
more than one position (weight) so that you can easily move a player 
back and forth between positions (in case you have a safety and you
want to project him as a LB), others are bucketed by other factors.

You join in weight in a second step for the same reason as 
the above sections that pivot workout data similarly.

The reason we don't just take all the weights to get a weight z score
is because we can't say universally whether it is better to be heavier
or lighter.  Because if you just use the weights joined on to their 
best workouts, you will double count for some players, add the 
case statement in the table to create the averages so it only takes
one weight per player.


OUTPUT TABLES:
##temp_measures_player_overall_best

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_no_wgt') IS NOT NULL
	DROP TABLE ##temp_measures_no_wgt

    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
	      ,[HgtCnv] AS height
	      ,[ArmLngCnv] AS arm_length
	      ,[WSpanCnv] AS wingspan
		  ,[HSpanCnv] AS hand_size
		  ,[BroadJumpCnv] AS jump_broad
		  ,[StrengthReps225] AS bench_reps
		  ,[BenchWorkJoules] AS bench_work_joules
		  ,[VertJumpCnv] AS jump_vertical
		  ,[TestScore] AS test_score
		  ,[Acceleration10] AS acceleration_ten
		  ,[Acceleration20] AS acceleration_twenty
		  ,[Acceleration40] AS acceleration_forty
		  ,[ArmRadius] AS arm_radius
		  ,[ExplosionIndex] AS explosion_index
		  ,[ExplosionLower] AS explosion_lower
		  ,[JumpBroadPowerSandy] AS jump_broad_power_sandy
		  ,[JumpCombined] AS jump_combined
		  ,[JumpVertPower] AS jump_vertical_power
		  ,[JumpVertPowerKubiak] AS jump_vertical_power_kubiak
		  ,[JumpVertPowerSpags] AS jump_vertical_power_spags
		  ,[LateralAgilityScore] AS lateral_agility_score
		  ,[LengthVertical] AS length_vertical
		  ,[LengthVerticalWithJump] AS length_vertical_with_jump
		  ,[Momentum10] AS momentum_ten
		  ,[Momentum20] AS momentum_twenty
		  ,[Momentum40] AS momentum_forty
		  ,[RatioArmToHeight] AS ratio_arm_to_height
		  ,[RatioWingToHeight] AS ratio_wing_to_height
		  ,[SpeedScoreAdjusted] AS speed_score_adjusted
		  ,[SpeedScoreBarnwell] AS speed_score_barnwell
		  ,[Velocity10] AS velocity_ten
		  ,[Velocity20] AS velocity_twenty
		  ,[Velocity40] AS velocity_forty
		  ,[Work10Sandy] AS work_ten_sandy
		  ,[Work20Sandy] AS work_twenty_sandy
		  ,[Work40Sandy] AS work_forty_sandy
		  ,[Power10] AS power_ten
		  ,[Power20] AS power_twenty
		  ,[Power40] AS power_forty
	  INTO ##temp_measures_no_wgt
      FROM (
      SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
--Use measurable_order_all_workouts so that you only get the best measurable from every player.
		  ,measurable_order_all_with_reliabilty
		  ,code
		  ,value
      FROM ##temp_measurables_with_order WHERE code IN ('HgtCnv', 'ArmLngCnv', 'WSpanCnv', 'HSpanCnv', 'BroadJumpCnv', 'StrengthReps225', 'BenchWorkJoules', 'VertJumpCnv', 'TestScore', 'Acceleration10', 'Acceleration20', 'Acceleration40', 'ArmRadius', 'ExplosionIndex' ,'ExplosionLower', 'JumpBroadPowerSandy', 'JumpCombined', 'JumpVertPower', 'JumpVertPowerKubiak', 'JumpVertPowerSpags', 'LateralAgilityScore', 'LengthVertical', 'LengthVerticalWithJump', 'Momentum10', 'Momentum20', 'Momentum40', 'RatioArmToHeight', 'RatioWingToHeight', 'SpeedScoreAdjusted', 'SpeedScoreBarnwell', 'Velocity10', 'Velocity20', 'Velocity40', 'Work10Sandy', 'Work20Sandy', 'Work40Sandy', 'Power10', 'Power20', 'Power40')) up
     PIVOT (MAX(value) FOR code IN ([HgtCnv], [ArmLngCnv], [WSpanCnv], [HSpanCnv], [BroadJumpCnv], [StrengthReps225], [BenchWorkJoules], [VertJumpCnv], [TestScore], [Acceleration10], [Acceleration20], [Acceleration40], [ArmRadius], [ExplosionIndex] ,[ExplosionLower], [JumpBroadPowerSandy], [JumpCombined], [JumpVertPower], [JumpVertPowerKubiak], [JumpVertPowerSpags], [LateralAgilityScore], [LengthVertical], [LengthVerticalWithJump], [Momentum10], [Momentum20], [Momentum40], [RatioArmToHeight], [RatioWingToHeight], [SpeedScoreAdjusted], [SpeedScoreBarnwell], [Velocity10], [Velocity20], [Velocity40], [Work10Sandy], [Work20Sandy], [Work40Sandy], [Power10], [Power20], [Power40])) AS pvt
	 WHERE measurable_order_all_with_reliabilty=1
  ORDER BY player_id, workout_id

 --SELECT * FROM ##temp_measures_no_wgt


 -- Check if ##temp_measures_player_overall_best exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_player_overall_best') IS NOT NULL
	DROP TABLE ##temp_measures_player_overall_best

    SELECT nw.*
	      ,Value AS [weight]
	      ,CASE WHEN dbg.position != '' AND dbg.position IS NOT NULL THEN CASE WHEN dbg.position IN ('OB','RUSH','SAM','DP') THEN 'OB'
																	           WHEN dbg.position IN ('DS','FS','SS') THEN 'DS'
																			   ELSE UPPER(LTRIM(RTRIM(dbg.position)))
																		  END
		        ELSE CASE WHEN pos.abbreviation IN ('WR') THEN 'WO'
				          WHEN pos.abbreviation IN ('RB') THEN 'OH'
						  WHEN pos.abbreviation IN ('ROG','LOG','OL') THEN 'OG'
						  WHEN pos.abbreviation IN ('ROT','LOT') THEN 'OT'
						  WHEN pos.abbreviation IN ('MB','ILB','WB','LB','4-3 WILL') THEN 'IB'
						  WHEN pos.abbreviation IN ('ROLB','LOLB','OLB','SB','RUSH','4-3 DE','4-3 SAM','SAM') THEN 'OB'
						  WHEN pos.abbreviation IN ('NB','DB') THEN 'DC'
						  WHEN pos.abbreviation IN ('RDE','LDE') THEN 'DE'
						  WHEN pos.abbreviation IN ('NT','DL','NG') THEN 'DT'
						  WHEN pos.abbreviation IN ('SS','FS') THEN 'DS'
						  ELSE UPPER(LTRIM(RTRIM(pos.abbreviation)))
					 END
		   END AS position
	  INTO ##temp_measures_player_overall_best
	  FROM ##temp_measures_no_wgt nw
INNER JOIN ##temp_measurables_with_order wo
        ON nw.workout_id = wo.workout_id
	   AND wo.code='Wgt'
INNER JOIN [bane_production_analytics].[dbo].[players] pl
        ON nw.player_id = pl.id
 LEFT JOIN [bane_production_analytics].[dbo].[positions] pos
        ON pl.position_id = pos.id
 LEFT JOIN ##temp_draft_board_positions_with_order dbg
        ON nw.player_id = dbg.player_id
		AND dbg.draft_board_position_order = 1
  ORDER BY player_id, workout_id

 --SELECT * FROM ##temp_measures_player_overall_best


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the mean and standard deviations for each weight and position bucket.
For the weight buckets, they range from 3 to 7 pounds wide. The positions
are just bucekted by the position.  

Instead of just creating a 5 (or 3 or 7) pound bucket that each weight 
falls into, for every individual weight create a bucket that includes 
the 2 (or 1 or 3) pounds above and below.

OUTPUT TABLES:
##temp_measures_avg_stdev_weight
##temp_measures_avg_stdev_position


----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_avg_stdev_weight exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_avg_stdev_weight') IS NOT NULL
	DROP TABLE ##temp_measures_avg_stdev_weight

    SELECT DISTINCT r1.[weight]
-----------Bench Press Work
	      ,CASE WHEN r1.[weight] < 162 OR r1.[weight] > 343 THEN NULL
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 163) OR (r1.[weight] >= 341 AND r1.[weight] <= 343) THEN (SELECT AVG(bench_work_joules) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 164 AND r1.[weight] <= 165) OR (r1.[weight] >= 338 AND r1.[weight] <= 340) THEN (SELECT AVG(bench_work_joules) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(bench_work_joules) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS bench_work_joules_mean
	      ,CASE WHEN r1.[weight] < 162 OR r1.[weight] > 343 THEN NULL
		        WHEN (r1.[weight] >= 162 AND r1.[weight] <= 163) OR (r1.[weight] >= 341 AND r1.[weight] <= 343) THEN (SELECT STDEVP(bench_work_joules) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 164 AND r1.[weight] <= 165) OR (r1.[weight] >= 338 AND r1.[weight] <= 340) THEN (SELECT STDEVP(bench_work_joules) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(bench_work_joules) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS bench_work_joules_stdev
-----------Broad Jump
	      ,CASE WHEN r1.[weight] < 156 OR r1.[weight] > 346 THEN NULL
		        WHEN (r1.[weight] >= 156 AND r1.[weight] <= 157) OR (r1.[weight] >= 342 AND r1.[weight] <= 346) THEN (SELECT AVG(jump_broad) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 158 AND r1.[weight] <= 163) OR (r1.[weight] >= 339 AND r1.[weight] <= 341) THEN (SELECT AVG(jump_broad) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(jump_broad) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS jump_broad_mean
	      ,CASE WHEN r1.[weight] < 156 OR r1.[weight] > 346 THEN NULL
		        WHEN (r1.[weight] >= 156 AND r1.[weight] <= 157) OR (r1.[weight] >= 342 AND r1.[weight] <= 346) THEN (SELECT STDEVP(jump_broad) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 158 AND r1.[weight] <= 163) OR (r1.[weight] >= 339 AND r1.[weight] <= 341) THEN (SELECT STDEVP(jump_broad) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(jump_broad) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS jump_broad_stdev
-----------Vertical Jump
	      ,CASE WHEN r1.[weight] < 157 OR r1.[weight] > 346 THEN NULL
		        WHEN (r1.[weight] IN (157)) OR (r1.[weight] >= 342 AND r1.[weight] <= 346) THEN (SELECT AVG(jump_vertical) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 158 AND r1.[weight] <= 163) OR (r1.[weight] >= 340 AND r1.[weight] <= 341) THEN (SELECT AVG(jump_vertical) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT AVG(jump_vertical) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS jump_vertical_mean
	      ,CASE WHEN r1.[weight] < 157 OR r1.[weight] > 346 THEN NULL
		        WHEN (r1.[weight] IN (157)) OR (r1.[weight] >= 342 AND r1.[weight] <= 346) THEN (SELECT STDEVP(jump_vertical) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3)
		        WHEN (r1.[weight] >= 158 AND r1.[weight] <= 163) OR (r1.[weight] >= 340 AND r1.[weight] <= 341) THEN (SELECT STDEVP(jump_vertical) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2)
		        ELSE (SELECT STDEVP(jump_vertical) FROM ##temp_measures_player_overall_best r2 WHERE r1.[weight] >= r2.[weight] - 1 AND r1.[weight] <= r2.[weight] + 1) 
		   END AS jump_vertical_stdev
	  INTO ##temp_measures_avg_stdev_weight
      FROM ##temp_measures_player_overall_best r1
	 WHERE r1.[weight] >= 140
	   AND r1.[weight] <= 400
  ORDER BY r1.[weight]

--SELECT * FROM ##temp_measures_avg_stdev_weight


-- Check if ##temp_measures_avg_stdev_position exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_avg_stdev_position') IS NOT NULL
	DROP TABLE ##temp_measures_avg_stdev_position

    SELECT position
	      ,AVG(height) AS height_mean
	      ,STDEVP(height) AS height_stdev
	      ,AVG(CASE WHEN workout_type_for_models = 1 THEN NULL ELSE [weight] END) AS weight_mean
	      ,STDEVP(CASE WHEN workout_type_for_models = 1 THEN NULL ELSE [weight] END) AS weight_stdev
	      ,AVG(arm_length) AS arm_length_mean
	      ,STDEVP(arm_length) AS arm_length_stdev
	      ,AVG(hand_size) AS hand_size_mean
	      ,STDEVP(hand_size) AS hand_size_stdev
	      ,AVG(wingspan) AS wingspan_mean
	      ,STDEVP(wingspan) AS wingspan_stdev
	      ,AVG(test_score) AS test_score_mean
	      ,STDEVP(test_score) AS test_score_stdev
	  INTO ##temp_measures_avg_stdev_position
      FROM ##temp_measures_player_overall_best 
	 WHERE position != 'KOR'
  GROUP BY position
  ORDER BY position

--SELECT * FROM ##temp_measures_avg_stdev_position



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Non-Run Measurables Table. Some are bucketed by position
(hand size), some are bucketed by more than one position (weight)
so that you can easily move a player back and forth between positions
(in case you have a safety and you want to project him as a LB), 
others are bucketed by other factors.

You join in weight in a second step for the same reason as 
the above sections that pivot workout data similarly.

OUTPUT TABLES:
##temp_measures_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_master_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_master_no_wgt') IS NOT NULL
	DROP TABLE ##temp_measures_master_no_wgt

    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
	      ,[HgtCnv] AS height
	      ,[ArmLngCnv] AS arm_length
	      ,[WSpanCnv] AS wingspan
		  ,[HSpanCnv] AS hand_size
		  ,[BroadJumpCnv] AS jump_broad
		  ,[StrengthReps225] AS bench_reps
		  ,[BenchWorkJoules] AS bench_work_joules
		  ,[VertJumpCnv] AS jump_vertical
		  ,[TestScore] AS test_score
		  ,[Acceleration10] AS acceleration_ten
		  ,[Acceleration20] AS acceleration_twenty
		  ,[Acceleration40] AS acceleration_forty
		  ,[ArmRadius] AS arm_radius
		  ,[ExplosionIndex] AS explosion_index
		  ,[ExplosionLower] AS explosion_lower
		  ,[JumpBroadPowerSandy] AS jump_broad_power_sandy
		  ,[JumpCombined] AS jump_combined
		  ,[JumpVertPower] AS jump_vertical_power
		  ,[JumpVertPowerKubiak] AS jump_vertical_power_kubiak
		  ,[JumpVertPowerSpags] AS jump_vertical_power_spags
		  ,[LateralAgilityScore] AS lateral_agility_score
		  ,[LengthVertical] AS length_vertical
		  ,[LengthVerticalWithJump] AS length_vertical_with_jump
		  ,[Momentum10] AS momentum_ten
		  ,[Momentum20] AS momentum_twenty
		  ,[Momentum40] AS momentum_forty
		  ,[RatioArmToHeight] AS ratio_arm_to_height
		  ,[RatioWingToHeight] AS ratio_wing_to_height
		  ,[SpeedScoreAdjusted] AS speed_score_adjusted
		  ,[SpeedScoreBarnwell] AS speed_score_barnwell
		  ,[Velocity10] AS velocity_ten
		  ,[Velocity20] AS velocity_twenty
		  ,[Velocity40] AS velocity_forty
		  ,[Work10Sandy] AS work_ten_sandy
		  ,[Work20Sandy] AS work_twenty_sandy
		  ,[Work40Sandy] AS work_forty_sandy
		  ,[Power10] AS power_ten
		  ,[Power20] AS power_twenty
		  ,[Power40] AS power_forty
	  INTO ##temp_measures_master_no_wgt
      FROM (
      SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
		  ,measurable_order_by_model_type
		  ,code
		  ,value
      FROM ##temp_measurables_with_order WHERE code IN ('HgtCnv', 'ArmLngCnv', 'WSpanCnv', 'HSpanCnv', 'BroadJumpCnv', 'StrengthReps225', 'BenchWorkJoules', 'VertJumpCnv', 'TestScore', 'Acceleration10', 'Acceleration20', 'Acceleration40', 'ArmRadius', 'ExplosionIndex' ,'ExplosionLower', 'JumpBroadPowerSandy', 'JumpCombined', 'JumpVertPower', 'JumpVertPowerKubiak', 'JumpVertPowerSpags', 'LateralAgilityScore', 'LengthVertical', 'LengthVerticalWithJump', 'Momentum10', 'Momentum20', 'Momentum40', 'RatioArmToHeight', 'RatioWingToHeight', 'SpeedScoreAdjusted', 'SpeedScoreBarnwell', 'Velocity10', 'Velocity20', 'Velocity40', 'Work10Sandy', 'Work20Sandy', 'Work40Sandy', 'Power10', 'Power20', 'Power40')) up
     PIVOT (MAX(value) FOR code IN ([HgtCnv], [ArmLngCnv], [WSpanCnv], [HSpanCnv], [BroadJumpCnv], [StrengthReps225], [BenchWorkJoules], [VertJumpCnv], [TestScore], [Acceleration10], [Acceleration20], [Acceleration40], [ArmRadius], [ExplosionIndex] ,[ExplosionLower], [JumpBroadPowerSandy], [JumpCombined], [JumpVertPower], [JumpVertPowerKubiak], [JumpVertPowerSpags], [LateralAgilityScore], [LengthVertical], [LengthVerticalWithJump], [Momentum10], [Momentum20], [Momentum40], [RatioArmToHeight], [RatioWingToHeight], [SpeedScoreAdjusted], [SpeedScoreBarnwell], [Velocity10], [Velocity20], [Velocity40], [Work10Sandy], [Work20Sandy], [Work40Sandy], [Power10], [Power20], [Power40])) AS pvt
	 WHERE measurable_order_by_model_type=1
  ORDER BY player_id, workout_id
  
 --SELECT * FROM ##temp_measures_master_no_wgt


  -- Check if ##temp_measures_master exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_master') IS NOT NULL
	DROP TABLE ##temp_measures_master

    SELECT nw.*
	      ,Value AS [weight]
	      ,CASE WHEN dbg.position != '' AND dbg.position IS NOT NULL THEN CASE WHEN dbg.position IN ('OB','RUSH','SAM','DP') THEN 'OB'
																	           WHEN dbg.position IN ('DS','FS','SS') THEN 'DS'
																			   ELSE UPPER(LTRIM(RTRIM(dbg.position)))
																		  END
		        ELSE CASE WHEN pos.abbreviation IN ('WR') THEN 'WO'
				          WHEN pos.abbreviation IN ('RB') THEN 'OH'
						  WHEN pos.abbreviation IN ('ROG','LOG','OL') THEN 'OG'
						  WHEN pos.abbreviation IN ('ROT','LOT') THEN 'OT'
						  WHEN pos.abbreviation IN ('MB','ILB','WB','LB','4-3 WILL') THEN 'IB'
						  WHEN pos.abbreviation IN ('ROLB','LOLB','OLB','SB','RUSH','4-3 DE','4-3 SAM','SAM') THEN 'OB'
						  WHEN pos.abbreviation IN ('NB','DB') THEN 'DC'
						  WHEN pos.abbreviation IN ('RDE','LDE') THEN 'DE'
						  WHEN pos.abbreviation IN ('NT','DL','NG') THEN 'DT'
						  WHEN pos.abbreviation IN ('SS','FS') THEN 'DS'
						  ELSE UPPER(LTRIM(RTRIM(pos.abbreviation)))
					 END
		   END AS position
	  INTO ##temp_measures_master
	  FROM ##temp_measures_master_no_wgt nw
INNER JOIN ##temp_measurables_with_order wo
        ON nw.workout_id = wo.workout_id
	   AND wo.code='Wgt'
INNER JOIN [bane_production_analytics].[dbo].[players] pl
        ON nw.player_id = pl.id
 LEFT JOIN [bane_production_analytics].[dbo].[positions] pos
        ON pl.position_id = pos.id
 LEFT JOIN ##temp_draft_board_positions_with_order dbg
        ON nw.player_id = dbg.player_id
		AND dbg.draft_board_position_order = 1
  ORDER BY player_id, workout_id

 --SELECT * FROM ##temp_measures_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the table with each player's measure z scores.  

OUTPUT TABLES:
##temp_meaures_with_z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_meaures_with_z exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_meaures_with_z') IS NOT NULL
	DROP TABLE ##temp_meaures_with_z

    SELECT ma.*
		  ,(height - height_mean) / height_stdev AS height_z_score
		  ,(ma.[weight] - weight_mean) / weight_stdev AS weight_z_score
		  ,(arm_length - arm_length_mean) / arm_length_stdev AS arm_length_z_score
		  ,(wingspan - wingspan_mean) / wingspan_stdev AS wingspan_z_score
		  ,(hand_size - hand_size_mean) / hand_size_stdev AS hand_size_z_score
		  ,(jump_broad - jump_broad_mean) / jump_broad_stdev AS jump_broad_z_score
		  ,(bench_work_joules - bench_work_joules_mean) / bench_work_joules_stdev AS bench_work_joules_z_score
		  ,(jump_vertical - jump_vertical_mean) / jump_vertical_stdev AS jump_vertical_z_score
		  ,(test_score - test_score_mean) / test_score_stdev AS test_score_z_score
	  INTO ##temp_meaures_with_z
	  FROM ##temp_measures_master ma
 LEFT JOIN ##temp_measures_avg_stdev_weight wt
        ON ma.[weight] = wt.[weight]
 LEFT JOIN ##temp_measures_avg_stdev_position pos
        ON ma.position = pos.position

--SELECT * FROM ##temp_meaures_with_z


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the table with each player's best measure z scores for every
workout_type_for_models variable. This gives you more flexilibity
with which "best" to use.

OUTPUT TABLES:
##temp_measures_best_z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_best_z exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_best_z') IS NOT NULL
	DROP TABLE ##temp_measures_best_z

    SELECT player_id
		  ,workout_type_for_models
		  ,MAX(height) AS height_best
		  ,MAX(height_z_score) AS height_z_score_best
	      ,MAX([weight]) AS weight_best
		  ,MAX(weight_z_score) AS weight_z_score_best
	      ,MAX(arm_length) AS arm_length_best
		  ,MAX(arm_length_z_score) AS arm_length_z_score_best
	      ,MAX(wingspan) AS wingspan_best
		  ,MAX(wingspan_z_score) AS wingspan_z_score_best
	      ,MAX(hand_size) AS hand_size_best
		  ,MAX(hand_size_z_score) AS hand_size_z_score_best
	      ,MAX(jump_broad) AS jump_broad_best
		  ,MAX(jump_broad_z_score) AS jump_broad_z_score_best
	      ,MAX(bench_work_joules) AS bench_work_joules_best
		  ,MAX(bench_work_joules_z_score) AS bench_work_joules_z_score_best
		  ,MAX(jump_vertical) AS jump_vertical_best
		  ,MAX(jump_vertical_z_score) AS jump_vertical_z_score_best
		  ,MAX(test_score) AS test_score_best
		  ,MAX(test_score_z_score) AS test_score_z_score_best
		  ,MAX(acceleration_ten) AS acceleration_ten_best
		  ,MAX(acceleration_twenty) AS acceleration_twenty_best
		  ,MAX(acceleration_forty) AS acceleration_forty_best
		  ,MAX(arm_radius) AS arm_radius_best
		  ,MAX(bench_reps) AS bench_reps_best
		  ,MAX(explosion_index) AS explosion_index_best
		  ,MAX(explosion_lower) AS explosion_lower_best
		  ,MAX(jump_broad_power_sandy) AS jump_broad_power_sandy_best
		  ,MAX(jump_combined) AS jump_combined_best
		  ,MAX(jump_vertical_power) AS jump_vertical_power_best
		  ,MAX(jump_vertical_power_kubiak) AS jump_vertical_power_kubiak_best
		  ,MAX(jump_vertical_power_spags) AS jump_vertical_power_spags_best
		  ,MAX(lateral_agility_score) AS lateral_agility_score_best
		  ,MAX(length_vertical) AS length_vertical_best
		  ,MAX(length_vertical_with_jump) AS length_vertical_with_jump_best
		  ,MAX(momentum_ten) AS momentum_ten_best
		  ,MAX(momentum_twenty) AS momentum_twenty_best
		  ,MAX(momentum_forty) AS momentum_forty_best
		  ,MAX(ratio_arm_to_height) AS ratio_arm_to_height_best
		  ,MAX(ratio_wing_to_height) AS ratio_wing_to_height_best
		  ,MAX(speed_score_adjusted) AS speed_score_adjusted_best
		  ,MAX(speed_score_barnwell) AS speed_score_barnwell_best
		  ,MAX(velocity_ten) AS velocity_ten_best
		  ,MAX(velocity_twenty) AS velocity_twenty_best
		  ,MAX(velocity_forty) AS velocity_forty_best
		  ,MAX(work_ten_sandy) AS work_ten_sandy_best
		  ,MAX(work_twenty_sandy) AS work_twenty_sandy_best
		  ,MAX(work_forty_sandy) AS work_forty_sandy_best
		  ,MAX(power_ten) AS power_ten_best
		  ,MAX(power_twenty) AS power_twenty_best
		  ,MAX(power_forty) AS power_forty_best
	  INTO ##temp_measures_best_z
	  FROM ##temp_meaures_with_z
  GROUP BY player_id, workout_type_for_models
  ORDER BY player_id, workout_type_for_models

--SELECT * FROM ##temp_runs_best_z


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Unpivot the best measures.

OUTPUT TABLES:
##temp_measures_best_unpivot
##temp_measures_best_z_unpivot

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_best_unpivot exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_measures_best_unpivot') IS NOT NULL
		DROP TABLE ##temp_measures_best_unpivot

	SELECT player_id
		  ,workout_type_for_models
		  ,me.code
		  ,me.value
	  INTO ##temp_measures_best_unpivot
      FROM ##temp_measures_best_z
   UNPIVOT (value FOR code IN (height_best
							  ,weight_best
							  ,arm_length_best
							  ,wingspan_best
							  ,hand_size_best
							  ,jump_broad_best
							  ,bench_work_joules_best
							  ,jump_vertical_best
							  ,test_score_best
							  ,acceleration_ten_best
							  ,acceleration_twenty_best
							  ,acceleration_forty_best
							  ,arm_radius_best
							  ,bench_reps_best
							  ,explosion_index_best
							  ,explosion_lower_best
							  ,jump_broad_power_sandy_best
							  ,jump_combined_best
							  ,jump_vertical_power_best
							  ,jump_vertical_power_kubiak_best
							  ,jump_vertical_power_spags_best
							  ,lateral_agility_score_best
							  ,length_vertical_best
							  ,length_vertical_with_jump_best
							  ,momentum_ten_best
							  ,momentum_twenty_best
							  ,momentum_forty_best
							  ,ratio_arm_to_height_best
							  ,ratio_wing_to_height_best
							  ,speed_score_adjusted_best
							  ,speed_score_barnwell_best
							  ,velocity_ten_best
							  ,velocity_twenty_best
							  ,velocity_forty_best
							  ,work_ten_sandy_best
							  ,work_twenty_sandy_best
							  ,work_forty_sandy_best
							  ,power_ten_best
							  ,power_twenty_best
							  ,power_forty_best
							   )) AS me


-- Check if ##temp_measures_best_z_unpivot exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_measures_best_z_unpivot') IS NOT NULL
		DROP TABLE ##temp_measures_best_z_unpivot

	SELECT player_id
		  ,workout_type_for_models
		  ,me.code
		  ,me.value
	  INTO ##temp_measures_best_z_unpivot
      FROM ##temp_measures_best_z
   UNPIVOT (value FOR code IN (height_z_score_best
							  ,weight_z_score_best
							  ,arm_length_z_score_best
							  ,wingspan_z_score_best
							  ,hand_size_z_score_best
							  ,jump_broad_z_score_best
							  ,bench_work_joules_z_score_best
							  ,jump_vertical_z_score_best
							  ,test_score_z_score_best
							   )) AS me


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Unpivot the best runs.

OUTPUT TABLES:
##temp_runs_best_unpivot
##temp_runs_best_z_unpivot

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_best_unpivot exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_runs_best_unpivot') IS NOT NULL
		DROP TABLE ##temp_runs_best_unpivot

	SELECT player_id
		  ,workout_type_for_models
		  ,ru.code
		  ,ru.value
	  INTO ##temp_runs_best_unpivot
      FROM ##temp_runs_best_z
   UNPIVOT (value FOR code IN (dash_forty_best
							  ,dash_twenty_best
							  ,dash_ten_best
							  ,flying_twenty_best
							  ,flying_ten_best
							  ,shuttle_long_best
							  ,shuttle_short_best
							  ,three_cone_best
							  ,speed_score_cohen_best
							  ,body_mass_index_best
							   )) AS ru


-- Check if ##temp_runs_best_z_unpivot exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_runs_best_z_unpivot') IS NOT NULL
		DROP TABLE ##temp_runs_best_z_unpivot

	SELECT player_id
		  ,workout_type_for_models
		  ,ru.code
		  ,ru.value
	  INTO ##temp_runs_best_z_unpivot
      FROM ##temp_runs_best_z
   UNPIVOT (value FOR code IN (dash_forty_z_score_best
							  ,dash_twenty_z_score_best
							  ,dash_ten_z_score_best
							  ,flying_twenty_z_score_best
							  ,flying_ten_z_score_best
							  ,shuttle_long_z_score_best
							  ,shuttle_short_z_score_best
							  ,three_cone_z_score_best
							   )) AS ru


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Best Measurables Master Table.

This is a (somewhat) normalized tables similar in structure
to the original measurables table, but it only includes a
player's best value for each measurable for each workout_type_for_models.

OUTPUT TABLES:
##temp_advanced_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_advanced_measurables_master exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_advanced_measurables_master') IS NOT NULL
		DROP TABLE ##temp_advanced_measurables_master

	SELECT *
	  INTO ##temp_advanced_measurables_master
	  FROM ##temp_measures_best_unpivot

INSERT INTO ##temp_advanced_measurables_master
	SELECT *
	  FROM ##temp_measures_best_z_unpivot

INSERT INTO ##temp_advanced_measurables_master
	SELECT *
	  FROM ##temp_runs_best_unpivot

INSERT INTO ##temp_advanced_measurables_master
	SELECT *
	  FROM ##temp_runs_best_z_unpivot

--SELECT * FROM ##temp_advanced_measurables_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

If a player has combine measurables, use those.  If he does
not have combine measurables, use his pro day measurables
but include a dummy to represent that it comes from a pro day.

Order each measurable by workout_type_for_models so you can always
take where order is one. Also add the dummy variable here.

OUTPUT TABLES:
##temp_advanced_measurables_master_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_advanced_measurables_master_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_advanced_measurables_master_with_order') IS NOT NULL
	DROP TABLE ##temp_advanced_measurables_master_with_order

    SELECT *
		  ,RANK() OVER (PARTITION BY player_id, code ORDER BY workout_type_for_models) AS order_for_models
		  ,CASE WHEN workout_type_for_models IN (1,2) THEN 1 ELSE 0 END AS electronic
	  INTO ##temp_advanced_measurables_master_with_order
	  FROM ##temp_advanced_measurables_master

--SELECT * FROM ##temp_advanced_measurables_master_with_order


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the previous table so you can have one row for every
player with his best value in every measurable and advanced
field in one row, along with a dummy representing if it is 
electronic or not.

You do two pivots - one to get the value, one to get the
electronic variable.  Then join the two tables.

OUTPUT TABLES:
##temp_measurables_for_modeling

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measurables_for_modeling_values exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_for_modeling_values') IS NOT NULL
	DROP TABLE ##temp_measurables_for_modeling_values

    SELECT player_id
	      ,[acceleration_forty_best] AS acceleration_forty_best_value
	      ,[acceleration_ten_best] AS acceleration_ten_best_value
	      ,[acceleration_twenty_best] AS acceleration_twenty_best_value
	      ,[arm_length_best] AS arm_length_best_value
	      ,[arm_length_z_score_best] AS arm_length_z_score_best_value
	      ,[arm_radius_best] AS arm_radius_best_value
	      ,[bench_reps_best] AS bench_reps_best_value
	      ,[bench_work_joules_best] AS bench_work_joules_best_value
	      ,[bench_work_joules_z_score_best] AS bench_work_joules_z_score_best_value
	      ,[body_mass_index_best] AS body_mass_index_best_value
	      ,[dash_forty_best] AS dash_forty_best_value
	      ,[dash_forty_z_score_best] AS dash_forty_z_score_best_value
	      ,[dash_ten_best] AS dash_ten_best_value
	      ,[dash_ten_z_score_best] AS dash_ten_z_score_best_value
	      ,[dash_twenty_best] AS dash_twenty_best_value
	      ,[dash_twenty_z_score_best] AS dash_twenty_z_score_best_value
	      ,[explosion_index_best] AS explosion_index_best_value
	      ,[explosion_lower_best] AS explosion_lower_best_value
	      ,[flying_ten_best] AS flying_ten_best_value
	      ,[flying_ten_z_score_best] AS flying_ten_z_score_best_value
	      ,[flying_twenty_best] AS flying_twenty_best_value
	      ,[flying_twenty_z_score_best] AS flying_twenty_z_score_best_value
	      ,[hand_size_best] AS hand_size_best_value
	      ,[hand_size_z_score_best] AS hand_size_z_score_best_value
	      ,[height_best] AS height_best_value
	      ,[height_z_score_best] AS height_z_score_best_value
	      ,[jump_broad_best] AS jump_broad_best_value
	      ,[jump_broad_power_sandy_best] AS jump_broad_power_sandy_best_value
	      ,[jump_broad_z_score_best] AS jump_broad_z_score_best_value
	      ,[jump_combined_best] AS jump_combined_best_value
	      ,[jump_vertical_best] AS jump_vertical_best_value
	      ,[jump_vertical_power_best] AS jump_vertical_power_best_value
	      ,[jump_vertical_power_kubiak_best] AS jump_vertical_power_kubiak_best_value
	      ,[jump_vertical_power_spags_best] AS jump_vertical_power_spags_best_value
	      ,[jump_vertical_z_score_best] AS jump_vertical_z_score_best_value
		  ,[lateral_agility_score_best] AS lateral_agility_score_best_value
	      ,[length_vertical_best] AS length_vertical_best_value
	      ,[length_vertical_with_jump_best] AS length_vertical_with_jump_best_value
	      ,[momentum_forty_best] AS momentum_forty_best_value
	      ,[momentum_ten_best] AS momentum_ten_best_value
	      ,[momentum_twenty_best] AS momentum_twenty_best_value
	      ,[power_forty_best] AS power_forty_best_value
	      ,[power_ten_best] AS power_ten_best_value
	      ,[power_twenty_best] AS power_twenty_best_value
	      ,[ratio_arm_to_height_best] AS ratio_arm_to_height_best_value
	      ,[ratio_wing_to_height_best] AS ratio_wing_to_height_best_value
	      ,[shuttle_long_best] AS shuttle_long_best_value
	      ,[shuttle_long_z_score_best] AS shuttle_long_z_score_best_value
	      ,[shuttle_short_best] AS shuttle_short_best_value
	      ,[shuttle_short_z_score_best] AS shuttle_short_z_score_best_value
	      ,[speed_score_adjusted_best] AS speed_score_adjusted_best_value
	      ,[speed_score_barnwell_best] AS speed_score_barnwell_best_value
	      ,[speed_score_cohen_best] AS speed_score_cohen_best_value
	      ,[test_score_best] AS test_score_best_value
	      ,[test_score_z_score_best] AS test_score_z_score_best_value
	      ,[three_cone_best] AS three_cone_best_value
	      ,[three_cone_z_score_best] AS three_cone_z_score_best_value
	      ,[velocity_forty_best] AS velocity_forty_best_value
	      ,[velocity_ten_best] AS velocity_ten_best_value
	      ,[velocity_twenty_best] AS velocity_twenty_best_value
	      ,[weight_best] AS weight_best_value
	      ,[weight_z_score_best] AS weight_z_score_best_value
	      ,[wingspan_best] AS wingspan_best_value
	      ,[wingspan_z_score_best] AS wingspan_z_score_best_value
	      ,[work_forty_sandy_best] AS work_forty_sandy_best_value
	      ,[work_ten_sandy_best] AS work_ten_sandy_best_value
	      ,[work_twenty_sandy_best] AS work_twenty_sandy_best_value
	  INTO ##temp_measurables_for_modeling_values
      FROM (
      SELECT player_id
		  ,order_for_models
		  ,code
		  ,value
      FROM ##temp_advanced_measurables_master_with_order WHERE code IN ('acceleration_forty_best', 'acceleration_ten_best', 'acceleration_twenty_best', 'arm_length_best', 'arm_length_z_score_best', 'arm_radius_best', 'bench_reps_best', 'bench_work_joules_best', 'bench_work_joules_z_score_best', 'body_mass_index_best', 'dash_forty_best', 'dash_forty_z_score_best', 'dash_ten_best', 'dash_ten_z_score_best', 'dash_twenty_best', 'dash_twenty_z_score_best', 'explosion_index_best', 'explosion_lower_best', 'flying_ten_best', 'flying_ten_z_score_best', 'flying_twenty_best', 'flying_twenty_z_score_best', 'hand_size_best', 'hand_size_z_score_best', 'height_best', 'height_z_score_best', 'jump_broad_best', 'jump_broad_power_sandy_best', 'jump_broad_z_score_best', 'jump_combined_best', 'jump_vertical_best', 'jump_vertical_power_best', 'jump_vertical_power_kubiak_best', 'jump_vertical_power_spags_best', 'jump_vertical_z_score_best', 'lateral_agility_score_best', 'length_vertical_best', 'length_vertical_with_jump_best', 'momentum_forty_best', 'momentum_ten_best', 'momentum_twenty_best', 'power_forty_best', 'power_ten_best', 'power_twenty_best', 'ratio_arm_to_height_best', 'ratio_wing_to_height_best', 'shuttle_long_best', 'shuttle_long_z_score_best', 'shuttle_short_best', 'shuttle_short_z_score_best', 'speed_score_adjusted_best', 'speed_score_barnwell_best', 'speed_score_cohen_best', 'test_score_best', 'test_score_z_score_best', 'three_cone_best', 'three_cone_z_score_best', 'velocity_forty_best', 'velocity_ten_best', 'velocity_twenty_best', 'weight_best', 'weight_z_score_best', 'wingspan_best', 'wingspan_z_score_best', 'work_forty_sandy_best', 'work_ten_sandy_best', 'work_twenty_sandy_best')) up
     PIVOT (MAX(value) FOR code IN ([acceleration_forty_best], [acceleration_ten_best], [acceleration_twenty_best], [arm_length_best], [arm_length_z_score_best], [arm_radius_best], [bench_reps_best], [bench_work_joules_best], [bench_work_joules_z_score_best], [body_mass_index_best], [dash_forty_best], [dash_forty_z_score_best], [dash_ten_best], [dash_ten_z_score_best], [dash_twenty_best], [dash_twenty_z_score_best], [explosion_index_best], [explosion_lower_best], [flying_ten_best], [flying_ten_z_score_best], [flying_twenty_best], [flying_twenty_z_score_best], [hand_size_best], [hand_size_z_score_best], [height_best], [height_z_score_best], [jump_broad_best], [jump_broad_power_sandy_best], [jump_broad_z_score_best], [jump_combined_best], [jump_vertical_best], [jump_vertical_power_best], [jump_vertical_power_kubiak_best], [jump_vertical_power_spags_best], [jump_vertical_z_score_best], [lateral_agility_score_best], [length_vertical_best], [length_vertical_with_jump_best], [momentum_forty_best], [momentum_ten_best], [momentum_twenty_best], [power_forty_best], [power_ten_best], [power_twenty_best], [ratio_arm_to_height_best], [ratio_wing_to_height_best], [shuttle_long_best], [shuttle_long_z_score_best], [shuttle_short_best], [shuttle_short_z_score_best], [speed_score_adjusted_best], [speed_score_barnwell_best], [speed_score_cohen_best], [test_score_best], [test_score_z_score_best], [three_cone_best], [three_cone_z_score_best], [velocity_forty_best], [velocity_ten_best], [velocity_twenty_best], [weight_best], [weight_z_score_best], [wingspan_best], [wingspan_z_score_best], [work_forty_sandy_best], [work_ten_sandy_best], [work_twenty_sandy_best])) AS pvt
	 WHERE order_for_models = 1
  ORDER BY player_id

--SELECT * FROM ##temp_measurables_for_modeling_values


-- Check if ##temp_measurables_for_modeling_elec exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_for_modeling_elec') IS NOT NULL
	DROP TABLE ##temp_measurables_for_modeling_elec

    SELECT player_id
	      ,[acceleration_forty_best] AS acceleration_forty_best_electronic
	      ,[acceleration_ten_best] AS acceleration_ten_best_electronic
	      ,[acceleration_twenty_best] AS acceleration_twenty_best_electronic
	      ,[arm_length_best] AS arm_length_best_electronic
	      ,[arm_length_z_score_best] AS arm_length_z_score_best_electronic
	      ,[arm_radius_best] AS arm_radius_best_electronic
	      ,[bench_reps_best] AS bench_reps_best_electronic
	      ,[bench_work_joules_best] AS bench_work_joules_best_electronic
	      ,[bench_work_joules_z_score_best] AS bench_work_joules_z_score_best_electronic
	      ,[body_mass_index_best] AS body_mass_index_best_electronic
	      ,[dash_forty_best] AS dash_forty_best_electronic
	      ,[dash_forty_z_score_best] AS dash_forty_z_score_best_electronic
	      ,[dash_ten_best] AS dash_ten_best_electronic
	      ,[dash_ten_z_score_best] AS dash_ten_z_score_best_electronic
	      ,[dash_twenty_best] AS dash_twenty_best_electronic
	      ,[dash_twenty_z_score_best] AS dash_twenty_z_score_best_electronic
	      ,[explosion_index_best] AS explosion_index_best_electronic
	      ,[explosion_lower_best] AS explosion_lower_best_electronic
	      ,[flying_ten_best] AS flying_ten_best_electronic
	      ,[flying_ten_z_score_best] AS flying_ten_z_score_best_electronic
	      ,[flying_twenty_best] AS flying_twenty_best_electronic
	      ,[flying_twenty_z_score_best] AS flying_twenty_z_score_best_electronic
	      ,[hand_size_best] AS hand_size_best_electronic
	      ,[hand_size_z_score_best] AS hand_size_z_score_best_electronic
	      ,[height_best] AS height_best_electronic
	      ,[height_z_score_best] AS height_z_score_best_electronic
	      ,[jump_broad_best] AS jump_broad_best_electronic
	      ,[jump_broad_power_sandy_best] AS jump_broad_power_sandy_best_electronic
	      ,[jump_broad_z_score_best] AS jump_broad_z_score_best_electronic
	      ,[jump_combined_best] AS jump_combined_best_electronic
	      ,[jump_vertical_best] AS jump_vertical_best_electronic
	      ,[jump_vertical_power_best] AS jump_vertical_power_best_electronic
	      ,[jump_vertical_power_kubiak_best] AS jump_vertical_power_kubiak_best_electronic
	      ,[jump_vertical_power_spags_best] AS jump_vertical_power_spags_best_electronic
	      ,[jump_vertical_z_score_best] AS jump_vertical_z_score_best_electronic
		  ,[lateral_agility_score_best] AS lateral_agility_score_best_electronic
	      ,[length_vertical_best] AS length_vertical_best_electronic
	      ,[length_vertical_with_jump_best] AS length_vertical_with_jump_best_electronic
	      ,[momentum_forty_best] AS momentum_forty_best_electronic
	      ,[momentum_ten_best] AS momentum_ten_best_electronic
	      ,[momentum_twenty_best] AS momentum_twenty_best_electronic
	      ,[power_forty_best] AS power_forty_best_electronic
	      ,[power_ten_best] AS power_ten_best_electronic
	      ,[power_twenty_best] AS power_twenty_best_electronic
	      ,[ratio_arm_to_height_best] AS ratio_arm_to_height_best_electronic
	      ,[ratio_wing_to_height_best] AS ratio_wing_to_height_best_electronic
	      ,[shuttle_long_best] AS shuttle_long_best_electronic
	      ,[shuttle_long_z_score_best] AS shuttle_long_z_score_best_electronic
	      ,[shuttle_short_best] AS shuttle_short_best_electronic
	      ,[shuttle_short_z_score_best] AS shuttle_short_z_score_best_electronic
	      ,[speed_score_adjusted_best] AS speed_score_adjusted_best_electronic
	      ,[speed_score_barnwell_best] AS speed_score_barnwell_best_electronic
	      ,[speed_score_cohen_best] AS speed_score_cohen_best_electronic
	      ,[test_score_best] AS test_score_best_electronic
	      ,[test_score_z_score_best] AS test_score_z_score_best_electronic
	      ,[three_cone_best] AS three_cone_best_electronic
	      ,[three_cone_z_score_best] AS three_cone_z_score_best_electronic
	      ,[velocity_forty_best] AS velocity_forty_best_electronic
	      ,[velocity_ten_best] AS velocity_ten_best_electronic
	      ,[velocity_twenty_best] AS velocity_twenty_best_electronic
	      ,[weight_best] AS weight_best_electronic
	      ,[weight_z_score_best] AS weight_z_score_best_electronic
	      ,[wingspan_best] AS wingspan_best_electronic
	      ,[wingspan_z_score_best] AS wingspan_z_score_best_electronic
	      ,[work_forty_sandy_best] AS work_forty_sandy_best_electronic
	      ,[work_ten_sandy_best] AS work_ten_sandy_best_electronic
	      ,[work_twenty_sandy_best] AS work_twenty_sandy_best_electronic
	  INTO ##temp_measurables_for_modeling_elec
      FROM (
      SELECT player_id
		  ,order_for_models
		  ,code
		  ,electronic
      FROM ##temp_advanced_measurables_master_with_order WHERE code IN ('acceleration_forty_best', 'acceleration_ten_best', 'acceleration_twenty_best', 'arm_length_best', 'arm_length_z_score_best', 'arm_radius_best', 'bench_reps_best', 'bench_work_joules_best', 'bench_work_joules_z_score_best', 'body_mass_index_best', 'dash_forty_best', 'dash_forty_z_score_best', 'dash_ten_best', 'dash_ten_z_score_best', 'dash_twenty_best', 'dash_twenty_z_score_best', 'explosion_index_best', 'explosion_lower_best', 'flying_ten_best', 'flying_ten_z_score_best', 'flying_twenty_best', 'flying_twenty_z_score_best', 'hand_size_best', 'hand_size_z_score_best', 'height_best', 'height_z_score_best', 'jump_broad_best', 'jump_broad_power_sandy_best', 'jump_broad_z_score_best', 'jump_combined_best', 'jump_vertical_best', 'jump_vertical_power_best', 'jump_vertical_power_kubiak_best', 'jump_vertical_power_spags_best', 'jump_vertical_z_score_best', 'lateral_agility_score_best', 'length_vertical_best', 'length_vertical_with_jump_best', 'momentum_forty_best', 'momentum_ten_best', 'momentum_twenty_best', 'power_forty_best', 'power_ten_best', 'power_twenty_best', 'ratio_arm_to_height_best', 'ratio_wing_to_height_best', 'shuttle_long_best', 'shuttle_long_z_score_best', 'shuttle_short_best', 'shuttle_short_z_score_best', 'speed_score_adjusted_best', 'speed_score_barnwell_best', 'speed_score_cohen_best', 'test_score_best', 'test_score_z_score_best', 'three_cone_best', 'three_cone_z_score_best', 'velocity_forty_best', 'velocity_ten_best', 'velocity_twenty_best', 'weight_best', 'weight_z_score_best', 'wingspan_best', 'wingspan_z_score_best', 'work_forty_sandy_best', 'work_ten_sandy_best', 'work_twenty_sandy_best')) up
     PIVOT (MAX(electronic) FOR code IN ([acceleration_forty_best], [acceleration_ten_best], [acceleration_twenty_best], [arm_length_best], [arm_length_z_score_best], [arm_radius_best], [bench_reps_best], [bench_work_joules_best], [bench_work_joules_z_score_best], [body_mass_index_best], [dash_forty_best], [dash_forty_z_score_best], [dash_ten_best], [dash_ten_z_score_best], [dash_twenty_best], [dash_twenty_z_score_best], [explosion_index_best], [explosion_lower_best], [flying_ten_best], [flying_ten_z_score_best], [flying_twenty_best], [flying_twenty_z_score_best], [hand_size_best], [hand_size_z_score_best], [height_best], [height_z_score_best], [jump_broad_best], [jump_broad_power_sandy_best], [jump_broad_z_score_best], [jump_combined_best], [jump_vertical_best], [jump_vertical_power_best], [jump_vertical_power_kubiak_best], [jump_vertical_power_spags_best], [jump_vertical_z_score_best], [lateral_agility_score_best], [length_vertical_best], [length_vertical_with_jump_best], [momentum_forty_best], [momentum_ten_best], [momentum_twenty_best], [power_forty_best], [power_ten_best], [power_twenty_best], [ratio_arm_to_height_best], [ratio_wing_to_height_best], [shuttle_long_best], [shuttle_long_z_score_best], [shuttle_short_best], [shuttle_short_z_score_best], [speed_score_adjusted_best], [speed_score_barnwell_best], [speed_score_cohen_best], [test_score_best], [test_score_z_score_best], [three_cone_best], [three_cone_z_score_best], [velocity_forty_best], [velocity_ten_best], [velocity_twenty_best], [weight_best], [weight_z_score_best], [wingspan_best], [wingspan_z_score_best], [work_forty_sandy_best], [work_ten_sandy_best], [work_twenty_sandy_best])) AS pvt
	 WHERE order_for_models = 1
  ORDER BY player_id

--SELECT * FROM ##temp_measurables_for_modeling_elec

-- Check if ##temp_measurables_for_modeling exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_for_modeling') IS NOT NULL
	DROP TABLE ##temp_measurables_for_modeling

    SELECT va.player_id
          ,acceleration_forty_best_electronic
          ,acceleration_forty_best_value
          ,acceleration_ten_best_electronic
          ,acceleration_ten_best_value
          ,acceleration_twenty_best_electronic
          ,acceleration_twenty_best_value
          ,arm_length_best_electronic
          ,arm_length_best_value
          ,arm_length_z_score_best_electronic
          ,arm_length_z_score_best_value
          ,arm_radius_best_electronic
          ,arm_radius_best_value
          ,bench_reps_best_electronic
          ,bench_reps_best_value
          ,bench_work_joules_best_electronic
          ,bench_work_joules_best_value
          ,bench_work_joules_z_score_best_electronic
          ,bench_work_joules_z_score_best_value
          ,body_mass_index_best_electronic
          ,body_mass_index_best_value
          ,dash_forty_best_electronic
          ,dash_forty_best_value
          ,dash_forty_z_score_best_electronic
          ,dash_forty_z_score_best_value
          ,dash_ten_best_electronic
          ,dash_ten_best_value
          ,dash_ten_z_score_best_electronic
          ,dash_ten_z_score_best_value
          ,dash_twenty_best_electronic
          ,dash_twenty_best_value
          ,dash_twenty_z_score_best_electronic
          ,dash_twenty_z_score_best_value
          ,explosion_index_best_electronic
          ,explosion_index_best_value
          ,explosion_lower_best_electronic
          ,explosion_lower_best_value
          ,flying_ten_best_electronic
          ,flying_ten_best_value
          ,flying_ten_z_score_best_electronic
          ,flying_ten_z_score_best_value
          ,flying_twenty_best_electronic
          ,flying_twenty_best_value
          ,flying_twenty_z_score_best_electronic
          ,flying_twenty_z_score_best_value
          ,hand_size_best_electronic
          ,hand_size_best_value
          ,hand_size_z_score_best_electronic
          ,hand_size_z_score_best_value
          ,height_best_electronic
          ,height_best_value
          ,height_z_score_best_electronic
          ,height_z_score_best_value
          ,jump_broad_best_electronic
          ,jump_broad_best_value
          ,jump_broad_power_sandy_best_electronic
          ,jump_broad_power_sandy_best_value
          ,jump_broad_z_score_best_electronic
          ,jump_broad_z_score_best_value
          ,jump_combined_best_electronic
          ,jump_combined_best_value
          ,jump_vertical_best_electronic
          ,jump_vertical_best_value
          ,jump_vertical_power_best_electronic
          ,jump_vertical_power_best_value
          ,jump_vertical_power_kubiak_best_electronic
          ,jump_vertical_power_kubiak_best_value
          ,jump_vertical_power_spags_best_electronic
          ,jump_vertical_power_spags_best_value
          ,jump_vertical_z_score_best_electronic
          ,jump_vertical_z_score_best_value
		  ,lateral_agility_score_best_electronic
		  ,lateral_agility_score_best_value
          ,length_vertical_best_electronic
          ,length_vertical_best_value
          ,length_vertical_with_jump_best_electronic
          ,length_vertical_with_jump_best_value
          ,momentum_forty_best_electronic
          ,momentum_forty_best_value
          ,momentum_ten_best_electronic
          ,momentum_ten_best_value
          ,momentum_twenty_best_electronic
          ,momentum_twenty_best_value
          ,power_forty_best_electronic
          ,power_forty_best_value
          ,power_ten_best_electronic
          ,power_ten_best_value
          ,power_twenty_best_electronic
          ,power_twenty_best_value
          ,ratio_arm_to_height_best_electronic
          ,ratio_arm_to_height_best_value
          ,ratio_wing_to_height_best_electronic
          ,ratio_wing_to_height_best_value
          ,shuttle_long_best_electronic
          ,shuttle_long_best_value
          ,shuttle_long_z_score_best_electronic
          ,shuttle_long_z_score_best_value
          ,shuttle_short_best_electronic
          ,shuttle_short_best_value
          ,shuttle_short_z_score_best_electronic
          ,shuttle_short_z_score_best_value
          ,speed_score_adjusted_best_electronic
          ,speed_score_adjusted_best_value
          ,speed_score_barnwell_best_electronic
          ,speed_score_barnwell_best_value
          ,speed_score_cohen_best_electronic
          ,speed_score_cohen_best_value
          ,test_score_best_electronic
          ,test_score_best_value
          ,test_score_z_score_best_electronic
          ,test_score_z_score_best_value
          ,three_cone_best_electronic
          ,three_cone_best_value
          ,three_cone_z_score_best_electronic
          ,three_cone_z_score_best_value
          ,velocity_forty_best_electronic
          ,velocity_forty_best_value
          ,velocity_ten_best_electronic
          ,velocity_ten_best_value
          ,velocity_twenty_best_electronic
          ,velocity_twenty_best_value
          ,weight_best_electronic
          ,weight_best_value
          ,weight_z_score_best_electronic
          ,weight_z_score_best_value
          ,wingspan_best_electronic
          ,wingspan_best_value
          ,wingspan_z_score_best_electronic
          ,wingspan_z_score_best_value
          ,work_forty_sandy_best_electronic
          ,work_forty_sandy_best_value
          ,work_ten_sandy_best_electronic
          ,work_ten_sandy_best_value
          ,work_twenty_sandy_best_electronic
          ,work_twenty_sandy_best_value
	  INTO ##temp_measurables_for_modeling
	  FROM ##temp_measurables_for_modeling_values va
INNER JOIN ##temp_measurables_for_modeling_elec el
        ON va.player_id = el.player_id
  ORDER BY va.player_id

--SELECT * FROM ##temp_measurables_for_modeling


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get a player season grade for each of a player's first
four seasons.  If a player played in all four seasons, 
he will have four records in the table.

Tier system for season grades:
1) Ability For Ravens / Quarterly
2) Advance
3) Grade Fit - model generated pro grade

The first step is getting all the grades into a master grade table.

The reason we join player information to both the scout and model
tables separately is because the model table uses nfl_id while the
scout table uses the Bane player_id.

OUTPUT TABLES:
##temp_pro_grades_scout

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_scout exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_scout') IS NOT NULL
	DROP TABLE ##temp_pro_grades_scout

    SELECT re.id AS report_id
	      ,author_id AS scout_id
		  ,CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 16) THEN YEAR(re.created_at)-1 
		        ELSE YEAR(re.created_at) END AS report_season
		  ,CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 16) THEN (YEAR(re.created_at)-1) - nfl_entry_year + 1
		        ELSE (YEAR(re.created_at)) - nfl_entry_year + 1 END AS player_season_in_league
		  ,CASE WHEN UPPER(LTRIM(RTRIM(re.[type]))) IN ('ABILITY FOR RAVENS','QUARTERLY') THEN 1
		        WHEN UPPER(LTRIM(RTRIM(re.[type]))) IN ('GAME ADVANCE') THEN 2
				ELSE NULL
		   END AS grade_tier
		  ,player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
		  ,gr.value	AS grade
		  ,CASE WHEN CAST(gr.value AS NUMERIC (3,1)) IN (8.0) THEN 100
		        WHEN CAST(gr.value AS NUMERIC (3,1)) IN (7.0) THEN 84
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.9,6.7,6.5) THEN 73
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.3) THEN 65
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.1,6.0) THEN 58
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.9) THEN 53
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.8) THEN 50
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.7) THEN 47.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.6) THEN 45.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.4) THEN 44.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.2) THEN 43.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.0) THEN 43
				ELSE NULL
		   END AS grade_scaled	
	  INTO ##temp_pro_grades_scout
      FROM [bane_production_analytics].[dbo].[reports] re
 LEFT JOIN [bane_production_analytics].[dbo].[grades] gr
        ON re.grade_id=gr.id	
 LEFT JOIN [bane_production_analytics].[dbo].[players] pl
        ON re.player_id=pl.id  
	 WHERE 1=1
	   AND UPPER(LTRIM(RTRIM(re.[type]))) IN ('ABILITY FOR RAVENS','GAME ADVANCE','QUARTERLY')
	   AND CAST(gr.value AS NUMERIC (3,1)) != 2
-------scale_id = 6 represents the Pro Grade Scale
	   AND gr.scale_id = 6
  ORDER BY re.id
		  ,gr.id

--SELECT * FROM ##temp_pro_grades_scout


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Next create a version of the Pro Grade Fit with the same
structure so you can append those grades.

OUTPUT TABLES:
##temp_pro_grades_model

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if##temp_pro_grades_model exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_model') IS NOT NULL
	DROP TABLE ##temp_pro_grades_model

    SELECT ABS(CHECKSUM(NEWID()))*-1 AS report_id
	      ,999 AS scout_id
		  ,season AS report_season
		  ,season - nfl_entry_year + 1 AS player_season_in_league
	      ,3 AS grade_tier
		  ,pl.id AS player_id
		  ,PlayerID AS nfl_id	
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name	  
		  ,GradeFit AS grade
		  ,ProGradeFit AS grade_scaled
	  INTO ##temp_pro_grades_model
      FROM [AnalyticsWork].[dbo].[model_pro_grades] mo
 LEFT JOIN [bane_production_analytics].[dbo].[players] pl
        ON mo.PlayerID=pl.nfl_id  

--SELECT * FROM ##temp_pro_grades_model


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the model grades to the scout grades.

OUTPUT TABLES:
##temp_pro_grades_append

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_append exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_append') IS NOT NULL
	DROP TABLE ##temp_pro_grades_append

    SELECT *
	  INTO ##temp_pro_grades_append
      FROM ##temp_pro_grades_model

INSERT INTO ##temp_pro_grades_append
	SELECT *
	  FROM ##temp_pro_grades_scout

--SELECT * FROM ##temp_pro_grades_append


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the player's mean grade for each grade_tier in each season.

Once we are able to put a team on each player's report, try to exclude
grades that are based just on training camp, like:
Report Month in (7,8)
AND team=BLT OR (team=SF AND Report Year = 2014) OR (team=PHI AND Report Year = 2015)

OUTPUT TABLES:
##temp_pro_grades_season_tier_mean

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if##temp_pro_grades_season_tier_mean exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_season_tier_mean') IS NOT NULL
	DROP TABLE ##temp_pro_grades_season_tier_mean

    SELECT player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier
		  ,RANK() OVER (PARTITION BY player_id, report_season ORDER BY grade_tier) AS order_for_models
  		  ,AVG(CAST(grade_scaled AS FLOAT)) AS grade_scaled_mean
	  INTO ##temp_pro_grades_season_tier_mean
	  FROM ##temp_pro_grades_append
  GROUP BY player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier

--SELECT * FROM ##temp_pro_grades_season_tier_mean

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Select the highest tiered grade for every player for every season.

OUTPUT TABLES:
##temp_pro_grades_season

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_season exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_season') IS NOT NULL
	DROP TABLE ##temp_pro_grades_season

    SELECT *
	  INTO ##temp_pro_grades_season
	  FROM ##temp_pro_grades_season_tier_mean
	 WHERE order_for_models = 1

--SELECT * FROM ##temp_pro_grades_season


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the season pro grades to the player advanced measurables
table.  Remember, there is a row for every player for each of
his first 4 seasons.

OUTPUT TABLES:
##temp_measurables_with_pro_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measurables_with_pro_grades exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_with_pro_grades') IS NOT NULL
	DROP TABLE ##temp_measurables_with_pro_grades

    SELECT me.*
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier
		  ,CASE WHEN COALESCE(grade_scaled_mean,50) < 50 THEN 50
		        ELSE COALESCE(grade_scaled_mean,50)
		   END AS grade_scaled
	  INTO ##temp_measurables_with_pro_grades
	  FROM ##temp_measurables_for_modeling me
 LEFT JOIN ##temp_pro_grades_season pg
        ON pg.player_id = me.player_id
	 WHERE player_season_in_league <=4

--SELECT * FROM ##temp_measurables_with_pro_grades

--check two players from the original measurables table to this final table
--then go to R!


select last_name, first_name, id from bane_production_analytics.dbo.players where last_name='Lofton' and first_name='Curtis'



















/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table to analyze the difference between 
combine and non combine run times for players who have both.

OUTPUT TABLES:
##temp_runs_compare

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_compare exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_compare') IS NOT NULL
	DROP TABLE ##temp_runs_compare

    SELECT w1.player_id
	      ,w1.workout_type_for_models
		  ,w1.dash_forty_best AS dash_forty_best_elec
		  ,w1.dash_twenty_best AS dash_twenty_best_elec
		  ,w1.dash_ten_best AS dash_ten_best_elec
		  ,w1.flying_twenty_best AS flying_twenty_best_elec
		  ,w1.flying_ten_best AS flying_ten_best_elec
		  ,w1.shuttle_short_best AS shuttle_short_best_elec
		  ,w1.shuttle_long_best AS shuttle_long_best_elec
		  ,w1.three_cone_best AS three_cone_best_elec
		  ,w1.dash_forty_z_score_best AS dash_forty_z_score_best_elec
		  ,w1.dash_twenty_z_score_best AS dash_twenty_z_score_best_elec
		  ,w1.dash_ten_z_score_best AS dash_ten_z_score_best_elec
		  ,w1.flying_twenty_z_score_best AS flying_twenty_z_score_best_elec
		  ,w1.flying_ten_z_score_best AS flying_ten_z_score_best_elec
		  ,w1.shuttle_short_z_score_best AS shuttle_short_z_score_best_elec
		  ,w1.shuttle_long_z_score_best AS shuttle_long_z_score_best_elec
		  ,w1.three_cone_z_score_best AS three_cone_z_score_best_elec

		  ,w2.dash_forty_best AS dash_forty_best_hand_indy
		  ,w2.dash_twenty_best AS dash_twenty_best_hand_indy
		  ,w2.dash_ten_best AS dash_ten_best_hand_indy
		  ,w2.flying_twenty_best AS flying_twenty_best_hand_indy
		  ,w2.flying_ten_best AS flying_ten_best_hand_indy
		  ,w2.shuttle_short_best AS shuttle_short_best_hand_indy
		  ,w2.shuttle_long_best AS shuttle_long_best_hand_indy
		  ,w2.three_cone_best AS three_cone_best_hand_indy
		  ,w2.dash_forty_z_score_best AS dash_forty_z_score_best_hand_indy
		  ,w2.dash_twenty_z_score_best AS dash_twenty_z_score_best_hand_indy
		  ,w2.dash_ten_z_score_best AS dash_ten_z_score_best_hand_indy
		  ,w2.flying_twenty_z_score_best AS flying_twenty_z_score_best_hand_indy
		  ,w2.flying_ten_z_score_best AS flying_ten_z_score_best_hand_indy
		  ,w2.shuttle_short_z_score_best AS shuttle_short_z_score_best_hand_indy
		  ,w2.shuttle_long_z_score_best AS shuttle_long_z_score_best_hand_indy
		  ,w2.three_cone_z_score_best AS three_cone_z_score_best_hand_indy

		  ,w3.dash_forty_best AS dash_forty_best_hand_other
		  ,w3.dash_twenty_best AS dash_twenty_best_hand_other
		  ,w3.dash_ten_best AS dash_ten_best_hand_other
		  ,w3.flying_twenty_best AS flying_twenty_best_hand_other
		  ,w3.flying_ten_best AS flying_ten_best_hand_other
		  ,w3.shuttle_short_best AS shuttle_short_best_hand_other
		  ,w3.shuttle_long_best AS shuttle_long_best_hand_other
		  ,w3.three_cone_best AS three_cone_best_hand_other
		  ,w3.dash_forty_z_score_best AS dash_forty_z_score_best_hand_other
		  ,w3.dash_twenty_z_score_best AS dash_twenty_z_score_best_hand_other
		  ,w3.dash_ten_z_score_best AS dash_ten_z_score_best_hand_other
		  ,w3.flying_twenty_z_score_best AS flying_twenty_z_score_best_hand_other
		  ,w3.flying_ten_z_score_best AS flying_ten_z_score_best_hand_other
		  ,w3.shuttle_short_z_score_best AS shuttle_short_z_score_best_hand_other
		  ,w3.shuttle_long_z_score_best AS shuttle_long_z_score_best_hand_other
		  ,w3.three_cone_z_score_best AS three_cone_z_score_best_hand_other

	  INTO ##temp_runs_compare
	  FROM ##temp_runs_best_z w1
LEFT JOIN ##temp_runs_best_z w2
	    ON w1.player_id=w2.player_id
	   AND w2.workout_type_for_models=3
LEFT JOIN ##temp_runs_best_z w3
	    ON w1.player_id=w3.player_id
	   AND w3.workout_type_for_models=4
	 WHERE w1.workout_type_for_models=1






		  
		  
		  
		  
		  
		  











----------haven't been able to figure out the exact SPARQ formula yet, this is a "best guess" based on other efforts to nail down the formula
----------,161.1768022+([weight]*0.3114693)+(dash_forty*-10.72725617)+(dash_ten*-41.89231102)+(shuttle_short*-16.15717599)+(three_cone*-6.981575131)+(bench_reps*0.477821711)+(jump_vertical*1.266893465)+(jump_broad/12*6.691568906) as sparq_estimate



















-- Assign Target Player and create all the empty variables for his measurables to go into

DECLARE @player_id AS INT = 41308

--These variables are for his z-scores
DECLARE @main_player_height_z_score AS NUMERIC(9,7)
DECLARE @main_player_weight_z_score AS NUMERIC(9,7)
DECLARE @main_player_arm_length_z_score AS NUMERIC(9,7)
DECLARE @main_player_hand_span_z_score AS NUMERIC(9,7)
DECLARE @main_player_wing_span_z_score AS NUMERIC(9,7)
DECLARE @main_player_test_correct_z_score AS NUMERIC(9,7)
DECLARE @main_player_forty_yard_dash_z_score AS NUMERIC(9,7)
DECLARE @main_player_twenty_yard_dash_z_score AS NUMERIC(9,7)
DECLARE @main_player_ten_yard_dash_z_score AS NUMERIC(9,7)
DECLARE @main_player_bench_press_reps_z_score AS NUMERIC(9,7)
DECLARE @main_player_jump_broad_z_score AS NUMERIC(9,7)
DECLARE @main_player_three_cone_z_score AS NUMERIC(9,7)
DECLARE @main_player_jump_vertical_z_score AS NUMERIC(9,7)
DECLARE @main_player_shuttle_short_z_score AS NUMERIC(9,7)
DECLARE @main_player_shuttle_long_z_score AS NUMERIC(9,7)
DECLARE @main_player_long_snap_z_score AS NUMERIC(9,7)


-- Select the target player's measurable z-scores into the empty variables
    SELECT @main_player_height_z_score = height_z_score
		  ,@main_player_weight_z_score = weight_z_score
	      ,@main_player_arm_length_z_score = arm_length_z_score
		  ,@main_player_hand_span_z_score = hand_span_z_score
		  ,@main_player_wing_span_z_score = wing_span_z_score
		  ,@main_player_test_correct_z_score = test_correct_z_score
		  ,@main_player_forty_yard_dash_z_score = forty_yard_dash_z_score
		  ,@main_player_twenty_yard_dash_z_score = twenty_yard_dash_z_score
		  --,@main_player_ten_yard_dash_z_score = ten_yard_dash_z_score
		  --,@main_player_bench_press_reps_z_score = bench_press_reps_z_score
		  ,@main_player_jump_broad_z_score = jump_broad_z_score
		  ,@main_player_three_cone_z_score = three_cone_z_score
		  ,@main_player_jump_vertical_z_score = jump_vertical_z_score
		  ,@main_player_shuttle_short_z_score = shuttle_short_z_score
		  ,@main_player_shuttle_long_z_score = shuttle_long_z_score
		  ,@main_player_long_snap_z_score = long_snap_z_score
      FROM ##temp_measurables_z_scores_all
	 WHERE player_id=@player_id

-- Check if temp_measurables_z_scores_differences, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_z_scores_differences') IS NOT NULL
	DROP TABLE ##temp_measurables_z_scores_differences

-- now create a table that gets the difference between the main player and all other players (at his position only? or should we allow cross position comps?)
-- Find the z-score differences between the target player and all other players
    SELECT player_id
	      ,GSISID
		  ,report_position
	      --,first_name
	      --,last_name
	      ,CASE WHEN @main_player_height_z_score IS NOT NULL THEN ABS(height_z_score-@main_player_height_z_score) ELSE NULL END AS height_z_score_difference
		  ,CASE WHEN @main_player_weight_z_score IS NOT NULL THEN ABS(weight_z_score-@main_player_weight_z_score) ELSE NULL END AS weight_z_score_difference
	      ,CASE WHEN @main_player_arm_length_z_score IS NOT NULL THEN ABS(arm_length_z_score-@main_player_arm_length_z_score) ELSE NULL END AS arm_length_z_score_difference
		  ,CASE WHEN @main_player_hand_span_z_score IS NOT NULL THEN ABS(hand_span_z_score-@main_player_hand_span_z_score) ELSE NULL END AS hand_span_z_score_difference
		  ,CASE WHEN @main_player_wing_span_z_score IS NOT NULL THEN ABS(wing_span_z_score-@main_player_wing_span_z_score) ELSE NULL END AS wing_span_z_score_difference
		  ,CASE WHEN @main_player_test_correct_z_score IS NOT NULL THEN ABS(test_correct_z_score-@main_player_test_correct_z_score) ELSE NULL END AS test_correct_z_score_difference
		  ,CASE WHEN @main_player_forty_yard_dash_z_score IS NOT NULL THEN ABS(forty_yard_dash_z_score-@main_player_forty_yard_dash_z_score) ELSE NULL END AS forty_yard_dash_z_score_difference
		  ,CASE WHEN @main_player_twenty_yard_dash_z_score IS NOT NULL THEN ABS(twenty_yard_dash_z_score-@main_player_twenty_yard_dash_z_score) ELSE NULL END AS twenty_yard_dash_z_score_difference
		  --,CASE WHEN @main_player_ten_yard_dash_z_score IS NOT NULL THEN ABS(ten_yard_dash_z_score-@main_player_ten_yard_dash_z_score) ELSE NULL END AS ten_yard_dash_z_score_difference
		  --,CASE WHEN @main_player_bench_press_reps_z_score IS NOT NULL THEN ABS(bench_press_reps_z_score-@main_player_bench_press_reps_z_score) ELSE NULL END AS bench_press_reps_z_score_difference
		  ,CASE WHEN @main_player_jump_broad_z_score IS NOT NULL THEN ABS(jump_broad_z_score-@main_player_jump_broad_z_score) ELSE NULL END AS jump_broad_z_score_difference
		  ,CASE WHEN @main_player_three_cone_z_score IS NOT NULL THEN ABS(three_cone_z_score-@main_player_three_cone_z_score) ELSE NULL END AS three_cone_z_score_difference
		  ,CASE WHEN @main_player_jump_vertical_z_score IS NOT NULL THEN ABS(jump_vertical_z_score-@main_player_jump_vertical_z_score) ELSE NULL END AS jump_vertical_z_score_difference
		  ,CASE WHEN @main_player_shuttle_short_z_score IS NOT NULL THEN ABS(shuttle_short_z_score-@main_player_shuttle_short_z_score) ELSE NULL END AS shuttle_short_z_score_difference
		  ,CASE WHEN @main_player_shuttle_long_z_score IS NOT NULL THEN ABS(shuttle_long_z_score-@main_player_shuttle_long_z_score) ELSE NULL END AS shuttle_long_z_score_difference
		  ,CASE WHEN @main_player_long_snap_z_score IS NOT NULL THEN ABS(long_snap_z_score-@main_player_long_snap_z_score) ELSE NULL END AS long_snap_z_score_difference
	  INTO ##temp_measurables_z_scores_differences
	  FROM ##temp_measurables_z_scores_all 
	 WHERE player_id!=@player_id
  
    SELECT *
      FROM ##temp_measurables_z_scores_differences zdiff
INNER JOIN RavensIncoming.dbo.club_db_player_extracts player
		  ON zdiff.player_id=player.id





