


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for creating the advanced measurables.

It also finds similar players because many of the advanced
measurables are used in the SimScore model.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the master measurables table

OUTPUT TABLES:
##temp_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if temp_all_measurables exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_master') IS NOT NULL
	DROP TABLE ##temp_measurables_master

    SELECT wo.id AS workout_id
	      ,wo.[date] AS workout_date
		  ,wo.[description] AS workout_description
		  ,wt.[type] AS workout_type
	      ,wo.player_id
		  ,wo.nfl_player_id
		  ,wo.college_player_id
		  ,me.measurable_type_id
		  ,mt.code
		  ,CASE WHEN re.id IS NULL THEN CASE WHEN wt.[type] = 'COMB' THEN 2
		                                     WHEN wt.[type] IN ('RCOMB','ALLSTAR','APT','SRCOMB','PDAY') THEN 5
											 WHEN wt.[type] IN ('FAW','LW','PW') THEN 4
											 ELSE NULL
										END	  
		        ELSE re.id 
		   END AS reliability_id
		  ,CASE WHEN re.[description] IS NULL THEN CASE WHEN wt.[type] = 'COMB' THEN 'Indy Handheld'
		                                     WHEN wt.[type] IN ('RCOMB','ALLSTAR','APT','SRCOMB','PDAY') THEN 'Workout (example: APT)'
											 WHEN wt.[type] IN ('FAW','LW','PW') THEN 'Verified'
											 ELSE NULL
										END	  
		        ELSE re.[description]
		   END AS reliability_description
		  ,re.translation
		  ,me.order_by AS attempt
		  ,me.value
	  INTO ##temp_measurables_master
      FROM [bane_production_analytics].[dbo].[workouts] wo
 LEFT JOIN [bane_production_analytics].[dbo].[measurables] me
        ON wo.id=me.workout_id
 LEFT JOIN [bane_production_analytics].[dbo].[measurable_types] mt
		ON me.measurable_type_id=mt.id
 LEFT JOIN [bane_production_analytics].[dbo].[player_workout_types] wt
		ON wo.player_workout_type_id=wt.id
 LEFT JOIN [bane_production_analytics].[dbo].[reliabilities] re
		ON me.reliability_id=re.id
	 WHERE (re.translation IN ('I','V','W') OR wt.[type] IN ('COMB','APT'))
	   AND NOT (wt.[type] = 'RPT' AND re.translation = 'I')
  ORDER BY wo.player_id
          ,wo.id
		  ,me.measurable_type_id
		  ,re.id

--SELECT * FROM ##temp_measurables_master WHERE player_id=2426


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the 40, 20, and 10 Times so you can get Flying 10 and 20
from the same run.  You want to avoid taking his best 40, and
his best 20 from different runs to calculate his best flying 20.

OUTPUT TABLES:
##temp_dashes_pivot

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if ##temp_dashes_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_dashes_pivot') IS NOT NULL
	DROP TABLE ##temp_dashes_pivot

    SELECT workout_id
	      ,workout_date
		  ,workout_description
		  ,workout_type
	      ,player_id
		  ,nfl_player_id
		  ,college_player_id
		  ,reliability_id
		  ,reliability_description
		  ,translation
		  ,attempt
	      ,[40YTime] AS forty_time
	      ,[20YTime] AS twenty_time
	      ,[10YTime] AS ten_time
	  INTO ##temp_dashes_pivot
      FROM (
    SELECT workout_id
	      ,workout_date
		  ,workout_description
		  ,workout_type
	      ,player_id
		  ,nfl_player_id
		  ,college_player_id
		  ,code
		  ,reliability_id
		  ,reliability_description
		  ,translation
		  ,attempt
		  ,value
      FROM ##temp_measurables_master) up
     PIVOT (MIN(value) FOR code IN ([40YTime], [20YTime], [10YTime])) AS pvt
	 WHERE reliability_id IS NOT NULL
  ORDER BY player_id, workout_id

--select * from ##temp_dashes_pivot 


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Flying 10 and 20 Time Variables

OUTPUT TABLES:
##temp_dashes_flying_ten
##temp_dashes_flying_twenty

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if ##temp_dashes_flying_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_dashes_flying_ten') IS NOT NULL
	DROP TABLE ##temp_dashes_flying_ten

    SELECT workout_id
	      ,workout_date
		  ,workout_description
		  ,workout_type
	      ,player_id
		  ,nfl_player_id
		  ,college_player_id
		  ,NULL AS measurable_type_id
		  ,'Flying10Time' AS code
		  ,reliability_id
		  ,reliability_description
		  ,NULL AS translation
		  ,attempt
	      ,(twenty_time-ten_time) AS value
	  INTO ##temp_dashes_flying_ten
      FROM ##temp_dashes_pivot
	 WHERE twenty_time IS NOT NULL
	   AND ten_time IS NOT NULL
  ORDER BY player_id, workout_id

  --select * from ##temp_dashes_flying_ten


-- Check if ##temp_dashes_flying_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_dashes_flying_twenty') IS NOT NULL
	DROP TABLE ##temp_dashes_flying_twenty

    SELECT workout_id
	      ,workout_date
		  ,workout_description
		  ,workout_type
	      ,player_id
		  ,nfl_player_id
		  ,college_player_id
		  ,NULL AS measurable_type_id
		  ,'Flying20Time' AS code
		  ,reliability_id
		  ,reliability_description
		  ,NULL AS translation
		  ,attempt
	      ,(forty_time-twenty_time) AS value
	  INTO ##temp_dashes_flying_twenty
      FROM ##temp_dashes_pivot
	 WHERE twenty_time IS NOT NULL
	   AND forty_time IS NOT NULL
  ORDER BY player_id, workout_id

--select * from ##temp_dashes_flying_twenty


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the Flying 10 and 20 to the master measurables table.

OUTPUT TABLES:
##temp_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_dashes_flying_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_dashes_flying_twenty

--SELECT * FROM ##temp_measurables_master where player_id=2426


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Order his individual workout times so you get the best time from
a given workout. Do one for electronic times and one for handheld 
times. Also create an overall version.

OUTPUT TABLES:
##temp_measurables_with_order_electronic
##temp_measurables_with_order_handheld
##temp_measurables_with_order_overall

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if ##temp_measurables_with_order_electronic exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_with_order_electronic') IS NOT NULL
	DROP TABLE ##temp_measurables_with_order_electronic

    SELECT *
	      ,1 AS electronic_time
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value DESC, attempt DESC)
		   END AS measurable_order
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY code ORDER BY reliability_id, value DESC, attempt DESC)
		   END AS measurable_order_all_workouts
      INTO ##temp_measurables_with_order_electronic
      FROM ##temp_measurables_master
	 WHERE code='Wgt'
	    OR (UPPER(reliability_description) LIKE '%ELECTRONIC%')
  ORDER BY player_id
          ,workout_id
		  ,code

--SELECT * FROM ##temp_measurables_with_order_electronic

-- Check if ##temp_measurables_with_order_handheld exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_with_order_handheld') IS NOT NULL
	DROP TABLE ##temp_measurables_with_order_handheld

    SELECT *
		  ,0 AS electronic_time
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value DESC, attempt DESC)
		   END AS measurable_order
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY code ORDER BY reliability_id, value DESC, attempt DESC)
		   END AS measurable_order_all_workouts
      INTO ##temp_measurables_with_order_handheld
      FROM ##temp_measurables_master
	 WHERE code='Wgt'
	    OR (UPPER(reliability_description) NOT LIKE '%ELECTRONIC%')
		OR reliability_description IS NULL
  ORDER BY player_id
          ,workout_id
		  ,code

--SELECT * FROM ##temp_measurables_with_order_handheld

-- Check if ##temp_measurables_with_order_overall exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_with_order_overall') IS NOT NULL
	DROP TABLE ##temp_measurables_with_order_overall

    SELECT *
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value DESC, attempt DESC)
		   END AS measurable_order
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY reliability_id, value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY code ORDER BY reliability_id, value DESC, attempt DESC)
		   END AS measurable_order_all_workouts
      INTO ##temp_measurables_with_order_overall
      FROM ##temp_measurables_master
  ORDER BY player_id
          ,workout_id
		  ,code

--SELECT * FROM ##temp_measurables_with_order_overall




/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Run Measurables Table. Because these are 
bucketed by weight include the weight too. We want to make
sure the weight and 40 measurements come from the same workout.
Create an electronic, handheld, and overall table.

Because we aren't as interested the actual time as his time/weight z score, 
we want the lowest of those, not necessarily the lowest raw time.

OUTPUT TABLES:
##temp_runs_electronic
##temp_runs_handheld
##temp_runs_overall

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if ##temp_runs_electronic exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_electronic') IS NOT NULL
	DROP TABLE ##temp_runs_electronic

    SELECT player_id
	      ,workout_id
		  ,workout_type
		  ,electronic_time
	      ,Wgt AS [weight]
	      ,[40YTime] AS forty_time
	      ,[20YTime] AS twenty_time
	      ,[10YTime] AS ten_time
		  ,[20YShuttle] AS short_shuttle_time
		  ,[3Cone] AS three_cone_time
		  ,[60YShuttle] AS long_shuttle_time
		  ,[Flying10Time] AS flying_ten_time
		  ,[Flying20Time] AS flying_twenty_time
	  INTO ##temp_runs_electronic
      FROM (
    SELECT player_id
	      ,workout_id
		  ,workout_type
		  ,electronic_time
		  ,measurable_order
		  ,code
		  ,value
      FROM ##temp_measurables_with_order_electronic) up
     PIVOT (MIN(value) FOR code IN ([Wgt], [40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle], [Flying10Time], [Flying20Time])) AS pvt
	 WHERE measurable_order=1
  ORDER BY player_id, workout_id

 --SELECT * FROM ##temp_runs_electronic
 

-- Check if ##temp_runs_handheld exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_handheld') IS NOT NULL
	DROP TABLE ##temp_runs_handheld

    SELECT player_id
	      ,workout_id
		  ,workout_type
		  ,electronic_time
	      ,Wgt AS [weight]
	      ,[40YTime] AS forty_time
	      ,[20YTime] AS twenty_time
	      ,[10YTime] AS ten_time
		  ,[20YShuttle] AS short_shuttle_time
		  ,[3Cone] AS three_cone_time
		  ,[60YShuttle] AS long_shuttle_time
		  ,[Flying10Time] AS flying_ten_time
		  ,[Flying20Time] AS flying_twenty_time
	  INTO ##temp_runs_handheld
      FROM (
    SELECT player_id
	      ,workout_id
		  ,workout_type
		  ,electronic_time
		  ,measurable_order
		  ,code
		  ,value
      FROM ##temp_measurables_with_order_handheld) up
     PIVOT (MIN(value) FOR code IN ([Wgt], [40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle], [Flying10Time], [Flying20Time])) AS pvt
	 WHERE measurable_order=1
  ORDER BY player_id, workout_id  

 --SELECT * FROM ##temp_runs_handheld

 
-- Check if ##temp_runs_overall exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_overall') IS NOT NULL
	DROP TABLE ##temp_runs_overall

    SELECT player_id
	      ,workout_id
		  ,workout_type
	      ,Wgt AS [weight]
	      ,[40YTime] AS forty_time
	      ,[20YTime] AS twenty_time
	      ,[10YTime] AS ten_time
		  ,[20YShuttle] AS short_shuttle_time
		  ,[3Cone] AS three_cone_time
		  ,[60YShuttle] AS long_shuttle_time
		  ,[Flying10Time] AS flying_ten_time
		  ,[Flying20Time] AS flying_twenty_time
	  INTO ##temp_runs_overall
      FROM (
    SELECT player_id
	      ,workout_id
		  ,workout_type
--Use measurable_order_all_workouts so that you only get the best measurable from every player.
		  ,measurable_order_all_workouts
		  ,code
		  ,value
      FROM ##temp_measurables_with_order_overall) up
     PIVOT (MIN(value) FOR code IN ([Wgt], [40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle], [Flying10Time], [Flying20Time])) AS pvt
	 WHERE measurable_order_all_workouts=1
  ORDER BY player_id, workout_id  

 --SELECT * FROM ##temp_runs_overall

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the mean and standard deviations for each weight bucket.
For the dashes, the buckets are 5 pounds wide, for the shuttles
and cone drill they are 7 pounds wide.  The reason you do this on
an overall basis rather than splitting it up to electronic and 
handheld is the bigger samples, especially around the edges.

Instead of just creating a 5 pound bucket that each weight falls into,
for every individual weight create a bucket that includes the 2 pounds
above and below.

OUTPUT TABLES:
##temp_runs_avg_stdev


----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_avg_stdev exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_avg_stdev') IS NOT NULL
	DROP TABLE ##temp_runs_avg_stdev

    SELECT DISTINCT r1.[weight]
-----------Forty Yard Dash
	      ,CASE WHEN r1.[weight] < 154 OR r1.[weight] > 348 THEN NULL
		        ELSE (SELECT AVG(forty_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS forty_time_mean
	      ,CASE WHEN r1.[weight] < 154 OR r1.[weight] > 348 THEN NULL
		        ELSE (SELECT STDEVP(forty_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS forty_time_stdev
-----------Twenty Yard Dash
	      ,CASE WHEN r1.[weight] < 154 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT AVG(twenty_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS twenty_time_mean
	      ,CASE WHEN r1.[weight] < 154 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT STDEVP(twenty_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS twenty_time_stdev
-----------Ten Yard Dash
	      ,CASE WHEN r1.[weight] < 161 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT AVG(ten_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS ten_time_mean
	      ,CASE WHEN r1.[weight] < 161 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT STDEVP(ten_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS ten_time_stdev
-----------Flying 10
	      ,CASE WHEN r1.[weight] < 161 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT AVG(flying_ten_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS flying_ten_time_mean
	      ,CASE WHEN r1.[weight] < 161 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT STDEVP(flying_ten_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS flying_ten_time_stdev
-----------Flying 20
	      ,CASE WHEN r1.[weight] < 161 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT AVG(flying_twenty_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS flying_twenty_time_mean
	      ,CASE WHEN r1.[weight] < 161 OR r1.[weight] > 346 THEN NULL
		        ELSE (SELECT STDEVP(flying_twenty_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS flying_twenty_time_stdev
-----------Long Shuttle
	      ,CASE WHEN r1.[weight] < 179 OR r1.[weight] > 268 THEN NULL
		        ELSE (SELECT AVG(long_shuttle_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		   END AS long_shuttle_time_mean
	      ,CASE WHEN r1.[weight] < 179 OR r1.[weight] > 268 THEN NULL
		        ELSE (SELECT STDEVP(long_shuttle_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		   END AS long_shuttle_time_stdev
-----------Short Shuttle
	      ,CASE WHEN r1.[weight] < 178 OR r1.[weight] > 336 THEN NULL
		        ELSE (SELECT AVG(short_shuttle_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		   END AS short_shuttle_time_mean
	      ,CASE WHEN r1.[weight] < 178 OR r1.[weight] > 336 THEN NULL
		        ELSE (SELECT STDEVP(short_shuttle_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		   END AS short_shuttle_time_stdev
-----------Three Cone
	      ,CASE WHEN r1.[weight] < 177 OR r1.[weight] > 335 THEN NULL
		        ELSE (SELECT AVG(three_cone_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		   END AS three_cone_time_mean
	      ,CASE WHEN r1.[weight] < 177 OR r1.[weight] > 335 THEN NULL
		        ELSE (SELECT STDEVP(three_cone_time) FROM ##temp_runs_overall r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		   END AS three_cone_time_stdev
	  INTO ##temp_runs_avg_stdev
      FROM ##temp_runs_overall r1
	 WHERE r1.[weight] >= 140
	   AND r1.[weight] <= 400
  ORDER BY r1.[weight]

--SELECT * FROM ##temp_runs_avg_stdev


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the best electronic and best handheld times into one table.
This way you have a best handheld and a best electronic for every 
workout.

OUTPUT TABLES:
##temp_runs_handheld_and_electronic

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_handheld_and_electronic exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_handheld_and_electronic') IS NOT NULL
	DROP TABLE ##temp_runs_handheld_and_electronic

	SELECT *
	  INTO ##temp_runs_handheld_and_electronic
	  FROM ##temp_runs_handheld
	 WHERE forty_time IS NOT NULL
	    OR twenty_time IS NOT NULL
		OR ten_time IS NOT NULL
		OR flying_ten_time IS NOT NULL
		OR flying_twenty_time IS NOT NULL
		OR short_shuttle_time IS NOT NULL
		OR long_shuttle_time IS NOT NULL
		OR three_cone_time IS NOT NULL

INSERT INTO ##temp_runs_handheld_and_electronic
	SELECT *
	  FROM ##temp_runs_electronic
	 WHERE forty_time IS NOT NULL
	    OR twenty_time IS NOT NULL
		OR ten_time IS NOT NULL
		OR flying_ten_time IS NOT NULL
		OR flying_twenty_time IS NOT NULL
		OR short_shuttle_time IS NOT NULL
		OR long_shuttle_time IS NOT NULL
		OR three_cone_time IS NOT NULL

--SELECT * FROM ##temp_runs_handheld_and_electronic where player_id=2426


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the z scores for the 40/20/10 yard dashes.

OUTPUT TABLES:
##temp_runs_with_z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_with_z exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_with_z') IS NOT NULL
	DROP TABLE ##temp_runs_with_z

    SELECT player_id
	      ,workout_id
		  ,workout_type
		  ,CASE WHEN workout_type = 'COMB' THEN 'COMB' ELSE 'NON' END AS combine_or_other
		  ,electronic_time
	      ,av.[weight]
	      ,forty_time
		  ,(forty_time - forty_time_mean) / forty_time_stdev AS forty_time_z_score
	      ,twenty_time
		  ,(twenty_time - twenty_time_mean) / twenty_time_stdev AS twenty_time_z_score
	      ,ten_time
		  ,(ten_time - ten_time_mean) / ten_time_stdev AS ten_time_z_score
	      ,flying_ten_time
		  ,(flying_ten_time - flying_ten_time_mean) / flying_ten_time_stdev AS flying_ten_time_z_score
		  ,flying_twenty_time
		  ,(flying_twenty_time - flying_twenty_time_mean) / flying_twenty_time_stdev AS flying_twenty_time_z_score
		  ,long_shuttle_time
		  ,(long_shuttle_time - long_shuttle_time_mean) / long_shuttle_time_stdev AS long_shuttle_time_z_score
		  ,short_shuttle_time
		  ,(short_shuttle_time - short_shuttle_time_mean) / short_shuttle_time_stdev AS short_shuttle_time_z_score
		  ,three_cone_time
		  ,(three_cone_time - three_cone_time_mean) / three_cone_time_stdev AS three_cone_time_z_score
----------Extra Run Based Measurables
          ,forty_time-short_shuttle_time AS lateral_agility_score
          ,(av.[weight]*200)/POWER(forty_time,4) AS speed_score_barnwell
          ,(av.[weight] * 125)/(forty_time *ten_time*short_shuttle_time*three_cone_time) AS speed_score_adjusted
          ,(forty_time+ten_time+short_shuttle_time+three_cone_time) AS edge_rusher_speed_cohen
----------1 pound=0.453595 kilograms
----------1 yard = 0.9144 meters
----------s=v0t+1/2at^2
		  ,2*(10*0.9144)/POWER(ten_time,2) AS ten_acceleration
          ,2*(10*0.9144)/ten_time AS ten_velocity 
----------momentum is mass times velocity
		  ,(av.[weight]*0.453592)*(2*(10*0.9144)/ten_time) AS ten_momentum 
----------work is force times distance, force is mass times acceleration  
		  ,(av.[weight]*0.453592)*POWER((2*(10*0.9144)/ten_time),2)*10 AS ten_work
		  ,2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/POWER((twenty_time-ten_time),2) AS twenty_acceleration
		  ,2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/(twenty_time-ten_time) AS twenty_velocity 
----------momentum is mass times velocity
          ,(av.[weight]*0.453592)*(2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/(twenty_time-ten_time)) AS twenty_momentum
----------work is force times distance, force is mass times acceleration 
		  ,(av.[weight]*0.453592)*(2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/POWER((twenty_time-ten_time),2))*10 AS twenty_work
		  ,2*(20-(2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/(twenty_time-ten_time)))/POWER(forty_time-twenty_time,2) AS forty_acceleration 	
		  ,2*(20-(2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/(twenty_time-ten_time)))/(forty_time-twenty_time) AS forty_velocity
----------momentum is mass times velocity
          ,(av.[weight]*0.453592)*(2*(20-(2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/(twenty_time-ten_time)))/(forty_time-twenty_time)) AS forty_momentum
----------work is force times distance, force is mass times acceleration 
		  ,(av.[weight]*0.453592)*(2*(20-(2*(10-((2*(10*0.9144)/ten_time)*(twenty_time-ten_time)))/(twenty_time-ten_time)))/POWER(forty_time-twenty_time,2))*20 AS forty_work
	  INTO ##temp_runs_with_z 
	  FROM ##temp_runs_avg_stdev av
INNER JOIN ##temp_runs_handheld_and_electronic he
        ON av.[weight] = he.[weight]

--SELECT * FROM ##temp_runs_with_z WHERE player_id = 3196


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the table with each player's best dash z scores. Find his best
electronic and best handheld z score, so you have more flexibility 
later on when deciding which to use in models or similarity scores.

OUTPUT TABLES:
##temp_runs_best
##temp_runs_best_handheld_and_electronic

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_best_handheld_and_electronic exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_best_handheld_and_electronic') IS NOT NULL
	DROP TABLE ##temp_runs_best_handheld_and_electronic

    SELECT player_id
		  ,CASE WHEN electronic_time = 1 THEN 'ELEC' ELSE 'HAND' END AS best_type
		  ,combine_or_other
		  ,MIN(forty_time_z_score) AS forty_time_z_score_best
	      ,MIN(twenty_time_z_score) AS twenty_time_z_score_best
	      ,MIN(ten_time_z_score) AS ten_time_z_score_best
	      ,MIN(flying_twenty_time_z_score) AS flying_twenty_time_z_score_best
	      ,MIN(flying_ten_time_z_score) AS flying_ten_time_z_score_best
		  ,MIN(long_shuttle_time_z_score) AS long_shuttle_time_z_score_best
	      ,MIN(short_shuttle_time_z_score) AS short_shuttle_time_z_score_best
	      ,MIN(three_cone_time_z_score) AS three_cone_time_z_score_best
		  ,MAX(lateral_agility_score) AS lateral_agility_score_best
		  ,MAX(speed_score_barnwell) AS speed_score_barnwell_best
		  ,MAX(speed_score_adjusted) AS speed_score_adjusted_best
		  ,MAX(edge_rusher_speed_cohen) AS edge_rusher_speed_cohen_best
		  ,MAX(ten_acceleration) AS ten_acceleration_best
		  ,MAX(ten_velocity) AS ten_velocity_best
		  ,MAX(ten_momentum) AS ten_momentum_best
		  ,MAX(ten_work) AS ten_work_best
		  ,MAX(twenty_acceleration) AS twenty_acceleration_best
		  ,MAX(twenty_velocity) AS twenty_velocity_best
		  ,MAX(twenty_momentum) AS twenty_momentum_best
		  ,MAX(twenty_work) AS twenty_work_best
		  ,MAX(forty_acceleration) AS forty_acceleration_best
		  ,MAX(forty_velocity) AS forty_velocity_best
		  ,MAX(forty_momentum) AS forty_momentum_best
		  ,MAX(forty_work) AS forty_work_best	
	  INTO ##temp_runs_best_handheld_and_electronic
	  FROM ##temp_runs_with_z
  GROUP BY player_id, electronic_time, combine_or_other
  ORDER BY player_id, electronic_time, combine_or_other

--SELECT * FROM ##temp_runs_best_handheld_and_electronic WHERE player_id = 34960

-- Check if ##temp_runs_best exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_best') IS NOT NULL
	DROP TABLE ##temp_runs_best

    SELECT player_id
		  ,'BOTH' AS best_type
		  ,'BOTH' AS combine_or_other
		  ,MIN(forty_time_z_score) AS forty_time_z_score_best
	      ,MIN(twenty_time_z_score) AS twenty_time_z_score_best
	      ,MIN(ten_time_z_score) AS ten_time_z_score_best
	      ,MIN(flying_twenty_time_z_score) AS flying_twenty_time_z_score_best
	      ,MIN(flying_ten_time_z_score) AS flying_ten_time_z_score_best
		  ,MIN(long_shuttle_time_z_score) AS long_shuttle_time_z_score_best
	      ,MIN(short_shuttle_time_z_score) AS short_shuttle_time_z_score_best
	      ,MIN(three_cone_time_z_score) AS three_cone_time_z_score_best
		  ,MAX(lateral_agility_score) AS lateral_agility_score_best
		  ,MAX(speed_score_barnwell) AS speed_score_barnwell_best
		  ,MAX(speed_score_adjusted) AS speed_score_adjusted_best
		  ,MAX(edge_rusher_speed_cohen) AS edge_rusher_speed_cohen_best
		  ,MAX(ten_acceleration) AS ten_acceleration_best
		  ,MAX(ten_velocity) AS ten_velocity_best
		  ,MAX(ten_momentum) AS ten_momentum_best
		  ,MAX(ten_work) AS ten_work_best
		  ,MAX(twenty_acceleration) AS twenty_acceleration_best
		  ,MAX(twenty_velocity) AS twenty_velocity_best
		  ,MAX(twenty_momentum) AS twenty_momentum_best
		  ,MAX(twenty_work) AS twenty_work_best
		  ,MAX(forty_acceleration) AS forty_acceleration_best
		  ,MAX(forty_velocity) AS forty_velocity_best
		  ,MAX(forty_momentum) AS forty_momentum_best
		  ,MAX(forty_work) AS forty_work_best	
	  INTO ##temp_runs_best
	  FROM ##temp_runs_with_z
  GROUP BY player_id
  ORDER BY player_id

--SELECT * FROM ##temp_runs_best WHERE player_id = 34960


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the best electronic and best handheld and overall best
z scores into one table.

OUTPUT TABLES:
##temp_runs_best

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

INSERT INTO ##temp_runs_best
	SELECT *
	  FROM ##temp_runs_best_handheld_and_electronic

 --SELECT * FROM ##temp_runs_best

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Non-Run Measurables Table. Some are bucketed by position
(hand size), some are bucketed by more than one position (weight)
so that you can easily move a player back and forth between positions
(in case you have a safety and you want to project him as a LB), 
others are bucketed by other factors.

OUTPUT TABLES:
##temp_measures_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_master exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_master') IS NOT NULL
	DROP TABLE ##temp_measures_master

    SELECT player_id
	      ,workout_id
		  ,workout_type
	      ,Wgt AS [weight]
	      ,[HgtCnv] AS height
	      ,[ArmLngCnv] AS arm_length
	      ,[WSpanCnv] AS wingspan
		  ,[HSpanCnv] AS hand_size
		  ,[BroadJumpCnv] AS broad_jump
		  ,[StrengthReps225] AS bench_reps
		  ,[VertJumpCnv] AS vertical_jump
		  ,[TestScore] AS test_score
	  INTO ##temp_measures_master
      FROM (
    SELECT player_id
	      ,workout_id
		  ,workout_type
		  ,measurable_order
		  ,code
		  ,value
      FROM ##temp_measurables_with_order_overall) up
     PIVOT (MIN(value) FOR code IN ([Wgt], [HgtCnv], [ArmLngCnv], [WSpanCnv], [HSpanCnv], [BroadJumpCnv], [StrengthReps225], [VertJumpCnv], [TestScore])) AS pvt
	 WHERE measurable_order=1
  ORDER BY player_id, workout_id

 --SELECT * FROM ##temp_measures_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available.

OUTPUT TABLES:
##temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions

    SELECT player_id
	      ,position
		  ,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
		        WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
				WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
				ELSE NULL
		   END AS order_by
	 INTO ##temp_draft_board_positions
	 FROM [bane_production_analytics].[dbo].[draft_board_grades]
	WHERE position != '' AND position IS NOT NULL


-- Check if ##temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions_with_order

    SELECT player_id
	      ,position
	      ,RANK() OVER (PARTITION BY player_id ORDER BY order_by) AS draft_board_position_order
	 INTO ##temp_draft_board_positions_with_order
	 FROM ##temp_draft_board_positions

--SELECT * FROM ##temp_draft_board_positions_with_order


 /*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add in the extra measures (bench power, explosion index, etc.)

OUTPUT TABLES:
##temp_measures_with_extras

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_with_extras exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_with_extras') IS NOT NULL
	DROP TABLE ##temp_measures_with_extras

    SELECT ma.*
	      ,CASE WHEN workout_type = 'COMB' THEN 'COMB' ELSE 'NON' END AS combine_or_other
	      ,CASE WHEN dbg.position != '' AND dbg.position IS NOT NULL THEN CASE WHEN dbg.position IN ('OB','RUSH','SAM','DP') THEN 'OB'
																	           WHEN dbg.position IN ('DS','FS','SS') THEN 'DS'
																			   ELSE UPPER(LTRIM(RTRIM(dbg.position)))
																		  END
		        ELSE CASE WHEN pos.abbreviation IN ('WR') THEN 'WO'
				          WHEN pos.abbreviation IN ('RB') THEN 'OH'
						  WHEN pos.abbreviation IN ('ROG','LOG','OL') THEN 'OG'
						  WHEN pos.abbreviation IN ('ROT','LOT') THEN 'OT'
						  WHEN pos.abbreviation IN ('MB','ILB','WB','LB','4-3 WILL') THEN 'IB'
						  WHEN pos.abbreviation IN ('ROLB','LOLB','OLB','SB','RUSH','4-3 DE','4-3 SAM','SAM') THEN 'OB'
						  WHEN pos.abbreviation IN ('NB','DB') THEN 'DC'
						  WHEN pos.abbreviation IN ('RDE','LDE') THEN 'DE'
						  WHEN pos.abbreviation IN ('NT','DL','NG') THEN 'DT'
						  WHEN pos.abbreviation IN ('SS','FS') THEN 'DS'
						  ELSE UPPER(LTRIM(RTRIM(pos.abbreviation)))
					 END
		   END AS position
	      ,vertical_jump + (broad_jump/12) + bench_reps AS kirwan_cohen_explosion_index
		  ,vertical_jump +3.5*(broad_jump/12)*([weight]/(height/12))/3000 AS lower_explosion
          --for below equation, 225 lbs = 100 kg , 9.8 m/s is the force of gravity, 0.0254 inches in a meter
 		  ,((100*9.8)/(arm_length*0.0254))*bench_reps AS bench_work_joules         
          --divide the above by the time it takes him to do his reps to get bench_watts (not jj)
----------i dont know where the below equation comes from, it was in sandy's code
----------vertical jump power equation is 60.7*jump (in cm) + 45.3*[weight] (in kg) - 2055
          ,(60.7*vertical_jump*2.54) + (45.3*([weight]*0.453592)) - 2055 AS vertical_jump_power
		  ,8*[weight]*SQRT(vertical_jump/12) AS vertical_jump_power_sandy
----------the next one is the formula Spagnuolo used for judging explosion from the jump
		  ,SQRT([weight])*SQRT(vertical_jump) AS vertical_jump_power_spagnuolo
----------i don't know where the below equation comes from, it was in sandy's code
		  ,4*SQRT(2)*[weight]*SQRT(broad_jump/12) AS broad_jump_power_sandy
----------i don't know the logic behind it but sandy also had a combined jump variable
		  ,(vertical_jump + broad_jump)/2 AS combined_jump_converted
		  ,height + arm_length AS vertical_length
		  ,height + arm_length + vertical_jump AS vertical_length_with_jump
		  ,arm_length*2 / height AS arm_length_to_height_ratio
		  ,wingspan / height AS wingspan_to_height_ratio
		  ,POWER(arm_length,2) AS arm_radius
		  ,730*[weight] / height AS body_mass_index
	  INTO ##temp_measures_with_extras
      FROM ##temp_measures_master ma
INNER JOIN [bane_production_analytics].[dbo].[players] pl
        ON ma.player_id = pl.id
 LEFT JOIN [bane_production_analytics].[dbo].[positions] pos
        ON pl.position_id = pos.id
 LEFT JOIN ##temp_draft_board_positions_with_order dbg
        ON ma.player_id = dbg.player_id
		AND dbg.draft_board_position_order = 1
  ORDER BY player_id, workout_id

 --SELECT * FROM ##temp_measures_with_extras


 /*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the mean and standard deviations for each bucket.  Create a
weight bucketed version and a position bucketed version since
different measures are bucketed on different factors.

Instead of just creating a 5 pound bucket that each weight falls into,
for every individual weight create a bucket that includes the 2 pounds
above and below.

OUTPUT TABLES:
##temp_measures_avg_stdev_weight
##temp_measures_avg_stdev_position


----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_avg_stdev_weight exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_avg_stdev_weight') IS NOT NULL
	DROP TABLE ##temp_measures_avg_stdev_weight

    SELECT DISTINCT r1.[weight]
-----------Bench Press Work
	      ,CASE WHEN r1.[weight] < 180 OR r1.[weight] > 336 THEN NULL
		        WHEN r1.[weight] > 277 AND r1.[weight] < 291 THEN (SELECT AVG(bench_work_joules) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		        ELSE (SELECT AVG(bench_work_joules) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS bench_work_joules_mean
	      ,CASE WHEN r1.[weight] < 180 OR r1.[weight] > 336 THEN NULL
		        WHEN r1.[weight] > 277 AND r1.[weight] < 291 THEN (SELECT STDEVP(bench_work_joules) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		        ELSE (SELECT STDEVP(bench_work_joules) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS bench_work_joules_stdev
-----------Broad Jump
	      ,CASE WHEN r1.[weight] < 178 OR r1.[weight] > 332 THEN NULL
		        WHEN r1.[weight] > 277 AND r1.[weight] < 291 THEN (SELECT AVG(broad_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		        ELSE (SELECT AVG(broad_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS broad_jump_mean
	      ,CASE WHEN r1.[weight] < 178 OR r1.[weight] > 332 THEN NULL
		        WHEN r1.[weight] > 277 AND r1.[weight] < 291 THEN (SELECT STDEVP(broad_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		        ELSE (SELECT STDEVP(broad_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS broad_jump_stdev
-----------Vertical Jump
	      ,CASE WHEN r1.[weight] < 177 OR r1.[weight] > 332 THEN NULL
		        WHEN r1.[weight] > 277 AND r1.[weight] < 291 THEN (SELECT AVG(vertical_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		        ELSE (SELECT AVG(vertical_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS vertical_jump_mean
	      ,CASE WHEN r1.[weight] < 177 OR r1.[weight] > 332 THEN NULL
		        WHEN r1.[weight] > 277 AND r1.[weight] < 291 THEN (SELECT STDEVP(vertical_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 3 AND r1.[weight] <= r2.[weight] + 3) 
		        ELSE (SELECT STDEVP(vertical_jump) FROM ##temp_measures_with_extras r2 WHERE r1.[weight] >= r2.[weight] - 2 AND r1.[weight] <= r2.[weight] + 2) 
		   END AS vertical_jump_stdev
	  INTO ##temp_measures_avg_stdev_weight
      FROM ##temp_measures_with_extras r1
	 WHERE r1.[weight] >= 140
	   AND r1.[weight] <= 400
  ORDER BY r1.[weight]

--SELECT * FROM ##temp_measures_avg_stdev_weight


-- Check if ##temp_measures_avg_stdev_position exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_avg_stdev_position') IS NOT NULL
	DROP TABLE ##temp_measures_avg_stdev_position

    SELECT position
-----------Bench Press Work
	      ,AVG(height) AS height_mean
	      ,STDEVP(height) AS height_stdev
	      ,AVG([weight]) AS weight_mean
	      ,STDEVP([weight]) AS weight_stdev
	      ,AVG(arm_length) AS arm_length_mean
	      ,STDEVP(arm_length) AS arm_length_stdev
	      ,AVG(hand_size) AS hand_size_mean
	      ,STDEVP(hand_size) AS hand_size_stdev
	      ,AVG(wingspan) AS wingspan_mean
	      ,STDEVP(wingspan) AS wingspan_stdev
	      ,AVG(test_score) AS test_score_mean
	      ,STDEVP(test_score) AS test_score_stdev
	  INTO ##temp_measures_avg_stdev_position
      FROM ##temp_measures_with_extras 
	 WHERE position != 'KOR'
  GROUP BY position
  ORDER BY position

--SELECT * FROM ##temp_measures_avg_stdev_position


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the table with each player's measure z scores.  

OUTPUT TABLES:
##temp_meaures_with_z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_meaures_with_z exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_meaures_with_z') IS NOT NULL
	DROP TABLE ##temp_meaures_with_z

    SELECT ex.*
	      ,CASE WHEN workout_type = 'COMB' THEN 'COMB' ELSE 'NON' END AS combine_or_other
		  ,(height - height_mean) / height_stdev AS height_z_score
		  ,(ex.[weight] - weight_mean) / weight_stdev AS weight_z_score
		  ,(arm_length - arm_length_mean) / arm_length_stdev AS arm_length_z_score
		  ,(hand_size - hand_size_mean) / hand_size_stdev AS hand_size_z_score
		  ,(wingspan - wingspan_mean) / wingspan_stdev AS wingspan_z_score
		  ,(test_score - test_score_mean) / test_score_stdev AS test_score_z_score
		  ,(bench_work_joules - bench_work_joules_mean) / bench_work_joules_stdev AS bench_work_joules_z_score
		  ,(broad_jump - broad_jump_mean) / broad_jump_stdev AS broad_jump_z_score
		  ,(vertical_jump - vertical_jump_mean) / vertical_jump_stdev AS vertical_jump_z_score
		  ,VERTICAL_JUMP_MEAN
	  INTO ##temp_meaures_with_z
	  FROM ##temp_measures_with_extras ex
 LEFT JOIN ##temp_measures_avg_stdev_weight wt
        ON ex.[weight] = wt.[weight]
 LEFT JOIN ##temp_measures_avg_stdev_position pos
        ON ex.position = pos.position

--SELECT * FROM ##temp_meaures_with_z






----------haven't been able to figure out the exact SPARQ formula yet, this is a "best guess" based on other efforts to nail down the formula
		  ,161.1768022+([weight]*0.3114693)+(forty_time*-10.72725617)+(ten_time*-41.89231102)+(short_shuttle_time*-16.15717599)+(three_cone_time*-6.981575131)+(bench_reps*0.477821711)+(vertical_jump*1.266893465)+(broad_jump/12*6.691568906) as sparq_estimate

