


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for creating the advanced measurables.

It also finds similar players because many of the advanced
measurables are used in the SimScore model.

v13 goes to expected times and jumps

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available.  This is 
for bucketing for z scores for later on.

OUTPUT TABLES:
##temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions

    SELECT player_id
	      ,draft_year
	      ,position
		  ,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
		        WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
				WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
				ELSE NULL
		   END AS order_by
	 INTO ##temp_draft_board_positions
	 FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE position != '' AND position IS NOT NULL


-- Check if ##temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions_with_order

    SELECT player_id
	      ,draft_year
	      ,position
	      ,RANK() OVER (PARTITION BY player_id ORDER BY order_by) AS draft_board_position_order
	 INTO ##temp_draft_board_positions_with_order
	 FROM ##temp_draft_board_positions

--SELECT * FROM ##temp_draft_board_positions_with_order


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the master measurables table.

Variable workout_type_for_models:
1 - Combine Electronic
2 - Other Electronic
3 - Combine Handheld
4 - Other Handheld

OUTPUT TABLES:
##temp_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if temp_all_measurables exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_master') IS NOT NULL
	DROP TABLE ##temp_measurables_master

    SELECT wo.id AS workout_id
		  ,wo.[description] AS workout_description
		  ,CASE WHEN re.id = 1 THEN 1
		        WHEN re.id = 2 THEN 3
				WHEN re.id != 1 AND UPPER(re.[description]) LIKE '%ELECTRONIC%' THEN 2
				WHEN re.id IN (4,5) THEN 4
				WHEN re.id IS NULL THEN CASE WHEN wt.[type] = 'COMB' THEN 3 
											 WHEN wt.[type] IN ('RCOM','ALLS','APT','SRCO','PDAY','LW','PW') THEN 4
											 ELSE NULL
											 END
				ELSE NULL
		   END AS workout_type_for_models
	      ,wo.player_id
		  ,me.measurable_type_id
		  ,mt.code
		  ,CASE WHEN re.id IS NULL THEN CASE WHEN wt.[type] = 'COMB' THEN 2
		                                     WHEN wt.[type] IN ('RCOM','ALLS','APT','SRCO','PDAY') THEN 5
											 WHEN wt.[type] IN ('LW','PW') THEN 4
											 ELSE NULL
										END	  
		        ELSE re.id 
		   END AS reliability_id
		  ,me.order_by AS attempt
		  ,me.value AS value
		  /*,CASE WHEN mt.code='40YTime' THEN 
					CASE WHEN (re.id IN (4,5) OR (re.id IS NULL AND wt.[type] IN ('RCOM','ALLS','APT','SRCO','PDAY','LW','PW'))) THEN 0.03113 + 1.00245*value
						 ELSE value
					END
				WHEN mt.code='20YTime' THEN 
					CASE WHEN wo.player_id = 60416 AND wo.id = 602136 AND me.order_by = 3 THEN NULL --Remove Artie Burns' electronic 20 time of 3.01
						 WHEN (re.id IN (4,5) OR (re.id IS NULL AND wt.[type] IN ('RCOM','ALLS','APT','SRCO','PDAY','LW','PW'))) THEN 0.26234 + 0.89282*value
						 ELSE value
					END
				WHEN mt.code='10YTime' THEN 
					CASE WHEN (re.id IN (4,5) OR (re.id IS NULL AND wt.[type] IN ('RCOM','ALLS','APT','SRCO','PDAY','LW','PW'))) THEN 0.25743 + 0.85147*value
						 ELSE value
					END
				ELSE value
		   END AS value_adjusted*/
	  INTO ##temp_measurables_master
      FROM [BaneProductionAnalytics].[dbo].[workouts] wo
 LEFT JOIN [BaneProductionAnalytics].[dbo].[measurables] me
        ON wo.id=me.workout_id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[measurable_types] mt
		ON me.measurable_type_id=mt.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[player_workout_types] wt
		ON wo.player_workout_type_id=wt.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[reliabilities] re
		ON me.reliability_id=re.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
		ON wo.player_id=pl.id
	 WHERE (re.translation IN ('I','V','W') OR wt.[type] IN ('COMB','RCOM','ALLS','APT','SRCO','PDAY','LW','PW'))
	   AND NOT (wt.[type] = 'RPT' AND re.translation = 'I')
	   AND value IS NOT NULL
-------Next line is to take out workouts that come in regional combines / workouts after their draft years
	   AND NOT (YEAR(wo.[date]) > nfl_entry_year AND wt.[type] IN ('RCOM','SRCO','LW','PW'))
  ORDER BY wo.player_id
          ,wo.id
		  ,me.measurable_type_id
		  ,re.id

--SELECT * FROM ##temp_measurables_master where player_id = 47610 



UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='HgtCnv'
--and attempt=1
and workout_id IN (547502,592015,397108,601729,396168,547881,397493,396965,601729,601574,396312)

UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='Wgt'
--and attempt=1
and workout_id IN (396965,397493,396312,395490,542143,398131,396312)


UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='WSpanCnv'
--and attempt=1
and workout_id IN (601024,603980)


UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='40YTime'
--and attempt=4
and workout_id IN (394628)

UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='20YTime'
--and attempt=1
and (workout_id IN (395822,408102,403926,403457) OR (workout_id=602136 AND attempt=3))


UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='ArmLngCnv'
and attempt=1
and workout_id IN (398902,544479,396444,394267,601645,600287,398131,601645)

UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='HSpanCnv'
and attempt=1
and workout_id IN (394267,601645,600276,601645)

UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='20YShuttle'
and attempt=2
and workout_id IN (399462)

UPDATE ##temp_measurables_master
SET value = NULL
WHERE 
code='VertJumpCnv'
and workout_id IN (396586,396591)



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the 40, 20, and 10 Times so you can get Flying 10 and 20
from the same run.  You want to avoid taking his best 40, and
his best 20 from different runs to calculate his best flying 20.
Also pivot his other runs (Shuttles, etc.) so you can calculate
the advanced measurables.

Pivot the measures in a separate table (because you want MAXes
not MINs) and then join those, along with weight, to the above
pivot.  

When you join the tables together, bear in mind that the runs
will have more than one workout_type_for_models (because they
will have electronic times, too).  Since the measures (weight,
height, hand size) will only have handheld times, there will 
be duplicate rows for all of those (since they join to both 
the electronic and hand times).  That's the reason for the 
CASE statement in the join step.

You want to join the measures onto every attempt of the runs, 
but you need to be careful to not double count them later

If a player has two MEASURES of the same value, does he have duplicates during the pivot?
May need to try adding a second step that just does a group by and a max to get one row per max

OUTPUT TABLES:
##temp_advanced_pivot

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


-- Check if ##temp_runs_advanced_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_advanced_pivot') IS NOT NULL
	DROP TABLE ##temp_runs_advanced_pivot

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,reliability_id
		  ,attempt
	      ,[40YTime] AS dash_forty
	      ,[20YTime] AS dash_twenty
	      ,[10YTime] AS dash_ten
		  ,[20YShuttle] AS shuttle_short
		  ,[3Cone] AS three_cone
		  ,[60YShuttle] AS shuttle_long
	  INTO ##temp_runs_advanced_pivot
      FROM (
    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,code
		  ,reliability_id
		  ,attempt
		  ,value
      FROM ##temp_measurables_master WHERE code IN ('40YTime', '20YTime', '10YTime', '20YShuttle', '3Cone', '60YShuttle')) up
     PIVOT (MIN(value) FOR code IN ([40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle])) AS pvt
	 WHERE reliability_id IS NOT NULL
  ORDER BY player_id, workout_id

--SELECT * FROM ##temp_runs_advanced_pivot where WORKOUT_ID=539354

-- Check if ##temp_measures_advanced_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_advanced_pivot') IS NOT NULL
	DROP TABLE ##temp_measures_advanced_pivot

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,reliability_id
-----------Don't use attempt here, you're just taking the best measurements. You can't do that with the Dashes because the Flying Times need to be taken by attempt.
		  --,[Wgt] AS [weight]
	      ,[HgtCnv] AS height
	      ,[ArmLngCnv] AS arm_length
	      ,[WSpanCnv] AS wingspan
		  ,[HSpanCnv] AS hand_size
		  ,[BroadJumpCnv] AS jump_broad
		  ,[StrengthReps225] AS bench_reps
		  ,[VertJumpCnv] AS jump_vertical
		  ,[TestScore] AS test_score
	  INTO ##temp_measures_advanced_pivot
      FROM (
    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,reliability_id
		  ,code
		  ,value
      FROM ##temp_measurables_master WHERE code IN ('HgtCnv', 'ArmLngCnv', 'WSpanCnv', 'HSpanCnv', 'BroadJumpCnv','VertJumpCnv', 'StrengthReps225', 'TestScore')) up
     PIVOT (MAX(value) FOR code IN ([HgtCnv], [ArmLngCnv], [WSpanCnv], [HSpanCnv], [BroadJumpCnv],[VertJumpCnv], [StrengthReps225], [TestScore])) AS pvt
	 WHERE reliability_id IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_measures_advanced_pivot where player_id=4648


-- Check if ##temp_advanced_pivot_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_advanced_pivot_no_wgt') IS NOT NULL
	DROP TABLE ##temp_advanced_pivot_no_wgt

    SELECT COALESCE(ru.workout_id,me.workout_id) AS workout_id
		  ,COALESCE(ru.workout_description,me.workout_description) AS workout_description
		  ,COALESCE(ru.workout_type_for_models,me.workout_type_for_models) AS workout_type_for_models
	      ,COALESCE(ru.player_id,me.player_id) AS player_id
		  ,COALESCE(ru.reliability_id,me.reliability_id) AS reliability_id
		  ,attempt
	      ,dash_forty
	      ,dash_twenty
	      ,dash_ten
		  ,shuttle_short
		  ,three_cone
		  ,shuttle_long
	      --,[weight]
--There might be a better way to do this...just join them to every row but take the averages of the pivoted tables before the join?
	      ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE height END AS height
	      ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE arm_length END AS arm_length
	      ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE wingspan END AS wingspan
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE hand_size END AS hand_size
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE jump_broad END AS jump_broad
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE bench_reps END AS bench_reps
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE jump_vertical END AS jump_vertical
		  ,CASE WHEN ru.workout_type_for_models IN (1,2) THEN NULL ELSE test_score END AS test_score
	  INTO ##temp_advanced_pivot_no_wgt
      FROM ##temp_runs_advanced_pivot ru
 FULL JOIN ##temp_measures_advanced_pivot me
        ON ru.workout_id = me.workout_id
	   AND ru.workout_type_for_models=me.workout_type_for_models

--SELECT * FROM ##temp_advanced_pivot_no_wgt

 -- Check if ##temp_advanced_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_advanced_pivot') IS NOT NULL
	DROP TABLE ##temp_advanced_pivot

    SELECT nw.*
	      ,Value AS [weight]
	  INTO ##temp_advanced_pivot
	  FROM ##temp_advanced_pivot_no_wgt nw
 LEFT JOIN ##temp_measurables_master ma
        ON nw.workout_id = ma.workout_id
	   AND ma.code='Wgt'

 --SELECT * FROM ##temp_advanced_pivot


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a temp table for each of the measurables. By doing it
this way you can have a normalized table in the end.

Create a table with a player's actual vs expected, as well as a 
table with his actual vs expected as a percentage of expected.


OUTPUT TABLES:
##temp_flyings_ten
##temp_flyings_twenty
##temp_expecteds_forty
##temp_expecteds_forty_pct
##temp_expecteds_twenty
##temp_expecteds_twenty_pct
##temp_expecteds_ten
##temp_expecteds_ten_pct
##temp_expecteds_flyings_twenty
##temp_expecteds_flyings_twenty_pct
##temp_expecteds_flyings_ten
##temp_expecteds_flyings_ten_pct
##temp_expecteds_shuttle_short
##temp_expecteds_shuttle_short_pct
##temp_expecteds_shuttle_long
##temp_expecteds_shuttle_long_pct
##temp_expecteds_three_cone
##temp_expecteds_three_cone_pct
##temp_expecteds_jump_vertical
##temp_expecteds_jump_vertical_pct
##temp_expecteds_jump_broad
##temp_expecteds_jump_broad_pct
##temp_expecteds_bench_reps
##temp_expecteds_bench_reps_pct


----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*-------------------------------
Flying 10
-------------------------------*/

-- Check if ##temp_flyings_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_flyings_ten') IS NOT NULL
	DROP TABLE ##temp_flyings_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Flying10Time' AS code
		  ,reliability_id
		  ,attempt
	      ,(dash_twenty-dash_ten) AS value
	  INTO ##temp_flyings_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_twenty IS NOT NULL
	   AND dash_ten IS NOT NULL
  ORDER BY workout_id

  --select * from ##temp_flyings_ten

/*-------------------------------
Flying 20
-------------------------------*/

-- Check if ##temp_flyings_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_flyings_twenty') IS NOT NULL
	DROP TABLE ##temp_flyings_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'Flying20Time' AS code
		  ,reliability_id
		  ,attempt
	      ,(dash_forty-dash_twenty) AS value
	  INTO ##temp_flyings_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND dash_twenty IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_flyings_twenty


/*-------------------------------
Expected 40
-------------------------------*/

-- Check if ##temp_expecteds_forty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_forty') IS NOT NULL
	DROP TABLE ##temp_expecteds_forty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected40' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN dash_forty - (4.533 + [weight]*-0.003697 + POWER([weight],2)*0.00001894)
		        WHEN workout_type_for_models = 3 THEN dash_forty - (4.465 + [weight]*-0.003427 + POWER([weight],2)*0.00001838)
				WHEN workout_type_for_models = 4 THEN dash_forty - (4.678 + [weight]*-0.004928 + POWER([weight],2)*0.00002090)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_forty
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--select * from ##temp_expecteds_forty


/*-------------------------------
Expected 40 Percentage
-------------------------------*/

-- Check if ##temp_expecteds_forty_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_forty_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_forty_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected40Pct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN (dash_forty - (4.533 + [weight]*-0.003697 + POWER([weight],2)*0.00001894)) / (4.533 + [weight]*-0.003697 + POWER([weight],2)*0.00001894)
		        WHEN workout_type_for_models = 3 THEN (dash_forty - (4.465 + [weight]*-0.003427 + POWER([weight],2)*0.00001838)) / (4.465 + [weight]*-0.003427 + POWER([weight],2)*0.00001838)
				WHEN workout_type_for_models = 4 THEN (dash_forty - (4.678 + [weight]*-0.004928 + POWER([weight],2)*0.00002090)) / (4.678 + [weight]*-0.004928 + POWER([weight],2)*0.00002090)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_forty_pct
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

  --select * from ##temp_expecteds_forty_pct


/*-------------------------------
Expected 20
-------------------------------*/

-- Check if ##temp_expecteds_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_twenty') IS NOT NULL
	DROP TABLE ##temp_expecteds_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected20' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN dash_twenty - (2.609 + [weight]*-0.001984 + POWER([weight],2)*0.00001041)
		        WHEN workout_type_for_models = 3 THEN dash_twenty - (2.588 + [weight]*-0.002071 + POWER([weight],2)*0.00001052)
				WHEN workout_type_for_models = 4 THEN dash_twenty - (2.788 + [weight]*-0.003426 + POWER([weight],2)*0.00001304)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_twenty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--select * from ##temp_expecteds_twenty


/*-------------------------------
Expected 20 Percent
-------------------------------*/

-- Check if ##temp_expecteds_twenty_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_twenty_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_twenty_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected20Pct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN (dash_twenty - (2.609 + [weight]*-0.001984 + POWER([weight],2)*0.00001041)) / (2.609 + [weight]*-0.001984 + POWER([weight],2)*0.00001041)
		        WHEN workout_type_for_models = 3 THEN (dash_twenty - (2.588 + [weight]*-0.002071 + POWER([weight],2)*0.00001052)) / (2.588 + [weight]*-0.002071 + POWER([weight],2)*0.00001052)
				WHEN workout_type_for_models = 4 THEN (dash_twenty - (2.788 + [weight]*-0.003426 + POWER([weight],2)*0.00001304)) / (2.788 + [weight]*-0.003426 + POWER([weight],2)*0.00001304)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_twenty_pct
      FROM ##temp_advanced_pivot
	 WHERE dash_twenty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--select * from ##temp_expecteds_twenty_pct


/*-------------------------------
Expected 10
-------------------------------*/

-- Check if ##temp_expecteds_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_ten') IS NOT NULL
	DROP TABLE ##temp_expecteds_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected10' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN dash_ten - (1.656 + [weight]*-0.001855 + POWER([weight],2)*0.000007444)
		        WHEN workout_type_for_models = 3 THEN dash_ten - (1.615 + [weight]*-0.001709 + POWER([weight],2)*0.000007193)
				WHEN workout_type_for_models = 4 THEN dash_ten - (1.687 + [weight]*-0.002106 + POWER([weight],2)*0.000007875)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--select * from ##temp_expecteds_ten


/*-------------------------------
Expected 10 Percent
-------------------------------*/

-- Check if ##temp_expecteds_ten_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_ten_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_ten_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected10Pct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN (dash_ten - (1.656 + [weight]*-0.001855 + POWER([weight],2)*0.000007444)) / (1.656 + [weight]*-0.001855 + POWER([weight],2)*0.000007444)
		        WHEN workout_type_for_models = 3 THEN (dash_ten - (1.615 + [weight]*-0.001709 + POWER([weight],2)*0.000007193)) / (1.615 + [weight]*-0.001709 + POWER([weight],2)*0.000007193)
				WHEN workout_type_for_models = 4 THEN (dash_ten - (1.687 + [weight]*-0.002106 + POWER([weight],2)*0.000007875)) / (1.687 + [weight]*-0.002106 + POWER([weight],2)*0.000007875)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_ten_pct
      FROM ##temp_advanced_pivot
	 WHERE dash_ten IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--select * from ##temp_expecteds_ten_pct


/*-------------------------------
Expected Flying 20
-------------------------------*/

-- Check if ##temp_expecteds_flyings_twenty exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_flyings_twenty') IS NOT NULL
	DROP TABLE ##temp_expecteds_flyings_twenty

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedFlying20' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN ((dash_forty-dash_twenty) - (1.893 + [weight]*-0.001690 + POWER([weight],2)*0.000008531))
		        WHEN workout_type_for_models = 3 THEN ((dash_forty-dash_twenty) - (1.825 + [weight]*-0.001298 + POWER([weight],2)*0.000007679))
				WHEN workout_type_for_models = 4 THEN ((dash_forty-dash_twenty) - (1.687 + [weight]*-0.002068 + POWER([weight],2)*0.000009071))
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_flyings_twenty
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_flyings_twenty


/*-------------------------------
Expected Flying 20
-------------------------------*/

-- Check if ##temp_expecteds_flyings_twenty_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_flyings_twenty_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_flyings_twenty_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedFlying20Pct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN ((dash_forty-dash_twenty) - (1.893 + [weight]*-0.001690 + POWER([weight],2)*0.000008531)) / (1.893 + [weight]*-0.001690 + POWER([weight],2)*0.000008531)
		        WHEN workout_type_for_models = 3 THEN ((dash_forty-dash_twenty) - (1.825 + [weight]*-0.001298 + POWER([weight],2)*0.000007679)) / (1.825 + [weight]*-0.001298 + POWER([weight],2)*0.000007679)
				WHEN workout_type_for_models = 4 THEN ((dash_forty-dash_twenty) - (1.687 + [weight]*-0.002068 + POWER([weight],2)*0.000009071)) / (1.687 + [weight]*-0.002068 + POWER([weight],2)*0.000009071)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_flyings_twenty_pct
      FROM ##temp_advanced_pivot
	 WHERE dash_forty IS NOT NULL
	   AND dash_twenty IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_flyings_twenty_pct


/*-------------------------------
Expected Flying 10
-------------------------------*/

-- Check if ##temp_expecteds_flyings_ten exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_flyings_ten') IS NOT NULL
	DROP TABLE ##temp_expecteds_flyings_ten

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedFlying10' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN ((dash_twenty-dash_ten) - (0.09607 + [weight]*-0.0003077 + POWER([weight],2)*0.000003281))
		        WHEN workout_type_for_models = 3 THEN ((dash_twenty-dash_ten) - (0.09275 + [weight]*-0.0002904 + POWER([weight],2)*0.000003186))
				WHEN workout_type_for_models = 4 THEN ((dash_twenty-dash_ten) - (1.020 + [weight]*-0.0007839 + POWER([weight],2)*0.000004071)) 
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_flyings_ten
      FROM ##temp_advanced_pivot
	 WHERE dash_twenty IS NOT NULL
	   AND dash_ten IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_flyings_ten


/*-------------------------------
Expected Flying 10
-------------------------------*/

-- Check if ##temp_expecteds_flyings_ten_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_flyings_ten_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_flyings_ten_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedFlying10Pct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 1 THEN ((dash_twenty-dash_ten) - (0.09607 + [weight]*-0.0003077 + POWER([weight],2)*0.000003281)) / (0.09607 + [weight]*-0.0003077 + POWER([weight],2)*0.000003281)
		        WHEN workout_type_for_models = 3 THEN ((dash_twenty-dash_ten) - (0.09275 + [weight]*-0.0002904 + POWER([weight],2)*0.000003186)) / (0.09275 + [weight]*-0.0002904 + POWER([weight],2)*0.000003186)
				WHEN workout_type_for_models = 4 THEN ((dash_twenty-dash_ten) - (1.020 + [weight]*-0.0007839 + POWER([weight],2)*0.000004071)) / (1.020 + [weight]*-0.0007839 + POWER([weight],2)*0.000004071)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_flyings_ten_pct
      FROM ##temp_advanced_pivot
	 WHERE dash_twenty IS NOT NULL
	   AND dash_ten IS NOT NULL
	   AND [weight] IS NOT NULL
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_flyings_ten_pct


/*-------------------------------
Expected Short Shuttle
-------------------------------*/

-- Check if ##temp_expecteds_shuttle_short exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_shuttle_short') IS NOT NULL
	DROP TABLE ##temp_expecteds_shuttle_short

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedShuttleShort' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (shuttle_short - (4.673 + [weight]*-0.006757 + POWER([weight],2)*0.00002197))
				WHEN workout_type_for_models = 4 THEN (shuttle_short - (4.660 + [weight]*-0.005608 + POWER([weight],2)*0.00001906)) 
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_shuttle_short
      FROM ##temp_advanced_pivot
	 WHERE shuttle_short IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_shuttle_short


/*-------------------------------
Expected Short Shuttle Percent
-------------------------------*/

-- Check if ##temp_expecteds_shuttle_short_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_shuttle_short_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_shuttle_short_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedShuttleShortPct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (shuttle_short - (4.673 + [weight]*-0.006757 + POWER([weight],2)*0.00002197)) / (4.673 + [weight]*-0.006757 + POWER([weight],2)*0.00002197)
				WHEN workout_type_for_models = 4 THEN (shuttle_short - (4.660 + [weight]*-0.005608 + POWER([weight],2)*0.00001906)) / (4.660 + [weight]*-0.005608 + POWER([weight],2)*0.00001906) 
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_shuttle_short_pct
      FROM ##temp_advanced_pivot
	 WHERE shuttle_short IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_shuttle_short_pct


/*-------------------------------
Expected Long Shuttle
-------------------------------*/

-- Check if ##temp_expecteds_shuttle_long exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_shuttle_long') IS NOT NULL
	DROP TABLE ##temp_expecteds_shuttle_long

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedShuttleLong' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (shuttle_long - (11.290 + [weight]*-0.004624 + POWER([weight],2)*0.00002703))
				WHEN workout_type_for_models = 4 THEN (shuttle_long - (11.650 + [weight]*-0.006317 + POWER([weight],2)*0.00003050))
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_shuttle_long
      FROM ##temp_advanced_pivot
	 WHERE shuttle_long IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_shuttle_long


/*-------------------------------
Expected Long Shuttle Percent
-------------------------------*/

-- Check if ##temp_expecteds_shuttle_long_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_shuttle_long_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_shuttle_long_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpectedShuttleLongPct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (shuttle_long - (11.290 + [weight]*-0.004624 + POWER([weight],2)*0.00002703)) / (11.290 + [weight]*-0.004624 + POWER([weight],2)*0.00002703)
				WHEN workout_type_for_models = 4 THEN (shuttle_long - (11.650 + [weight]*-0.006317 + POWER([weight],2)*0.00003050)) / (11.650 + [weight]*-0.006317 + POWER([weight],2)*0.00003050)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_shuttle_long_pct
      FROM ##temp_advanced_pivot
	 WHERE shuttle_long IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_shuttle_long_pct


/*-------------------------------
Expected Three Cone
-------------------------------*/

-- Check if ##temp_expecteds_three_cone exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_three_cone') IS NOT NULL
	DROP TABLE ##temp_expecteds_three_cone

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected3Cone' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (three_cone - (8.025 + [weight]*-0.013320 + POWER([weight],2)*0.00004029))
				WHEN workout_type_for_models = 4 THEN (three_cone - (7.458 + [weight]*-0.007907 + POWER([weight],2)*0.00002817))
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_three_cone
      FROM ##temp_advanced_pivot
	 WHERE three_cone IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_three_cone


/*-------------------------------
Expected Three Cone Percent
-------------------------------*/

-- Check if ##temp_expecteds_three_cone_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_three_cone_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_three_cone_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'BelowExpected3ConePct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (three_cone - (8.025 + [weight]*-0.013320 + POWER([weight],2)*0.00004029)) / (8.025 + [weight]*-0.013320 + POWER([weight],2)*0.00004029)
				WHEN workout_type_for_models = 4 THEN (three_cone - (7.458 + [weight]*-0.007907 + POWER([weight],2)*0.00002817)) / (7.458 + [weight]*-0.007907 + POWER([weight],2)*0.00002817)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_three_cone_pct
      FROM ##temp_advanced_pivot
	 WHERE three_cone IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_three_cone_pct


/*-------------------------------
Expected Vertical Jump
-------------------------------*/

-- Check if ##temp_expecteds_jump_vertical exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_jump_vertical') IS NOT NULL
	DROP TABLE ##temp_expecteds_jump_vertical

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'AboveExpectedVert' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (jump_vertical - (29.8900000 + [weight]*0.0813900 + POWER([weight],2)*-0.0002752))
				WHEN workout_type_for_models = 4 THEN (jump_vertical - (35.2762608 + [weight]*0.0345267 + POWER([weight],2)*-0.0001840))
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_jump_vertical
      FROM ##temp_advanced_pivot
	 WHERE jump_vertical IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_jump_vertical


/*-------------------------------
Expected Vertical Jump Percent
-------------------------------*/

-- Check if ##temp_expecteds_jump_vertical_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_jump_vertical_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_jump_vertical_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'AboveExpectedVertPct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (jump_vertical - (29.8900000 + [weight]*0.0813900 + POWER([weight],2)*-0.0002752)) / (29.8900000 + [weight]*0.0813900 + POWER([weight],2)*-0.0002752)
				WHEN workout_type_for_models = 4 THEN (jump_vertical - (35.2762608 + [weight]*0.0345267 + POWER([weight],2)*-0.0001840)) / (35.2762608 + [weight]*0.0345267 + POWER([weight],2)*-0.0001840)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_jump_vertical_pct
      FROM ##temp_advanced_pivot
	 WHERE jump_vertical IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_jump_vertical_pct


/*-------------------------------
Expected Broad Jump
-------------------------------*/

-- Check if ##temp_expecteds_jump_broad exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_jump_broad') IS NOT NULL
	DROP TABLE ##temp_expecteds_jump_broad

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'AboveExpectedBroad' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (jump_broad - (-58.520 + [weight]*0.12760 + POWER([weight],2)*-0.0005728 + height*4.408000 + POWER(height,2)*-0.02728))
				WHEN workout_type_for_models = 4 THEN (jump_broad - (106.700 + [weight]*0.08065 + POWER([weight],2)*-0.0004781 + height*-0.06640 + POWER(height,2)*0.004061))
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_jump_broad
      FROM ##temp_advanced_pivot
	 WHERE jump_broad IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND height IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_jump_broad where workout_id=396131

--select * from ##temp_advanced_pivot where workout_id=396131

/*-------------------------------
Expected Broad Jump Percent
-------------------------------*/

-- Check if ##temp_expecteds_jump_broad_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_jump_broad_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_jump_broad_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'AboveExpectedBroadPct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (jump_broad - (-58.520 + [weight]*0.12760 + POWER([weight],2)*-0.0005728 + height*4.408000 + POWER(height,2)*-0.02728)) / (-58.520 + [weight]*0.12760 + POWER([weight],2)*-0.0005728 + height*4.408000 + POWER(height,2)*-0.02728)
				WHEN workout_type_for_models = 4 THEN (jump_broad - (106.700 + [weight]*0.08065 + POWER([weight],2)*-0.0004781 + height*-0.06640 + POWER(height,2)*0.004061)) / (106.700 + [weight]*0.08065 + POWER([weight],2)*-0.0004781 + height*-0.06640 + POWER(height,2)*0.004061)
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_jump_broad_pct
      FROM ##temp_advanced_pivot
	 WHERE jump_broad IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND height IS NOT NULL
	   AND attempt IN (1,2)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_jump_broad_pct


/*-------------------------------
Expected Bench Reps
-------------------------------*/

-- Check if ##temp_expecteds_bench_reps exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_bench_reps') IS NOT NULL
	DROP TABLE ##temp_expecteds_bench_reps

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'AboveExpectedBenchReps' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (bench_reps - (18.70 + [weight]*0.5598 + POWER([weight],2)*-0.0008353 + height*-1.229 + POWER(height,2)*0.002790 + arm_length*-0.2426)) 
				WHEN workout_type_for_models = 4 THEN (bench_reps - (214.6 + [weight]*0.6882 + POWER([weight],2)*-0.0010870 + height*-6.949 + POWER(height,2)*0.040670 + arm_length*-0.1797)) 
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_bench_reps
      FROM ##temp_advanced_pivot
	 WHERE bench_reps IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND height IS NOT NULL
	   AND attempt IN (1)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_bench_reps


/*-------------------------------
Expected Bench Reps Percent
-------------------------------*/

-- Check if ##temp_expecteds_bench_reps_pct exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_expecteds_bench_reps_pct') IS NOT NULL
	DROP TABLE ##temp_expecteds_bench_reps_pct

    SELECT workout_id
		  ,workout_description
		  ,workout_type_for_models
	      ,player_id
		  ,NULL AS measurable_type_id
		  ,'AboveExpectedBenchRepsPct' AS code
		  ,reliability_id
		  ,attempt
	      ,CASE WHEN workout_type_for_models = 3 THEN (bench_reps - (18.70 + [weight]*0.5598 + POWER([weight],2)*-0.0008353 + height*-1.229 + POWER(height,2)*0.002790 + arm_length*-0.2426)) / ((18.70 + [weight]*0.5598 + POWER([weight],2)*-0.0008353 + height*-1.229 + POWER(height,2)*0.002790 + arm_length*-0.2426))
				WHEN workout_type_for_models = 4 THEN (bench_reps - (214.6 + [weight]*0.6882 + POWER([weight],2)*-0.0010870 + height*-6.949 + POWER(height,2)*0.040670 + arm_length*-0.1797)) / ((214.6 + [weight]*0.6882 + POWER([weight],2)*-0.0010870 + height*-6.949 + POWER(height,2)*0.040670 + arm_length*-0.1797))
				ELSE NULL
		   END AS value
	  INTO ##temp_expecteds_bench_reps_pct
      FROM ##temp_advanced_pivot
	 WHERE bench_reps IS NOT NULL
	   AND [weight] IS NOT NULL
	   AND height IS NOT NULL
	   AND attempt IN (1)
  ORDER BY workout_id

--SELECT * FROM ##temp_expecteds_bench_reps_pct


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append all the Advanced Measurables to the Master 
measurables table.

OUTPUT TABLES:
##temp_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_flyings_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_flyings_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_flyings_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_forty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_forty_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_twenty_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_ten_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_flyings_twenty

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_flyings_twenty_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_flyings_ten

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_flyings_ten_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_shuttle_short

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_shuttle_short_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_shuttle_long

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_shuttle_long_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_three_cone

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_three_cone_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_jump_vertical

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_jump_vertical_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_jump_broad

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_jump_broad_pct

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_bench_reps

INSERT INTO ##temp_measurables_master
	SELECT *
	  FROM ##temp_expecteds_bench_reps_pct

--SELECT * FROM ##temp_measurables_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Order his individual workout times so you get the best time from
a given workout. Create a variable so you can look up the best
time for a given workout, for a given model workout type, for 
a given reliability, and for overall best.

OUTPUT TABLES:

##temp_measurables_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measurables_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_with_order') IS NOT NULL
	DROP TABLE ##temp_measurables_with_order

    SELECT *
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BelowExpected40','BelowExpected40Pct','BelowExpected20','BelowExpected20Pct','BelowExpected10','BelowExpected10Pct','BelowExpectedFlying10','BelowExpectedFlying10Pct','BelowExpectedFlying20','BelowExpectedFlying20Pct','BelowExpectedShuttleShort','BelowExpectedShuttleShortPct','BelowExpectedShuttleLong','BelowExpectedShuttleLongPct','BelowExpected3Cone','BelowExpected3ConePct') THEN RANK() OVER (PARTITION BY workout_id, code ORDER BY value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY workout_id, code ORDER BY value DESC, attempt DESC)
		   END AS measurable_order_by_workout
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BelowExpected40','BelowExpected40Pct','BelowExpected20','BelowExpected20Pct','BelowExpected10','BelowExpected10Pct','BelowExpectedFlying10','BelowExpectedFlying10Pct','BelowExpectedFlying20','BelowExpectedFlying20Pct','BelowExpectedShuttleShort','BelowExpectedShuttleShortPct','BelowExpectedShuttleLong','BelowExpectedShuttleLongPct','BelowExpected3Cone','BelowExpected3ConePct') THEN RANK() OVER (PARTITION BY player_id, reliability_id, code ORDER BY value, attempt DESC)
		        ELSE RANK() OVER (PARTITION BY player_id, reliability_id, code ORDER BY value DESC, attempt DESC)
		   END AS measurable_order_by_reliability
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BelowExpected40','BelowExpected40Pct','BelowExpected20','BelowExpected20Pct','BelowExpected10','BelowExpected10Pct','BelowExpectedFlying10','BelowExpectedFlying10Pct','BelowExpectedFlying20','BelowExpectedFlying20Pct','BelowExpectedShuttleShort','BelowExpectedShuttleShortPct','BelowExpectedShuttleLong','BelowExpectedShuttleLongPct','BelowExpected3Cone','BelowExpected3ConePct') THEN RANK() OVER (PARTITION BY player_id, workout_type_for_models, code ORDER BY value, attempt DESC, workout_id)
		        ELSE RANK() OVER (PARTITION BY player_id, workout_type_for_models, code ORDER BY value DESC, attempt DESC, workout_id)
		   END AS measurable_order_by_model_type
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BelowExpected40','BelowExpected40Pct','BelowExpected20','BelowExpected20Pct','BelowExpected10','BelowExpected10Pct','BelowExpectedFlying10','BelowExpectedFlying10Pct','BelowExpectedFlying20','BelowExpectedFlying20Pct','BelowExpectedShuttleShort','BelowExpectedShuttleShortPct','BelowExpectedShuttleLong','BelowExpectedShuttleLongPct','BelowExpected3Cone','BelowExpected3ConePct') THEN RANK() OVER (PARTITION BY player_id, code ORDER BY value, attempt DESC, workout_type_for_models, workout_id, attempt)
		        ELSE RANK() OVER (PARTITION BY player_id, code ORDER BY value DESC, attempt DESC, workout_type_for_models, workout_id, attempt)
		   END AS measurable_order_all
		  ,CASE WHEN code IN ('40YTime','20YTime','10YTime','20YShuttle','3Cone','60YShuttle','Flying10Time','Flying20Time','BelowExpected40','BelowExpected40Pct','BelowExpected20','BelowExpected20Pct','BelowExpected10','BelowExpected10Pct','BelowExpectedFlying10','BelowExpectedFlying10Pct','BelowExpectedFlying20','BelowExpectedFlying20Pct','BelowExpectedShuttleShort','BelowExpectedShuttleShortPct','BelowExpectedShuttleLong','BelowExpectedShuttleLongPct','BelowExpected3Cone','BelowExpected3ConePct') THEN RANK() OVER (PARTITION BY player_id, code ORDER BY reliability_id, value, attempt DESC, workout_type_for_models, workout_id, attempt)
		        ELSE RANK() OVER (PARTITION BY player_id, code ORDER BY reliability_id, value DESC, attempt DESC, workout_type_for_models, workout_id, attempt)
		   END AS measurable_order_all_with_reliabilty
      INTO ##temp_measurables_with_order
      FROM ##temp_measurables_master
  ORDER BY player_id
          ,workout_id
		  ,code

--SELECT * FROM ##temp_measurables_with_order where player_id=34960


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the expected run measurables table

The reason you have to join weight in on a separate table is there is 
no such thing as an "Indy Electronic" or "Other Electronic" weight.
Because the weight is handheld, if you pivot with weight the electronic 
times will not have an associated weight.

OUTPUT TABLES:
##temp_runs_player_model_type_best

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_player_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_player_no_wgt') IS NOT NULL
	DROP TABLE ##temp_runs_player_no_wgt

    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
	      --,Wgt AS [weight]
	      ,[40YTime] AS dash_forty
	      ,[20YTime] AS dash_twenty
	      ,[10YTime] AS dash_ten
		  ,[20YShuttle] AS shuttle_short
		  ,[3Cone] AS three_cone
		  ,[60YShuttle] AS shuttle_long
		  ,[Flying10Time] AS flying_ten
		  ,[Flying20Time] AS flying_twenty
	      ,[BelowExpected40] AS dash_forty_below_expected
		  ,[BelowExpected40Pct] AS dash_forty_below_expected_pct
		  ,[BelowExpected20] AS dash_twenty_below_expected
		  ,[BelowExpected20Pct] AS dash_twenty_below_expected_pct
		  ,[BelowExpected10] AS dash_ten_below_expected
		  ,[BelowExpected10Pct] AS dash_ten_below_expected_pct
		  ,[BelowExpectedFlying10] AS flying_ten_below_expected
		  ,[BelowExpectedFlying10Pct] AS flying_ten_below_expected_pct
		  ,[BelowExpectedFlying20] AS flying_twenty_below_expected
		  ,[BelowExpectedFlying20Pct] AS flying_twenty_below_expected_pct
		  ,[BelowExpectedShuttleShort] AS shuttle_short_below_expected
		  ,[BelowExpectedShuttleShortPct] AS shuttle_short_below_expected_pct
		  ,[BelowExpectedShuttleLong] AS shuttle_long_below_expected
		  ,[BelowExpectedShuttleLongPct] AS shuttle_long_below_expected_pct
		  ,[BelowExpected3Cone] AS three_cone_below_expected
		  ,[BelowExpected3ConePct] AS three_cone_below_expected_pct
	  INTO ##temp_runs_player_no_wgt
      FROM (
    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
		  ,measurable_order_by_workout
		  ,code
		  ,value
      FROM ##temp_measurables_with_order WHERE code IN ('40YTime', '20YTime', '10YTime', '20YShuttle', '3Cone', '60YShuttle', 'Flying10Time', 'Flying20Time','BelowExpected40','BelowExpected40Pct','BelowExpected20','BelowExpected20Pct','BelowExpected10','BelowExpected10Pct','BelowExpectedFlying10','BelowExpectedFlying10Pct','BelowExpectedFlying20','BelowExpectedFlying20Pct','BelowExpectedShuttleShort','BelowExpectedShuttleShortPct','BelowExpectedShuttleLong','BelowExpectedShuttleLongPct','BelowExpected3Cone','BelowExpected3ConePct')) up
     PIVOT (MIN(value) FOR code IN ([40YTime], [20YTime], [10YTime], [20YShuttle], [3Cone], [60YShuttle], [Flying10Time], [Flying20Time],[BelowExpected40],[BelowExpected40Pct],[BelowExpected20],[BelowExpected20Pct],[BelowExpected10],[BelowExpected10Pct],[BelowExpectedFlying10],[BelowExpectedFlying10Pct],[BelowExpectedFlying20],[BelowExpectedFlying20Pct],[BelowExpectedShuttleShort],[BelowExpectedShuttleShortPct],[BelowExpectedShuttleLong],[BelowExpectedShuttleLongPct],[BelowExpected3Cone],[BelowExpected3ConePct])) AS pvt
	 WHERE measurable_order_by_workout=1
  ORDER BY player_id, workout_id  

 --SELECT * FROM ##temp_runs_player_no_wgt


 -- Check if ##temp_runs_player_model_type_best exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_player_model_type_best') IS NOT NULL
	DROP TABLE ##temp_runs_player_model_type_best

    SELECT nw.*
	      ,Value AS [weight]
	  INTO ##temp_runs_player_model_type_best
	  FROM ##temp_runs_player_no_wgt nw
INNER JOIN ##temp_measurables_with_order wo
        ON nw.workout_id = wo.workout_id
	   AND wo.code='Wgt'

 --SELECT * FROM ##temp_runs_player_model_type_best


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Non-Run Expected Measurables Table

You join in weight in a second step for the same reason as 
the above sections that pivot workout data similarly.

OUTPUT TABLES:
##temp_measures_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measures_master_no_wgt exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_master_no_wgt') IS NOT NULL
	DROP TABLE ##temp_measures_master_no_wgt

    SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
	      ,[HgtCnv] AS height
	      ,[ArmLngCnv] AS arm_length
	      ,[WSpanCnv] AS wingspan
		  ,[HSpanCnv] AS hand_size
		  ,[BroadJumpCnv] AS jump_broad
		  ,[StrengthReps225] AS bench_reps
		  ,[VertJumpCnv] AS jump_vertical
		  ,[TestScore] AS test_score
		  ,[AboveExpectedVert] AS jump_vertical_above_expected
		  ,[AboveExpectedVertPct] AS jump_vertical_above_expected_pct
		  ,[AboveExpectedBroad] AS jump_broad_above_expected
		  ,[AboveExpectedBroadPct] AS jump_broad_above_expected_pct
		  ,[AboveExpectedBenchReps] AS bench_reps_above_expected
		  ,[AboveExpectedBenchRepsPct] AS bench_reps_above_expected_pct
	  INTO ##temp_measures_master_no_wgt
      FROM (
      SELECT player_id
	      ,workout_id
		  ,workout_type_for_models
		  ,measurable_order_by_workout=1
		  ,code
		  ,value
      FROM ##temp_measurables_with_order WHERE code IN ('HgtCnv', 'ArmLngCnv', 'WSpanCnv', 'HSpanCnv', 'BroadJumpCnv', 'StrengthReps225', 'VertJumpCnv', 'TestScore', 'AboveExpectedVert', 'AboveExpectedVertPct', 'AboveExpectedBroad', 'AboveExpectedBroadPct', 'AboveExpectedBenchReps', 'AboveExpectedBenchRepsPct')) up
     PIVOT (MAX(value) FOR code IN ([HgtCnv], [ArmLngCnv], [WSpanCnv], [HSpanCnv], [BroadJumpCnv], [StrengthReps225], [VertJumpCnv], [TestScore], [AboveExpectedVert], [AboveExpectedVertPct], [AboveExpectedBroad], [AboveExpectedBroadPct], [AboveExpectedBenchReps], [AboveExpectedBenchRepsPct])) AS pvt
	 WHERE measurable_order_by_workout=1
  ORDER BY player_id, workout_id
  
 --SELECT * FROM ##temp_measures_master_no_wgt


  -- Check if ##temp_measures_master exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measures_master') IS NOT NULL
	DROP TABLE ##temp_measures_master

    SELECT nw.*
	      ,Value AS [weight]
	  INTO ##temp_measures_master
	  FROM ##temp_measures_master_no_wgt nw
INNER JOIN ##temp_measurables_with_order wo
        ON nw.workout_id = wo.workout_id
	   AND wo.code='Wgt'
  ORDER BY player_id, workout_id

 --SELECT * FROM ##temp_measures_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Unpivot the best runs and measures.

OUTPUT TABLES:
##temp_runs_best_unpivot
##temp_measures_best_unpivot

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_best_unpivot exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_runs_best_unpivot') IS NOT NULL
		DROP TABLE ##temp_runs_best_unpivot

	SELECT player_id
		  ,workout_type_for_models
		  ,me.code
		  ,me.value
	  INTO ##temp_runs_best_unpivot
      FROM ##temp_runs_player_model_type_best
   UNPIVOT (value FOR code IN ([weight]
                              ,dash_forty
							  ,dash_twenty
							  ,dash_ten
							  ,shuttle_short
							  ,three_cone
							  ,shuttle_long
							  ,flying_ten
							  ,flying_twenty
							  ,dash_forty_below_expected
							  ,dash_forty_below_expected_pct
							  ,dash_twenty_below_expected
							  ,dash_twenty_below_expected_pct
							  ,dash_ten_below_expected
							  ,dash_ten_below_expected_pct
							  ,flying_ten_below_expected
							  ,flying_ten_below_expected_pct
							  ,flying_twenty_below_expected
							  ,flying_twenty_below_expected_pct
							  ,shuttle_short_below_expected
							  ,shuttle_short_below_expected_pct
							  ,shuttle_long_below_expected
							  ,shuttle_long_below_expected_pct
							  ,three_cone_below_expected
							  ,three_cone_below_expected_pct
							   )) AS me

--SELECT * FROM ##temp_runs_best_unpivot


-- Check if ##temp_measures_best_unpivot exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_measures_best_unpivot') IS NOT NULL
		DROP TABLE ##temp_measures_best_unpivot

	SELECT player_id
		  ,workout_type_for_models
		  ,me.code
		  ,me.value
	  INTO ##temp_measures_best_unpivot
      FROM ##temp_measures_master
   UNPIVOT (value FOR code IN (height
                              ,[weight]
                              ,arm_length
                              ,wingspan
                              ,hand_size
                              ,jump_broad
                              ,bench_reps
                              ,jump_vertical
                              ,test_score
                              ,jump_vertical_above_expected
                              ,jump_vertical_above_expected_pct
                              ,jump_broad_above_expected
                              ,jump_broad_above_expected_pct
                              ,bench_reps_above_expected
                              ,bench_reps_above_expected_pct
							   )) AS me

--SELECT * FROM ##temp_measures_best_unpivot


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the Best Measurables Master Table.

This is a (somewhat) normalized tables similar in structure
to the original measurables table, but it only includes a
player's best value for each measurable for each workout_type_for_models.

OUTPUT TABLES:
##temp_advanced_measurables_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_advanced_measurables_master exists, if it does drop it
	IF OBJECT_ID('tempdb..##temp_advanced_measurables_master') IS NOT NULL
		DROP TABLE ##temp_advanced_measurables_master

	SELECT *
	  INTO ##temp_advanced_measurables_master
	  FROM ##temp_measures_best_unpivot

INSERT INTO ##temp_advanced_measurables_master
	SELECT *
	  FROM ##temp_runs_best_unpivot

--SELECT * FROM ##temp_advanced_measurables_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

If a player has combine measurables, use those.  If he does
not have combine measurables, use his pro day measurables
but include a dummy to represent that it comes from a pro day.

Order each measurable by workout_type_for_models so you can always
take where order is one. Also add the dummy variable here.

OUTPUT TABLES:
##temp_advanced_measurables_master_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_advanced_measurables_master_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_advanced_measurables_master_with_order') IS NOT NULL
	DROP TABLE ##temp_advanced_measurables_master_with_order

    SELECT *
		  ,RANK() OVER (PARTITION BY player_id, code ORDER BY workout_type_for_models) AS order_for_models
		  ,CASE WHEN workout_type_for_models IN (1,2) THEN 1 ELSE 0 END AS electronic
	  INTO ##temp_advanced_measurables_master_with_order
	  FROM ##temp_advanced_measurables_master

--SELECT * FROM ##temp_advanced_measurables_master_with_order


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the previous table so you can have one row for every
player with his best value in every measurable and advanced
field in one row, along with a dummy representing if it is 
electronic or not.

You do two pivots - one to get the value, one to get the
electronic variable.  Then join the two tables.

OUTPUT TABLES:
##temp_measurables_for_modeling

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measurables_for_modeling_values exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_for_modeling_values') IS NOT NULL
	DROP TABLE ##temp_measurables_for_modeling_values

    SELECT player_id
	       ,height
	       ,[weight]
	       ,dash_forty
	       ,dash_twenty
	       ,dash_ten
	       ,shuttle_short
	       ,three_cone
	       ,shuttle_long
	       ,flying_ten
	       ,flying_twenty
	       ,dash_forty_below_expected
	       ,dash_forty_below_expected_pct
	       ,dash_twenty_below_expected
	       ,dash_twenty_below_expected_pct
	       ,dash_ten_below_expected
	       ,dash_ten_below_expected_pct
	       ,flying_ten_below_expected
	       ,flying_ten_below_expected_pct
	       ,flying_twenty_below_expected
	       ,flying_twenty_below_expected_pct
	       ,shuttle_short_below_expected
	       ,shuttle_short_below_expected_pct
	       ,shuttle_long_below_expected
	       ,shuttle_long_below_expected_pct
	       ,three_cone_below_expected
	       ,three_cone_below_expected_pct
	       ,arm_length
	       ,wingspan
	       ,hand_size
	       ,jump_broad
	       ,bench_reps
	       ,jump_vertical
	       ,test_score
	       ,jump_vertical_above_expected
	       ,jump_vertical_above_expected_pct
	       ,jump_broad_above_expected
	       ,jump_broad_above_expected_pct
	       ,bench_reps_above_expected
	       ,bench_reps_above_expected_pct
	  INTO ##temp_measurables_for_modeling_values
      FROM (
      SELECT player_id
		  ,order_for_models
		  ,code
		  ,value
      FROM ##temp_advanced_measurables_master_with_order WHERE code IN ('height', 'weight', 'dash_forty', 'dash_twenty', 'dash_ten', 'shuttle_short', 'three_cone', 'shuttle_long', 'flying_ten', 'flying_twenty', 'dash_forty_below_expected', 'dash_forty_below_expected_pct', 'dash_twenty_below_expected', 'dash_twenty_below_expected_pct', 'dash_ten_below_expected', 'dash_ten_below_expected_pct', 'flying_ten_below_expected', 'flying_ten_below_expected_pct', 'flying_twenty_below_expected', 'flying_twenty_below_expected_pct', 'shuttle_short_below_expected', 'shuttle_short_below_expected_pct', 'shuttle_long_below_expected', 'shuttle_long_below_expected_pct', 'three_cone_below_expected', 'three_cone_below_expected_pct', 'arm_length', 'wingspan', 'hand_size', 'jump_broad', 'bench_reps', 'jump_vertical', 'test_score', 'jump_vertical_above_expected', 'jump_vertical_above_expected_pct', 'jump_broad_above_expected', 'jump_broad_above_expected_pct', 'bench_reps_above_expected', 'bench_reps_above_expected_pct')) up
     PIVOT (MAX(value) FOR code IN ([height], [weight], [dash_forty], [dash_twenty], [dash_ten], [shuttle_short], [three_cone], [shuttle_long], [flying_ten], [flying_twenty], [dash_forty_below_expected], [dash_forty_below_expected_pct], [dash_twenty_below_expected], [dash_twenty_below_expected_pct], [dash_ten_below_expected], [dash_ten_below_expected_pct], [flying_ten_below_expected], [flying_ten_below_expected_pct], [flying_twenty_below_expected], [flying_twenty_below_expected_pct], [shuttle_short_below_expected], [shuttle_short_below_expected_pct], [shuttle_long_below_expected], [shuttle_long_below_expected_pct], [three_cone_below_expected], [three_cone_below_expected_pct], [arm_length], [wingspan], [hand_size], [jump_broad], [bench_reps], [jump_vertical], [test_score], [jump_vertical_above_expected], [jump_vertical_above_expected_pct], [jump_broad_above_expected], [jump_broad_above_expected_pct], [bench_reps_above_expected], [bench_reps_above_expected_pct])) AS pvt
	 WHERE order_for_models = 1
  ORDER BY player_id

--SELECT * FROM ##temp_measurables_for_modeling_values


-- Check if ##temp_measurables_for_modeling exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_for_modeling') IS NOT NULL
	DROP TABLE ##temp_measurables_for_modeling

    SELECT player_id
	       ,height
	       ,[weight]
	       ,dash_forty
	       ,dash_twenty
	       ,dash_ten
	       ,shuttle_short
	       ,three_cone
	       ,shuttle_long
	       ,flying_ten
	       ,flying_twenty
	       ,dash_forty_below_expected
	       ,dash_forty_below_expected_pct
	       ,dash_twenty_below_expected
	       ,dash_twenty_below_expected_pct
	       ,dash_ten_below_expected
	       ,dash_ten_below_expected_pct
	       ,flying_ten_below_expected
	       ,flying_ten_below_expected_pct
	       ,flying_twenty_below_expected
	       ,flying_twenty_below_expected_pct
	       ,COALESCE(shuttle_short_below_expected,0) AS shuttle_short_below_expected
	       ,COALESCE(shuttle_short_below_expected_pct,0) AS shuttle_short_below_expected_pct
	       ,COALESCE(shuttle_long_below_expected,0) AS shuttle_long_below_expected
	       ,COALESCE(shuttle_long_below_expected_pct,0) AS shuttle_long_below_expected_pct
	       ,COALESCE(three_cone_below_expected,0) AS three_cone_below_expected
	       ,COALESCE(three_cone_below_expected_pct,0) AS three_cone_below_expected_pct
	       ,arm_length
	       ,wingspan
	       ,hand_size
	       ,jump_broad
	       ,bench_reps
	       ,jump_vertical
	       ,test_score
	       ,COALESCE(jump_vertical_above_expected,0) AS jump_vertical_above_expected
	       ,COALESCE(jump_vertical_above_expected_pct,0) AS jump_vertical_above_expected_pct
	       ,COALESCE(jump_broad_above_expected,0) AS jump_broad_above_expected
	       ,COALESCE(jump_broad_above_expected_pct,0) AS jump_broad_above_expected_pct
	       ,COALESCE(bench_reps_above_expected,0) AS bench_reps_above_expected
	       ,COALESCE(bench_reps_above_expected_pct,0) AS bench_reps_above_expected_pct
	  INTO ##temp_measurables_for_modeling
	  FROM ##temp_measurables_for_modeling_values

--SELECT * FROM ##temp_measurables_for_modeling

SELECT old.[player_id]
      ,[position_draft_board]
      ,[acceleration_forty_best_value]
      ,[acceleration_ten_best_value]
      ,[acceleration_twenty_best_value]
      ,[arm_length_best_value]
      ,[bench_reps_best_value]
      ,[bench_work_joules_best_value]
      ,[bench_work_joules_z_score_best_value]
      ,[body_mass_index_best_value]
      ,[dash_forty_z_score_best_value]
      ,[dash_ten_z_score_best_value]
      ,[dash_twenty_z_score_best_value]
      ,[explosion_index_best_value]
      ,[explosion_lower_best_value]
      ,[flying_ten_z_score_best_value]
      ,[flying_twenty_z_score_best_value]
      ,[hand_size_best_value]
      ,[jump_broad_best_value]
      ,[jump_broad_best_value_estimated]
      ,[jump_vertical_best_value]
      ,[jump_vertical_best_value_estimated]
      ,[height_best_value]
      ,[jump_broad_power_sandy_best_value]
      ,[jump_broad_z_score_best_value]
      ,[jump_vertical_power_best_value]
      ,[jump_vertical_power_kubiak_best_value]
      ,[jump_vertical_power_spags_best_value]
      ,[jump_vertical_z_score_best_value]
      ,[length_vertical_with_jump_best_value]
      ,[lateral_agility_score_best_value]
      ,[length_vertical_best_value]
      ,[power_forty_best_value]
      ,[power_ten_best_value]
      ,[power_twenty_best_value]
      ,[ratio_arm_to_height_best_value]
      ,[shuttle_long_best_value]
      ,[shuttle_long_best_value_estimated]
      ,[shuttle_short_best_value]
      ,[shuttle_short_best_value_estimated]
      ,[three_cone_best_value]
      ,[three_cone_best_value_estimated]
      ,[shuttle_short_z_score_best_value]
      ,[shuttle_long_z_score_best_value]
      ,[speed_score_adjusted_best_value]
      ,[three_cone_z_score_best_value]
      ,[speed_score_barnwell_best_value]
      ,[speed_score_cohen_best_value]
      ,[test_score_best_value]
      ,[weight_best_value]
      ,[work_forty_sandy_best_value]
      ,[work_ten_sandy_best_value]
      ,[work_twenty_sandy_best_value]
      ,2016 AS[season]
      ,[grade_scaled]
      --,[grade_college_mean]
	       ,dash_forty
	       ,dash_twenty
	       ,dash_ten
	       ,shuttle_short
	       ,three_cone
	       ,shuttle_long
	       ,flying_ten
	       ,flying_twenty
	       ,dash_forty_below_expected
	       ,dash_forty_below_expected_pct
	       ,dash_twenty_below_expected
	       ,dash_twenty_below_expected_pct
	       ,dash_ten_below_expected
	       ,dash_ten_below_expected_pct
	       ,flying_ten_below_expected
	       ,flying_ten_below_expected_pct
	       ,flying_twenty_below_expected
	       ,flying_twenty_below_expected_pct
	       ,shuttle_short_below_expected
	       ,shuttle_short_below_expected_pct
	       ,shuttle_long_below_expected
	       ,shuttle_long_below_expected_pct
	       ,three_cone_below_expected
	       ,three_cone_below_expected_pct
	       ,jump_vertical_above_expected
	       ,jump_vertical_above_expected_pct
	       ,jump_broad_above_expected
	       ,jump_broad_above_expected_pct
	       ,bench_reps_above_expected
	       ,bench_reps_above_expected_pct
  INTO [AnalyticsWork].[dbo].[draft2016_measurables_e_to_model_pre]
  FROM [AnalyticsWork].[dbo].[draft2016_measurables_to_model_pre2016] old
  left join ##temp_measurables_for_modeling m
  on old.player_id=m.player_id




















/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get a player season grade for each of a player's first
four seasons.  If a player played in all four seasons, 
he will have four records in the table.

Tier system for season grades:
1) Ability For Ravens / Quarterly
2) Advance
3) Grade Fit - model generated pro grade

The first step is getting all the grades into a master grade table.

The reason we join player information to both the scout and model
tables separately is because the model table uses nfl_id while the
scout table uses the Bane player_id.

At some point, try to figure out a way to get rid of players who only
have one 2.0 grade for his season.  You need to exclude 2.0s when 
finding the average, but then if a player only has one, he is getting
assigned a 50 for the season when you assign 50 to all nulls.

OUTPUT TABLES:
##temp_pro_grades_scout

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_scout exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_scout') IS NOT NULL
	DROP TABLE ##temp_pro_grades_scout

    SELECT re.id AS report_id
	      ,author_id AS scout_id
		  ,CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 16) THEN YEAR(re.created_at)-1 
		        ELSE YEAR(re.created_at) END AS report_season
		  ,CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 16) THEN (YEAR(re.created_at)-1) - nfl_entry_year + 1
		        ELSE (YEAR(re.created_at)) - nfl_entry_year + 1 END AS player_season_in_league
		  ,CASE WHEN UPPER(LTRIM(RTRIM(re.[type]))) IN ('ABILITY FOR RAVENS','QUARTERLY') THEN 1
		        WHEN UPPER(LTRIM(RTRIM(re.[type]))) IN ('GAME ADVANCE') THEN 2
				ELSE NULL
		   END AS grade_tier
		  ,player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
		  ,gr.value	AS grade
		  ,CASE WHEN CAST(gr.value AS NUMERIC (3,1)) IN (8.0) THEN 100
		        WHEN CAST(gr.value AS NUMERIC (3,1)) IN (7.0) THEN 84
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.9,6.7,6.5) THEN 73
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.3) THEN 65
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.1,6.0) THEN 58
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.9) THEN 53
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.8) THEN 50
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.7) THEN 47.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.6) THEN 45.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.4) THEN 44.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.2) THEN 43.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.0) THEN 43
				ELSE NULL
		   END AS grade_scaled	
	  INTO ##temp_pro_grades_scout
      FROM [BaneProductionAnalytics].[dbo].[reports] re
 LEFT JOIN [BaneProductionAnalytics].[dbo].[grades] gr
        ON re.grade_id=gr.id	
 LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
        ON re.player_id=pl.id  
	 WHERE 1=1
	   AND UPPER(LTRIM(RTRIM(re.[type]))) IN ('ABILITY FOR RAVENS','GAME ADVANCE','QUARTERLY')
	   AND CAST(gr.value AS NUMERIC (3,1)) != 2
-------scale_id = 6 represents the Pro Grade Scale
	   AND gr.scale_id = 6
  ORDER BY re.id
		  ,gr.id

--SELECT * FROM ##temp_pro_grades_scout


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Next create a version of the Pro Grade Fit with the same
structure so you can append those grades.

OUTPUT TABLES:
##temp_pro_grades_model

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if##temp_pro_grades_model exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_model') IS NOT NULL
	DROP TABLE ##temp_pro_grades_model

    SELECT ABS(CHECKSUM(NEWID()))*-1 AS report_id
	      ,999 AS scout_id
		  ,season AS report_season
		  ,season - nfl_entry_year + 1 AS player_season_in_league
	      ,3 AS grade_tier
		  ,pl.id AS player_id
		  ,PlayerID AS nfl_id	
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name	  
		  ,GradeFit AS grade
		  ,ProGradeFit AS grade_scaled
	  INTO ##temp_pro_grades_model
      FROM [AnalyticsWork].[dbo].[model_pro_grades] mo
 LEFT JOIN [BaneProductionAnalytics].[dbo].[players] pl
        ON mo.PlayerID=pl.nfl_id  

--SELECT * FROM ##temp_pro_grades_model


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the model grades to the scout grades.

OUTPUT TABLES:
##temp_pro_grades_append

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_append exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_append') IS NOT NULL
	DROP TABLE ##temp_pro_grades_append

    SELECT *
	  INTO ##temp_pro_grades_append
      FROM ##temp_pro_grades_model

INSERT INTO ##temp_pro_grades_append
	SELECT *
	  FROM ##temp_pro_grades_scout

--SELECT * FROM ##temp_pro_grades_append


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the player's mean grade for each grade_tier in each season.

Once we are able to put a team on each player's report, try to exclude
grades that are based just on training camp, like:
Report Month in (7,8)
AND team=BLT OR (team=SF AND Report Year = 2014) OR (team=PHI AND Report Year = 2015)


OUTPUT TABLES:
##temp_pro_grades_season_tier_mean

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if##temp_pro_grades_season_tier_mean exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_season_tier_mean') IS NOT NULL
	DROP TABLE ##temp_pro_grades_season_tier_mean

    SELECT player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier
		  ,RANK() OVER (PARTITION BY player_id, report_season ORDER BY grade_tier) AS order_for_models
  		  ,AVG(CAST(grade_scaled AS FLOAT)) AS grade_scaled_mean
	  INTO ##temp_pro_grades_season_tier_mean
	  FROM ##temp_pro_grades_append
  GROUP BY player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier

--SELECT * FROM ##temp_pro_grades_season_tier_mean

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Select the highest tiered grade for every player for every season.

OUTPUT TABLES:
##temp_pro_grades_season

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_season exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_season') IS NOT NULL
	DROP TABLE ##temp_pro_grades_season

    SELECT *
	  INTO ##temp_pro_grades_season
	  FROM ##temp_pro_grades_season_tier_mean
	 WHERE order_for_models = 1

--SELECT * FROM ##temp_pro_grades_season


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the season pro grades to the player advanced measurables
table.  Remember, there is a row for every player for each of
his first 4 seasons.

Since we only modeled Pro Grades back to 2009, limit your pool to only 2006 Draft and
Beyond (because those guys will have at least one grade, from their 4th season).

OUTPUT TABLES:
##temp_measurables_with_pro_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_measurables_with_pro_grades exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_measurables_with_pro_grades') IS NOT NULL
	DROP TABLE ##temp_measurables_with_pro_grades

    SELECT me.*
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier
		  ,CASE WHEN COALESCE(grade_scaled_mean,50) < 50 THEN 50
		        ELSE COALESCE(grade_scaled_mean,50)
		   END AS grade_scaled
		  ,CASE WHEN dbg.position != '' AND dbg.position IS NOT NULL THEN CASE WHEN dbg.position IN ('OB','RUSH','SAM','DP') THEN 'OB'
																	           WHEN dbg.position IN ('DS','FS','SS') THEN 'DS'
																			   ELSE UPPER(LTRIM(RTRIM(dbg.position)))
																		  END
		        ELSE CASE WHEN pos.abbreviation IN ('WR') THEN 'WO'
				          WHEN pos.abbreviation IN ('RB') THEN 'OH'
						  WHEN pos.abbreviation IN ('ROG','LOG','OL') THEN 'OG'
						  WHEN pos.abbreviation IN ('ROT','LOT') THEN 'OT'
						  WHEN pos.abbreviation IN ('MB','ILB','WB','LB','4-3 WILL') THEN 'IB'
						  WHEN pos.abbreviation IN ('ROLB','LOLB','OLB','SB','RUSH','4-3 DE','4-3 SAM','SAM') THEN 'OB'
						  WHEN pos.abbreviation IN ('NB','DB') THEN 'DC'
						  WHEN pos.abbreviation IN ('RDE','LDE') THEN 'DE'
						  WHEN pos.abbreviation IN ('NT','DL','NG') THEN 'DT'
						  WHEN pos.abbreviation IN ('SS','FS') THEN 'DS'
						  ELSE UPPER(LTRIM(RTRIM(pos.abbreviation)))
					 END
		   END AS position_draft_board
	  INTO ##temp_measurables_with_pro_grades
	  FROM ##temp_measurables_for_modeling_with_z me
 LEFT JOIN ##temp_pro_grades_season pg
        ON pg.player_id = me.player_id
INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl
        ON me.player_id = pl.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] pos
        ON pl.position_id = pos.id
 LEFT JOIN ##temp_draft_board_positions_with_order dbg
        ON me.player_id = dbg.player_id
		AND dbg.draft_board_position_order = 1
	 WHERE coalesce(dbg.draft_year,nfl_entry_year,pl.draft_year) >= 2006 and coalesce(dbg.draft_year,nfl_entry_year,pl.draft_year) <2016
	   AND ((player_season_in_league <=4
	   AND player_season_in_league !=0)
	    OR player_season_in_league IS NULL)

--SELECT * FROM ##temp_measurables_with_pro_grades
















select distinct m.player_id
      ,CASE WHEN p1.nfl_entry_year>=2009 THEN p1.nfl_entry_year ELSE NULL END as first_season
	  ,CASE WHEN p2.nfl_entry_year>=2008 THEN p2.nfl_entry_year+1 ELSE NULL END as second_season
	  ,CASE WHEN p3.nfl_entry_year>=2007 THEN p3.nfl_entry_year+2 ELSE NULL END as third_season
	  ,CASE WHEN p4.nfl_entry_year>=2006 THEN p4.nfl_entry_year+3 ELSE NULL END as fourth_season
into ##temp_seasons
from ##temp_measurables_with_pro_grades m
inner join [BaneProductionAnalytics].[dbo].[players] p1
on m.player_id=p1.id
inner join [BaneProductionAnalytics].[dbo].[players] p2
on p1.id=p2.id
inner join [BaneProductionAnalytics].[dbo].[players] p3
on p1.id=p3.id
inner join [BaneProductionAnalytics].[dbo].[players] p4
on p1.id=p4.id
order by m.player_id

--select * from ##temp_seasons where player_id=10828


	SELECT player_id
		  ,me.season
	  into ##temp_seasons_unpivot
      FROM ##temp_seasons
   UNPIVOT (season FOR code IN (first_season, second_season, third_season, fourth_season
							   )) AS me

select * from ##temp_seasons_unpivot where player_id=10828

select distinct u.player_id
          ,position_draft_board
          ,acceleration_forty_best_value
          ,acceleration_ten_best_value
          ,acceleration_twenty_best_value
          ,arm_length_best_value
          ,bench_reps_best_value
		  ,bench_work_joules_best_value
          ,bench_work_joules_z_score_best_value
          ,body_mass_index_best_value
          ,dash_forty_z_score_best_value
          ,dash_ten_z_score_best_value
          ,dash_twenty_z_score_best_value
          ,explosion_index_best_value
          ,explosion_lower_best_value
          ,flying_ten_z_score_best_value
          ,flying_twenty_z_score_best_value
          ,hand_size_best_value
		  ,jump_broad_best_value 
		  ,jump_broad_best_value_estimated
		  ,jump_vertical_best_value		   	   
		  ,jump_vertical_best_value_estimated
		  ,height_best_value
          ,jump_broad_power_sandy_best_value
		  ,jump_broad_z_score_best_value
		  ,jump_vertical_power_best_value
          ,jump_vertical_power_kubiak_best_value
          ,jump_vertical_power_spags_best_value
		  ,jump_vertical_z_score_best_value
		  ,length_vertical_with_jump_best_value
		  ,lateral_agility_score_best_value
          ,length_vertical_best_value
          ,power_forty_best_value
          ,power_ten_best_value
          ,power_twenty_best_value
          ,ratio_arm_to_height_best_value
		  ,shuttle_long_best_value 
		  ,shuttle_long_best_value_estimated
		  ,shuttle_short_best_value
		  ,shuttle_short_best_value_estimated
		  ,three_cone_best_value
		  ,three_cone_best_value_estimated 
		  ,shuttle_short_z_score_best_value
		  ,shuttle_long_z_score_best_value
          ,speed_score_adjusted_best_value
		  ,three_cone_z_score_best_value
          ,speed_score_barnwell_best_value
		  ,speed_score_cohen_best_value
          ,test_score_best_value
          ,weight_best_value
          ,work_forty_sandy_best_value
          ,work_ten_sandy_best_value
          ,work_twenty_sandy_best_value
		  ,u.season
into ##temp_list
from ##temp_seasons_unpivot u
left join ##temp_measurables_with_pro_grades m
on u.player_id=m.player_id
where u.season<=2015

select * from ##temp_list


select l.*
,coalesce(cast(grade_scaled as float),50) as grade_scaled
,grade_college_mean
--into ##temp_all
from ##temp_list l
left join ##temp_measurables_with_pro_grades m
on m.player_id=l.player_id
and m.report_season=l.season
left join AnalyticsWork.dbo.draft2016_mean_college_grades cg
on cg.player_id=m.player_id


select Player_id, count(player_id) as pcount into ##temp_check from ##temp_all a 
group by player_id

select c.*, nfl_entry_year from ##temp_check c inner join [BaneProductionAnalytics].[dbo].[players] p1
on c.player_id=p1.id

select * from [BaneProductionAnalytics].[dbo].[players] p1 where last_name='Kindle' and first_name='Sergio'








/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table to analyze the difference between 
combine and non combine run times for players who have both.

OUTPUT TABLES:
##temp_runs_compare

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_runs_compare exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_runs_compare') IS NOT NULL
	DROP TABLE ##temp_runs_compare

    SELECT w1.player_id
	      ,w1.workout_type_for_models
		  ,w1.dash_forty_best AS dash_forty_best_elec
		  ,w1.dash_twenty_best AS dash_twenty_best_elec
		  ,w1.dash_ten_best AS dash_ten_best_elec
		  ,w1.flying_twenty_best AS flying_twenty_best_elec
		  ,w1.flying_ten_best AS flying_ten_best_elec
		  ,w1.shuttle_short_best AS shuttle_short_best_elec
		  ,w1.shuttle_long_best AS shuttle_long_best_elec
		  ,w1.three_cone_best AS three_cone_best_elec
		  ,w1.dash_forty_z_score_best AS dash_forty_z_score_best_elec
		  ,w1.dash_twenty_z_score_best AS dash_twenty_z_score_best_elec
		  ,w1.dash_ten_z_score_best AS dash_ten_z_score_best_elec
		  ,w1.flying_twenty_z_score_best AS flying_twenty_z_score_best_elec
		  ,w1.flying_ten_z_score_best AS flying_ten_z_score_best_elec
		  ,w1.shuttle_short_z_score_best AS shuttle_short_z_score_best_elec
		  ,w1.shuttle_long_z_score_best AS shuttle_long_z_score_best_elec
		  ,w1.three_cone_z_score_best AS three_cone_z_score_best_elec

		  ,w2.dash_forty_best AS dash_forty_best_hand_indy
		  ,w2.dash_twenty_best AS dash_twenty_best_hand_indy
		  ,w2.dash_ten_best AS dash_ten_best_hand_indy
		  ,w2.flying_twenty_best AS flying_twenty_best_hand_indy
		  ,w2.flying_ten_best AS flying_ten_best_hand_indy
		  ,w2.shuttle_short_best AS shuttle_short_best_hand_indy
		  ,w2.shuttle_long_best AS shuttle_long_best_hand_indy
		  ,w2.three_cone_best AS three_cone_best_hand_indy
		  ,w2.dash_forty_z_score_best AS dash_forty_z_score_best_hand_indy
		  ,w2.dash_twenty_z_score_best AS dash_twenty_z_score_best_hand_indy
		  ,w2.dash_ten_z_score_best AS dash_ten_z_score_best_hand_indy
		  ,w2.flying_twenty_z_score_best AS flying_twenty_z_score_best_hand_indy
		  ,w2.flying_ten_z_score_best AS flying_ten_z_score_best_hand_indy
		  ,w2.shuttle_short_z_score_best AS shuttle_short_z_score_best_hand_indy
		  ,w2.shuttle_long_z_score_best AS shuttle_long_z_score_best_hand_indy
		  ,w2.three_cone_z_score_best AS three_cone_z_score_best_hand_indy

		  ,w3.dash_forty_best AS dash_forty_best_hand_other
		  ,w3.dash_twenty_best AS dash_twenty_best_hand_other
		  ,w3.dash_ten_best AS dash_ten_best_hand_other
		  ,w3.flying_twenty_best AS flying_twenty_best_hand_other
		  ,w3.flying_ten_best AS flying_ten_best_hand_other
		  ,w3.shuttle_short_best AS shuttle_short_best_hand_other
		  ,w3.shuttle_long_best AS shuttle_long_best_hand_other
		  ,w3.three_cone_best AS three_cone_best_hand_other
		  ,w3.dash_forty_z_score_best AS dash_forty_z_score_best_hand_other
		  ,w3.dash_twenty_z_score_best AS dash_twenty_z_score_best_hand_other
		  ,w3.dash_ten_z_score_best AS dash_ten_z_score_best_hand_other
		  ,w3.flying_twenty_z_score_best AS flying_twenty_z_score_best_hand_other
		  ,w3.flying_ten_z_score_best AS flying_ten_z_score_best_hand_other
		  ,w3.shuttle_short_z_score_best AS shuttle_short_z_score_best_hand_other
		  ,w3.shuttle_long_z_score_best AS shuttle_long_z_score_best_hand_other
		  ,w3.three_cone_z_score_best AS three_cone_z_score_best_hand_other
		  ,CASE WHEN dbg.position != '' AND dbg.position IS NOT NULL THEN CASE WHEN dbg.position IN ('OB','RUSH','SAM','DP') THEN 'OB'
																	           WHEN dbg.position IN ('DS','FS','SS') THEN 'DS'
																			   ELSE UPPER(LTRIM(RTRIM(dbg.position)))
																		  END
		        ELSE CASE WHEN pos.abbreviation IN ('WR') THEN 'WO'
				          WHEN pos.abbreviation IN ('RB') THEN 'OH'
						  WHEN pos.abbreviation IN ('ROG','LOG','OL') THEN 'OG'
						  WHEN pos.abbreviation IN ('ROT','LOT') THEN 'OT'
						  WHEN pos.abbreviation IN ('MB','ILB','WB','LB','4-3 WILL') THEN 'IB'
						  WHEN pos.abbreviation IN ('ROLB','LOLB','OLB','SB','RUSH','4-3 DE','4-3 SAM','SAM') THEN 'OB'
						  WHEN pos.abbreviation IN ('NB','DB') THEN 'DC'
						  WHEN pos.abbreviation IN ('RDE','LDE') THEN 'DE'
						  WHEN pos.abbreviation IN ('NT','DL','NG') THEN 'DT'
						  WHEN pos.abbreviation IN ('SS','FS') THEN 'DS'
						  ELSE UPPER(LTRIM(RTRIM(pos.abbreviation)))
					 END
		   END AS position_draft_board
	  --INTO ##temp_runs_compare
	  FROM ##temp_runs_best_z w1
LEFT JOIN ##temp_runs_best_z w2
	    ON w1.player_id=w2.player_id
	   AND w2.workout_type_for_models=3
LEFT JOIN ##temp_runs_best_z w3
	    ON w1.player_id=w3.player_id
	   AND w3.workout_type_for_models=4

INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl
        ON w1.player_id = pl.id
 LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] pos
        ON pl.position_id = pos.id
 LEFT JOIN ##temp_draft_board_positions_with_order dbg
        ON w1.player_id = dbg.player_id
		AND dbg.draft_board_position_order = 1
	 WHERE w1.workout_type_for_models=1


	 select * from ##temp_runs_best_z


		  
		  
		  
		  
		  
		  




SELECT z.* , last_name, first_name
FROM ##temp_runs_best_z z
INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl
        ON z.player_id = pl.id






----------haven't been able to figure out the exact SPARQ formula yet, this is a "best guess" based on other efforts to nail down the formula
----------,161.1768022+([weight]*0.3114693)+(dash_forty*-10.72725617)+(dash_ten*-41.89231102)+(shuttle_short*-16.15717599)+(three_cone*-6.981575131)+(bench_reps*0.477821711)+(jump_vertical*1.266893465)+(jump_broad/12*6.691568906) as sparq_estimate
