



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for normalizing scout grades.

Should it be done by grade level as well as scout and position and trait?

Inherently, players the the top of the board will have higher avg position specific grades

So this could potentially lead to some scouts (Eric, Chad, Vince) who tend to view the higher players to have higher average grades

And other scouts (Andrew) who tend to view the lower players to have lower average grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the master evaluations table.

OUTPUT TABLES:
##temp_evaluations_master

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_evaluations_master exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_evaluations_master') IS NOT NULL
	DROP TABLE ##temp_evaluations_master

    SELECT re.id AS report_id
	      ,author_id AS scout_id
		  ,player_id
		  ,re.position_id
		  ,ev.[id] AS evaluation_id
		  ,ev.skill_id
		  ,sk.[code] AS skill_code
		  ,sk.[type] AS skill_type
		  ,sk.[name] AS skill_name
		  ,gr.value		 
	  INTO ##temp_evaluations_master
      FROM [bane_production_analytics].[dbo].[reports] re
 LEFT JOIN [bane_production_analytics].[dbo].[evaluations] ev
        ON re.id=ev.report_id
 LEFT JOIN [bane_production_analytics].[dbo].[skills] sk
        ON ev.skill_id=sk.id
 LEFT JOIN [bane_production_analytics].[dbo].[grades] gr
        ON ev.grade_id=gr.id		
	 WHERE 1=1
	   AND UPPER(LTRIM(RTRIM(re.[type]))) IN ('CROSS-CHECK','DRAFT','FALL','POST CC')
-------Below limits to only position specific, critical factor, and STICD grades on the 3 to 7 scale
	   AND gr.scale_id = 5
  ORDER BY re.id
          ,ev.id
		  ,sk.id
		  ,gr.id

--SELECT * FROM ##temp_evaluations_master


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find each scout's mean and standard deviation grade
value by position.

OUTPUT TABLES:
##temp_values_scout_mean_and_sd

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_values_scout_mean_and_sd exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_values_scout_mean_and_sd') IS NOT NULL
	DROP TABLE ##temp_values_scout_mean_and_sd

    SELECT scout_id
		  ,position_id
		  ,skill_id
		  ,skill_code
	      ,AVG(CAST(value AS NUMERIC(9,7))) AS value_mean 
		  ,STDEVP(CAST(value AS NUMERIC(9,7)))  AS value_stdev
	  INTO ##temp_values_scout_mean_and_sd
      FROM ##temp_evaluations_master
  GROUP BY scout_id
		  ,position_id
		  ,skill_id
		  ,skill_code

--SELECT * FROM ##temp_values_scout_avg_and_sd


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Turn each grade value into a z-score.

OUTPUT TABLES:
##temp_values_with_z

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_values_with_z exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_values_with_z') IS NOT NULL
	DROP TABLE ##temp_values_with_z

    SELECT ma.*
	      ,value_mean 
		  ,value_stdev		   
		  ,(ma.value - value_mean) / NULLIF(value_stdev,0) AS value_z_score
	  INTO ##temp_values_with_z
      FROM ##temp_evaluations_master ma
INNER JOIN ##temp_values_scout_mean_and_sd ms
	    ON ma.scout_id = ms.scout_id
	   AND ma.position_id = ms.position_id
	   AND ma.skill_id = ms.skill_id

--SELECT * FROM ##temp_values_with_z


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get the mean normalized grades for each player

OUTPUT TABLES:
##temp_evaluations_player_means

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_evaluations_player_means exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_evaluations_player_means') IS NOT NULL
	DROP TABLE ##temp_evaluations_player_means

    SELECT player_id
		  ,skill_id
		  ,skill_code
		  ,skill_type
		  ,skill_name
		  ,AVG(value_z_score) AS value_z_score_player_mean	      
	  INTO ##temp_evaluations_player_means
      FROM ##temp_values_with_z
  GROUP BY player_id
  		  ,skill_id
		  ,skill_code
		  ,skill_type
		  ,skill_name
  ORDER BY player_id
  		  ,skill_id
		  ,skill_code
		  ,skill_type
		  ,skill_name

--SELECT * FROM ##temp_evaluations_player_means
