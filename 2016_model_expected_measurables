  
/*---------------------------------------------------------------------

Create a record for each player workout - take the best values for each
individual measurable (min or max, electronic or not) depending on 
what workout it is.

----------------------------------------------------------------------*/

-- Check if temp_workouts exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_workouts') IS NOT NULL
	DROP TABLE ##temp_workouts

    SELECT workouts.[id] as workout_id
	      ,[player_id]
		  ,[priority]
		  ,COALESCE(electronic_forty,handheld_forty) as [forty_time]
		  ,COALESCE(electronic_twenty,handheld_twenty) as [twenty_time]
		  ,COALESCE(electronic_ten,handheld_ten) as [ten_time]
		  ,[height]
		  ,[weight]
		  ,[arm_length]
		  ,[wing_span]
		  ,[hand_span]
		  ,[vertical_jump]
		  ,[broad_jump]
		  ,[short_shuttle]
		  ,[long_shuttle]
		  ,[three_cone]
		  ,[bench_reps]
		  ,[test_score]
	  INTO ##temp_workouts
      FROM [bane-development].[dbo].[workouts] workouts
INNER JOIN [bane-development].[dbo].[player_workout_types] workout_types
        ON workouts.player_workout_type_id=workout_types.id
--JOIN TO THE MIN ELECTRONIC 40 TIME
 LEFT JOIN (SELECT workout_id 
				  ,MIN([value]) AS electronic_forty
			 FROM [bane-development].[dbo].[measurables]
			WHERE measurable_type_id=78
			  AND order_by IN (5,6)
		 GROUP BY workout_id) AS electronic_forty
		 ON workouts.id=electronic_forty.workout_id
--JOIN TO THE MIN HANDHELD 40 TIME
 LEFT JOIN (SELECT workout_id 
				   ,MIN([value]) AS handheld_forty
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=78
			   AND order_by < 5
		  GROUP BY workout_id) AS handheld_forty
		 ON workouts.id=handheld_forty.workout_id
--JOIN TO THE MIN ELECTRONIC 20 TIME
 LEFT JOIN (SELECT workout_id 
				  ,MIN([value]) AS electronic_twenty
			 FROM [bane-development].[dbo].[measurables]
			WHERE measurable_type_id=79
			  AND order_by IN (5,6)
		 GROUP BY workout_id) AS electronic_twenty
		 ON workouts.id=electronic_twenty.workout_id
--JOIN TO THE MIN HANDHELD 20 TIME
 LEFT JOIN (SELECT workout_id 
				   ,MIN([value]) AS handheld_twenty
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=79
			   AND order_by < 5
		  GROUP BY workout_id) AS handheld_twenty
		 ON workouts.id=handheld_twenty.workout_id
--JOIN TO THE MIN ELECTRONIC 10 TIME
 LEFT JOIN (SELECT workout_id 
				  ,MIN([value]) AS electronic_ten
			 FROM [bane-development].[dbo].[measurables]
			WHERE measurable_type_id=80
			  AND order_by IN (5,6)
		 GROUP BY workout_id) AS electronic_ten
		 ON workouts.id=electronic_ten.workout_id
--JOIN TO THE MIN HANDHELD 10 TIME
 LEFT JOIN (SELECT workout_id 
				   ,MIN([value]) AS handheld_ten
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=80
			   AND order_by < 5
		  GROUP BY workout_id) AS handheld_ten
		 ON workouts.id=handheld_ten.workout_id
--JOIN TO THE MAX HEIGHT
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS height
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=70
		  GROUP BY workout_id) AS height
		 ON workouts.id=height.workout_id
--JOIN TO THE MAX WEIGHT
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS [weight]
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=71
		  GROUP BY workout_id) AS [weight]
		 ON workouts.id=[weight].workout_id
--JOIN TO THE MAX ARM LENGTH
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS arm_length
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=73
		  GROUP BY workout_id) AS arm_length
		 ON workouts.id=arm_length.workout_id
--JOIN TO THE MAX WINGSPAN
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS wing_span
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=75
		  GROUP BY workout_id) AS wing_span
		 ON workouts.id=wing_span.workout_id
--JOIN TO THE MAX HANDSPAN
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS hand_span
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=77
		  GROUP BY workout_id) AS hand_span
		 ON workouts.id=hand_span.workout_id
--JOIN TO THE MAX VERTICAL JUMP
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS vertical_jump
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=135
		  GROUP BY workout_id) AS vertical_jump
		 ON workouts.id=vertical_jump.workout_id
--JOIN TO THE MAX BROAD JUMP
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS broad_jump
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=83
		  GROUP BY workout_id) AS broad_jump
		 ON workouts.id=broad_jump.workout_id
--JOIN TO THE MIN SHORT SHUTTLE
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS short_shuttle
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=84
		  GROUP BY workout_id) AS short_shuttle
		 ON workouts.id=short_shuttle.workout_id
--JOIN TO THE MIN LONG SHUTTLE
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS long_shuttle
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=86
		  GROUP BY workout_id) AS long_shuttle
		 ON workouts.id=long_shuttle.workout_id
--JOIN TO THE MIN THREE CONE
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS three_cone
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=85
		  GROUP BY workout_id) AS three_cone
		 ON workouts.id=three_cone.workout_id
--JOIN TO THE MAX BENCH PRESS
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS bench_reps
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=87
		  GROUP BY workout_id) AS bench_reps
		 ON workouts.id=bench_reps.workout_id
--JOIN TO THE MAX TEST SCORE
 LEFT JOIN (SELECT workout_id 
				   ,MAX([value]) AS test_score
			  FROM [bane-development].[dbo].[measurables]
			 WHERE measurable_type_id=133
		  GROUP BY workout_id) AS test_score
		 ON workouts.id=test_score.workout_id


/*---------------------------------------------------------------------

Next you join player information to the workouts.  While doing this, 
you assign all the different NFL position IDs into groups that match as 
closely as possible to our Draft Board positions.  

----------------------------------------------------------------------*/

-- Check if temp_player_workouts exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_player_workouts') IS NOT NULL
	DROP TABLE ##temp_player_workouts

    SELECT players.[first_name]
		  ,players.[last_name]
		  ,players.[draft_year]
		  ,players.[nfl_id] AS player_id_nfl
		  ,workouts.*
		  ,CASE WHEN [priority] IN (1,2) THEN 1 ELSE 0 END AS combine_or_pro_day
		  ,CASE WHEN [position] IS NOT NULL THEN CASE WHEN [position] IN ('FS','SS') THEN 'DS' 
													  WHEN [position] IN ('RUSH','SAM') THEN 'OB34'
													  ELSE [position]
													  END
			    ELSE CASE WHEN [position_id] = 1 THEN 'QB'
				          WHEN [position_id] = 2 THEN 'WO'
						  WHEN [position_id] = 3 THEN 'TE'
						  WHEN [position_id] = 4 THEN 'OH'
						  WHEN [position_id] = 5 THEN 'FB'
						  WHEN [position_id] = 6 THEN 'OC'
						  WHEN [position_id] IN (7,13,27) THEN 'OG'
						  WHEN [position_id] IN (8,12,28) THEN 'OT'
						  WHEN [position_id] IN (9,16,41) THEN 'DC'
						  WHEN [position_id] IN (10,33,36) THEN 'DS' 
						  WHEN [position_id] IN (11,29,31,39) THEN 'IB'
						  WHEN [position_id] IN (14,15,30,32) THEN 'OB34'
						  WHEN [position_id] IN (17,18,34) THEN 'DE34'
						  WHEN [position_id] IN (19,20,35,40) THEN 'DT34'
						  WHEN [position_id] = 21 THEN 'LS'
						  WHEN [position_id] = 22 THEN 'PT'
						  WHEN [position_id] = 23 THEN 'PK'
						  END
				END AS [position] 
		  ,[grade_college]
		  ,[grade_pro_yr1]
		  ,[grade_pro_yr2]
		  ,[grade_pro_yr3]
		  ,[grade_pro_yr4]
      INTO ##temp_player_workouts
      FROM ##temp_workouts workouts
INNER JOIN [bane-development].[dbo].[players] players
        ON players.id=workouts.player_id
 LEFT JOIN [AnalyticsWork].[dbo].[sas_grades_and_positions] grades
		ON players.nfl_id=grades.player_id_nfl
 LEFT JOIN [AnalyticsWork].[dbo].[sas_positions] sas_pos
		ON grades.position_id_sas=sas_pos.position_id_draft_board
     WHERE [priority] <= 10
	   AND [entry_year] >= 2005


/*---------------------------------------------------------------------

Next you create the 40 yard dash analysis dataset.  Add a random number
so you can create training, validation, and scoring sets from the main 
dataset.  The nested queries in the where clause make sure you choose
the workout with the player's LOWEST 40 Time - if he has a time from 
the combine or a pro day, then take his lowest time of those two,
otherwise take the lowest time from the other workout types.  You don't
want to just create a "best of" record, you want to know the size of a 
player when he ran that specific time.

----------------------------------------------------------------------*/

-- Check if temp_forty_analysis_dataset exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_forty_analysis_dataset') IS NOT NULL
	DROP TABLE ##temp_forty_analysis_dataset

    SELECT [position]
		  ,[player_id]
		  ,[first_name]
		  ,[last_name]
		  ,[draft_year]
		  ,[grade_college]
		  ,CASE WHEN [grade_pro_yr1] = 8 THEN 50
		        WHEN [grade_pro_yr1] = 7 THEN 20
				WHEN [grade_pro_yr1] = 6.9 THEN 10
				WHEN [grade_pro_yr1] = 6.7 THEN 7.69
				WHEN [grade_pro_yr1] = 6.5 THEN 6.25
				WHEN [grade_pro_yr1] = 6.3 THEN 5
				WHEN [grade_pro_yr1] = 6.1 THEN 2.5
				WHEN [grade_pro_yr1] = 6.0 THEN 3.33
				WHEN [grade_pro_yr1] = 5.9 THEN 1.82
				WHEN [grade_pro_yr1] = 5.8 THEN 1.33
				WHEN [grade_pro_yr1] = 5.7 THEN 1.11
				ELSE 0
			END AS [grade_pro_yr1]
		  ,CASE WHEN [grade_pro_yr2] = 8 THEN 50
		        WHEN [grade_pro_yr2] = 7 THEN 20
				WHEN [grade_pro_yr2] = 6.9 THEN 10
				WHEN [grade_pro_yr2] = 6.7 THEN 7.69
				WHEN [grade_pro_yr2] = 6.5 THEN 6.25
				WHEN [grade_pro_yr2] = 6.3 THEN 5
				WHEN [grade_pro_yr2] = 6.1 THEN 2.5
				WHEN [grade_pro_yr2] = 6.0 THEN 3.33
				WHEN [grade_pro_yr2] = 5.9 THEN 1.82
				WHEN [grade_pro_yr2] = 5.8 THEN 1.33
				WHEN [grade_pro_yr2] = 5.7 THEN 1.11
				ELSE 0
			END AS [grade_pro_yr2]
		  ,CASE WHEN [grade_pro_yr3] = 8 THEN 50
		        WHEN [grade_pro_yr3] = 7 THEN 20
				WHEN [grade_pro_yr3] = 6.9 THEN 10
				WHEN [grade_pro_yr3] = 6.7 THEN 7.69
				WHEN [grade_pro_yr3] = 6.5 THEN 6.25
				WHEN [grade_pro_yr3] = 6.3 THEN 5
				WHEN [grade_pro_yr3] = 6.1 THEN 2.5
				WHEN [grade_pro_yr3] = 6.0 THEN 3.33
				WHEN [grade_pro_yr3] = 5.9 THEN 1.82
				WHEN [grade_pro_yr3] = 5.8 THEN 1.33
				WHEN [grade_pro_yr3] = 5.7 THEN 1.11
				ELSE 0
			END AS [grade_pro_yr3]
		  ,CASE WHEN [grade_pro_yr4] = 8 THEN 50
		        WHEN [grade_pro_yr4] = 7 THEN 20
				WHEN [grade_pro_yr4] = 6.9 THEN 10
				WHEN [grade_pro_yr4] = 6.7 THEN 7.69
				WHEN [grade_pro_yr4] = 6.5 THEN 6.25
				WHEN [grade_pro_yr4] = 6.3 THEN 5
				WHEN [grade_pro_yr4] = 6.1 THEN 2.5
				WHEN [grade_pro_yr4] = 6.0 THEN 3.33
				WHEN [grade_pro_yr4] = 5.9 THEN 1.82
				WHEN [grade_pro_yr4] = 5.8 THEN 1.33
				WHEN [grade_pro_yr4] = 5.7 THEN 1.11
				ELSE 0
			END AS [grade_pro_yr4]
		  ,[workout_id]
		  ,[priority]
		  ,[combine_or_pro_day]
		  ,[height] AS height
		  ,POWER([height],2) AS height_squared
		  ,[weight]
		  ,POWER([weight],2) AS weight_squared
		  ,[arm_length] AS arm_length
		  ,POWER([arm_length],2) AS arm_length_squared
		  ,[forty_time]
	  --INTO ##temp_forty_analysis_dataset
      FROM ##temp_player_workouts workout1
	 WHERE [forty_time] = (SELECT MIN([forty_time])
							 FROM ##temp_player_workouts workout2 
							WHERE workout1.[player_id]=workout2.[player_id]
							  AND workout2.combine_or_pro_day=(SELECT MAX([combine_or_pro_day])
																 FROM ##temp_player_workouts workout3
																WHERE workout2.[player_id]=workout3.[player_id]
																  AND forty_time IS NOT NULL
															 GROUP BY workout3.[player_id])
						 GROUP BY workout2.player_id)
	  AND [position] NOT IN ('LS','PT','PK')
  ORDER BY [position]



/*---------------------------------------------------------------------

Next you create the 20 yard dash analysis dataset.  Add a random number
so you can create training, validation, and scoring sets from the main 
dataset.  The nested queries in the where clause make sure you choose
the workout with the player's LOWEST 20 Time - if he has a time from 
the combine or a pro day, then take his lowest time of those two,
otherwise take the lowest time from the other workout types.  You don't
want to just create a "best of" record, you want to know the size of a 
player when he ran that specific time.

----------------------------------------------------------------------*/
