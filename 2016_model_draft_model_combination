


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for combining all the different draft model outputs into one.

Then create a row for every year for the player's first 4 seasons with his three model values.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the overall grades to the 3 to 7 scale grades.

OUTPUT TABLES:
##temp_model_values_meas_and_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_model_values_meas_and_grades exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_model_values_meas_and_grades') IS NOT NULL
	DROP TABLE ##temp_model_values_meas_and_grades

    SELECT *
	  INTO ##temp_model_values_meas_and_grades
      FROM [AnalyticsWork].[dbo].[draft2016_measurable_model_output]

INSERT INTO ##temp_model_values_meas_and_grades
	SELECT *
	  FROM [AnalyticsWork].[dbo].[draft2016_grades_model_output]

--SELECT * FROM ##temp_model_values_meas_and_grades



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pivot the model outputs so you have one row per player.

OUTPUT TABLES:
##temp_model_values_pivot

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_model_values_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_model_values_pivot') IS NOT NULL
	DROP TABLE ##temp_model_values_pivot

    SELECT player_id
	      ,position_draft_board
		  ,[measurables] AS value_measurables
		  ,[grades] AS value_grades
	  INTO ##temp_model_values_pivot
      FROM (
    SELECT player_id
		  ,position_draft_board
		  ,model_type
		  ,grade_scaled
      FROM ##temp_model_values_meas_and_grades WHERE model_type IN ('measurables','grades')) up
     PIVOT (MAX(grade_scaled) FOR model_type IN ([measurables],[grades])) AS pvt
  ORDER BY player_id

--SELECT * FROM ##temp_model_values_pivot







/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board position. Take a players draft
board position from as late in the process as available.  This is 
for bucketing for z scores for later on.

OUTPUT TABLES:
##temp_draft_board_positions_with_order

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_draft_board_positions exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions

    SELECT player_id
	      ,draft_year
	      ,position
		  ,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 1
		        WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
				WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 3
				ELSE NULL
		   END AS order_by
	 INTO ##temp_draft_board_positions
	 FROM [bane_production_analytics].[dbo].[draft_board_grades]
	WHERE position != '' AND position IS NOT NULL


-- Check if ##temp_draft_board_positions_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_draft_board_positions_with_order') IS NOT NULL
	DROP TABLE ##temp_draft_board_positions_with_order

    SELECT player_id
	      ,draft_year
	      ,position
	      ,RANK() OVER (PARTITION BY player_id ORDER BY order_by) AS draft_board_position_order
	 INTO ##temp_draft_board_positions_with_order
	 FROM ##temp_draft_board_positions

--SELECT * FROM ##temp_draft_board_positions_with_order

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get a player season grade for each of a player's first
four seasons.  If a player played in all four seasons, 
he will have four records in the table.

Tier system for season grades:
1) Ability For Ravens / Quarterly
2) Advance
3) Grade Fit - model generated pro grade

The first step is getting all the grades into a master grade table.

The reason we join player information to both the scout and model
tables separately is because the model table uses nfl_id while the
scout table uses the Bane player_id.

At some point, try to figure out a way to get rid of players who only
have one 2.0 grade for his season.  You need to exclude 2.0s when 
finding the average, but then if a player only has one, he is getting
assigned a 50 for the season when you assign 50 to all nulls.

OUTPUT TABLES:
##temp_pro_grades_scout

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_scout exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_scout') IS NOT NULL
	DROP TABLE ##temp_pro_grades_scout

    SELECT re.id AS report_id
	      ,author_id AS scout_id
		  ,CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 16) THEN YEAR(re.created_at)-1 
		        ELSE YEAR(re.created_at) END AS report_season
		  ,CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 16) THEN (YEAR(re.created_at)-1) - nfl_entry_year + 1
		        ELSE (YEAR(re.created_at)) - nfl_entry_year + 1 END AS player_season_in_league
		  ,CASE WHEN UPPER(LTRIM(RTRIM(re.[type]))) IN ('ABILITY FOR RAVENS','QUARTERLY') THEN 1
		        WHEN UPPER(LTRIM(RTRIM(re.[type]))) IN ('GAME ADVANCE') THEN 2
				ELSE NULL
		   END AS grade_tier
		  ,player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
		  ,gr.value	AS grade
		  ,CASE WHEN CAST(gr.value AS NUMERIC (3,1)) IN (8.0) THEN 100
		        WHEN CAST(gr.value AS NUMERIC (3,1)) IN (7.0) THEN 84
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.9,6.7,6.5) THEN 73
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.3) THEN 65
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (6.1,6.0) THEN 58
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.9) THEN 53
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.8) THEN 50
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.7) THEN 47.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.6) THEN 45.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.4) THEN 44.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.2) THEN 43.5
				WHEN CAST(gr.value AS NUMERIC (3,1)) IN (5.0) THEN 43
				ELSE NULL
		   END AS grade_scaled	
	  INTO ##temp_pro_grades_scout
      FROM [bane_production_analytics].[dbo].[reports] re
 LEFT JOIN [bane_production_analytics].[dbo].[grades] gr
        ON re.grade_id=gr.id	
 LEFT JOIN [bane_production_analytics].[dbo].[players] pl
        ON re.player_id=pl.id  
	 WHERE 1=1
	   AND UPPER(LTRIM(RTRIM(re.[type]))) IN ('ABILITY FOR RAVENS','GAME ADVANCE','QUARTERLY')
	   AND CAST(gr.value AS NUMERIC (3,1)) != 2
-------scale_id = 6 represents the Pro Grade Scale
	   AND gr.scale_id = 6
  ORDER BY re.id
		  ,gr.id

--SELECT * FROM ##temp_pro_grades_scout


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Next create a version of the Pro Grade Fit with the same
structure so you can append those grades.

OUTPUT TABLES:
##temp_pro_grades_model

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if##temp_pro_grades_model exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_model') IS NOT NULL
	DROP TABLE ##temp_pro_grades_model

    SELECT ABS(CHECKSUM(NEWID()))*-1 AS report_id
	      ,999 AS scout_id
		  ,season AS report_season
		  ,season - nfl_entry_year + 1 AS player_season_in_league
	      ,3 AS grade_tier
		  ,pl.id AS player_id
		  ,PlayerID AS nfl_id	
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name	  
		  ,GradeFit AS grade
		  ,ProGradeFit AS grade_scaled
	  INTO ##temp_pro_grades_model
      FROM [AnalyticsWork].[dbo].[model_pro_grades] mo
 LEFT JOIN [bane_production_analytics].[dbo].[players] pl
        ON mo.PlayerID=pl.nfl_id  

--SELECT * FROM ##temp_pro_grades_model


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Append the model grades to the scout grades.

OUTPUT TABLES:
##temp_pro_grades_append

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_append exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_append') IS NOT NULL
	DROP TABLE ##temp_pro_grades_append

    SELECT *
	  INTO ##temp_pro_grades_append
      FROM ##temp_pro_grades_model

INSERT INTO ##temp_pro_grades_append
	SELECT *
	  FROM ##temp_pro_grades_scout

--SELECT * FROM ##temp_pro_grades_append


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the player's mean grade for each grade_tier in each season.

Once we are able to put a team on each player's report, try to exclude
grades that are based just on training camp, like:
Report Month in (7,8)
AND team=BLT OR (team=SF AND Report Year = 2014) OR (team=PHI AND Report Year = 2015)


OUTPUT TABLES:
##temp_pro_grades_season_tier_mean

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if##temp_pro_grades_season_tier_mean exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_season_tier_mean') IS NOT NULL
	DROP TABLE ##temp_pro_grades_season_tier_mean

    SELECT player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier
		  ,RANK() OVER (PARTITION BY player_id, report_season ORDER BY grade_tier) AS order_for_models
  		  ,AVG(CAST(grade_scaled AS FLOAT)) AS grade_scaled_mean
	  INTO ##temp_pro_grades_season_tier_mean
	  FROM ##temp_pro_grades_append
  GROUP BY player_id
  		  ,nfl_id
  		  ,nfl_gsis_id
  		  ,ncaa_id
  		  ,ncaa_gsis_id
  		  ,last_name
  		  ,first_name
	      ,report_season
		  ,player_season_in_league
		  ,grade_tier

--SELECT * FROM ##temp_pro_grades_season_tier_mean

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Select the highest tiered grade for every player for every season.

OUTPUT TABLES:
##temp_pro_grades_season

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_pro_grades_season exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_pro_grades_season') IS NOT NULL
	DROP TABLE ##temp_pro_grades_season

    SELECT *
	  INTO ##temp_pro_grades_season
	  FROM ##temp_pro_grades_season_tier_mean
	 WHERE order_for_models = 1

--SELECT * FROM ##temp_pro_grades_season


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the season pro grades to the pivoted player grades.

Since we only modeled Pro Grades back to 2009, limit your pool to only 2006 Draft and
Beyond (because those guys will have at least one grade, from their 4th season).

OUTPUT TABLES:
##temp_evaluations_with_pro_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_evaluations_with_pro_grades exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_evaluations_with_pro_grades') IS NOT NULL
	DROP TABLE ##temp_evaluations_with_pro_grades

    SELECT me.*
	      ,report_season
		  ,player_season_in_league
		  ,CASE WHEN player_season_in_league = 2 THEN 1 ELSE 0 END AS player_season_second
		  ,CASE WHEN player_season_in_league = 3 THEN 1 ELSE 0 END AS player_season_third
		  ,CASE WHEN player_season_in_league = 4 THEN 1 ELSE 0 END AS player_season_fourth
		  ,grade_tier
		  ,CASE WHEN COALESCE(grade_scaled_mean,50) < 50 THEN 50
		        ELSE COALESCE(grade_scaled_mean,50)
		   END AS grade_scaled
		   --,coalesce(dbg.draft_year,nfl_entry_year,pl.draft_year) as nfl_entry_year
	  INTO ##temp_evaluations_with_pro_grades
	  FROM ##temp_model_values_pivot me
 LEFT JOIN ##temp_pro_grades_season pg
        ON pg.player_id = me.player_id
INNER JOIN [bane_production_analytics].[dbo].[players] pl
        ON me.player_id = pl.id
 LEFT JOIN [bane_production_analytics].[dbo].[positions] pos
        ON pl.position_id = pos.id
 LEFT JOIN ##temp_draft_board_positions_with_order dbg
        ON me.player_id = dbg.player_id
		AND dbg.draft_board_position_order = 1
	 WHERE coalesce(dbg.draft_year,nfl_entry_year,pl.draft_year) =2016
	   AND ((player_season_in_league <=4
	   AND player_season_in_league !=0)
	    OR player_season_in_league IS NULL)

--SELECT * FROM ##temp_evaluations_with_pro_grades



select distinct m.player_id
      ,p1.nfl_entry_year as first_season
	  ,p2.nfl_entry_year+1 as second_season
	  ,p3.nfl_entry_year+2 as third_season
	  ,p4.nfl_entry_year+3 as fourth_season
into ##temp_seasons
from ##temp_evaluations_with_pro_grades m
inner join [bane_production_analytics].[dbo].[players] p1
on m.player_id=p1.id
inner join [bane_production_analytics].[dbo].[players] p2
on p1.id=p2.id
inner join [bane_production_analytics].[dbo].[players] p3
on p1.id=p3.id
inner join [bane_production_analytics].[dbo].[players] p4
on p1.id=p4.id
order by m.player_id

--select * from ##temp_seasons where player_id=10828


	SELECT player_id
		  ,me.season
	  into ##temp_seasons_unpivot
      FROM ##temp_seasons
   UNPIVOT (season FOR code IN (first_season, second_season, third_season, fourth_season
							   )) AS me

select * from ##temp_seasons_unpivot where player_id=10828

select distinct u.player_id
,value_measurables
,value_grades
,position_draft_board
,u.season
into ##temp_list
from ##temp_seasons_unpivot u
left join ##temp_evaluations_with_pro_grades m
on u.player_id=m.player_id
where u.season<=2015

--select * from ##temp_list


select l.*
,player_season_in_league
,player_season_second
,player_season_third
,player_season_fourth
,coalesce(cast(grade_scaled as float),50) as grade_scaled
into ##temp_all
from ##temp_list l
left join ##temp_evaluations_with_pro_grades m
on m.player_id=l.player_id
and m.report_season=l.season

select Player_id, count(player_id) as pcount into ##temp_check from ##temp_all a 
group by player_id

select c.*, nfl_entry_year from ##temp_check c inner join [bane_production_analytics].[dbo].[players] p1
on c.player_id=p1.id order by pcount desc

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the production model values to the table

##temp_models_with_pro_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if ##temp_production_model exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_production_model') IS NOT NULL
	DROP TABLE ##temp_production_model

SELECT DISTINCT [player_id]
      ,[position_draft_board]
      ,[grade_scaled]
      ,[player_season]
  INTO ##temp_production_model
  FROM [AnalyticsWork].[dbo].[draft2016_production_model_output]

-- Check if ##temp_models_with_pro_grades exists, if it does drop it
IF OBJECT_ID('tempdb..##temp_models_with_pro_grades') IS NOT NULL
	DROP TABLE ##temp_models_with_pro_grades

    SELECT me.*
	      ,pr.grade_scaled AS value_production
	  INTO ##temp_models_with_pro_grades
	  FROM ##temp_evaluations_with_pro_grades me
 LEFT JOIN ##temp_production_model pr
        ON me.player_id = pr.player_id
	   

--SELECT * FROM ##temp_models_with_pro_grades where position_draft_board='OB'
