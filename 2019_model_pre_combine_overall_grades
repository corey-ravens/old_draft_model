


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for creating a list comparing Scout Grades to Model Grades for Draft Meetings.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get down to one row of draft board grade. Take a players draft
board grade from as late in the process as available. 

When doing this after Feb meetings, switch the order so POST-FEB is 1 in order by.

OUTPUT TABLES:
#temp_draft_board_grades_latest

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_draft_board_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades') IS NOT NULL
	DROP TABLE #temp_draft_board_grades

	SELECT player_id AS bane_player_id
		,legacy_grade
		,CASE WHEN UPPER(LTRIM(RTRIM([type]))) = 'PRE-DRAFT' THEN 3
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-APR' THEN 2
			WHEN UPPER(LTRIM(RTRIM([type]))) = 'POST-FEB' THEN 1
			ELSE 999
		END AS order_by
	INTO #temp_draft_board_grades
	FROM [BaneProductionAnalytics].[dbo].[draft_board_grades]
	WHERE legacy_grade != '' AND legacy_grade IS NOT NULL
		AND player_id <> 64668


-- Check if #temp_draft_board_grades_with_order exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_with_order') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_with_order

	SELECT bane_player_id
		,legacy_grade AS board_grade
		,RANK() OVER (PARTITION BY bane_player_id ORDER BY order_by) AS draft_board_grade_order
	INTO #temp_draft_board_grades_with_order
	FROM #temp_draft_board_grades

/*
SELECT *
FROM #temp_draft_board_grades_with_order
*/

-- Check if #temp_draft_board_grades_latest exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_draft_board_grades_latest') IS NOT NULL
	DROP TABLE #temp_draft_board_grades_latest

	SELECT *
	INTO #temp_draft_board_grades_latest
	FROM #temp_draft_board_grades_with_order
	WHERE draft_board_grade_order = 1

/*
SELECT *
FROM #temp_draft_board_grades_latest
*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Find the max scout grade for all players (in case then don't have a board grade).

OUTPUT TABLES:
#temp_max_grade

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

DECLARE @current_season INT
SELECT @current_season = (SELECT MAX(season) FROM Analytics.dbo.map_nfl_league_year_dates WHERE GETDATE() >= regular_season_start)

-- Check if #temp_max_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_max_grades') IS NOT NULL
	DROP TABLE #temp_max_grades

	SELECT player_id AS bane_player_id
		,CONCAT(pl.last_name,', ',pl.goes_by) AS player
		,translation AS position
		,CASE WHEN pl.draft_year <= @current_season THEN pl.draft_year
			WHEN pl.draft_year IN (@current_season + 1,@current_season + 2) THEN @current_season + 1
			ELSE NULL
		END AS draft_year
		,sc.code AS college
		,COUNT(re.id) AS report_count
		,MAX(CAST(gr.value AS NUMERIC (3,1))) AS grade_bucket       
	INTO #temp_max_grades
	FROM [BaneProductionAnalytics].[dbo].[reports] re
	INNER JOIN [BaneProductionAnalytics].[dbo].[taggings] t 
		ON t.taggable_id = re.id 
		AND UPPER(t.taggable_type) = 'REPORT'
		AND t.tag_id = 11 --(it is a college report)
	INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl 
		ON re.player_id = pl.id
		AND pl.is_deleted = 0
	LEFT JOIN [BaneProductionAnalytics].[dbo].[grades] gr
		ON re.grade_id=gr.id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[users] us
		ON re.author_id=us.id    
	LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] po
		ON pl.position_id = po.id      
	LEFT JOIN [BaneProductionAnalytics].[dbo].[schools] sc
		ON pl.ncaa_club_id = sc.id     
	WHERE 1=1
		AND re.is_deleted = 0
		AND UPPER(us.[type]) NOT LIKE '%COACH%'  
		AND re.[type] IN ('fall','cross-check')
		AND translation NOT IN ('ST','PK','PT','LS')
		AND gr.scale_id IN (4,6) --(it is an overall grade)
		AND (MONTH(re.created_at) IN (6,7,8,9,10,11,12,1) OR (MONTH(re.created_at) = 2 AND DAY(re.created_at) < 16))
		AND draft_year >= 2005
		AND draft_year <= @current_season + 2
		GROUP BY player_id
			,CONCAT(pl.last_name,', ',pl.goes_by)
			,translation
			,CASE WHEN pl.draft_year <= @current_season THEN pl.draft_year
				WHEN pl.draft_year IN (@current_season + 1,@current_season + 2) THEN @current_season + 1
				ELSE NULL
			END
			,sc.code

/*
SELECT *
FROM #temp_max_grades
WHERE player = 'Kelley, Kyle'
*/	


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Join the draft board and the high grade table so you have one grade for each player. 
Give priority to Draft Board.

OUTPUT TABLES:
#temp_scout_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_scout_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_scout_grades') IS NOT NULL
	DROP TABLE #temp_scout_grades

	SELECT mg.bane_player_id
		,mg.player
		,mg.position
		,mg.draft_year
		,mg.college
		,report_count
		,COALESCE(board_grade,grade_bucket) AS scout_grade
	INTO #temp_scout_grades
	FROM #temp_max_grades mg
	LEFT JOIN #temp_draft_board_grades_latest bg
		ON mg.bane_player_id = bg.bane_player_id

/*
SELECT *
FROM #temp_scout_grades
WHERE player = 'Kelley, Kyle'
*/	


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sum up the player play time by career - right now it is by club season

OUTPUT TABLES:
#temp_equivalent_games

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_equivalent_games exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_equivalent_games') IS NOT NULL
	DROP TABLE #temp_equivalent_games

	SELECT pl.id AS bane_player_id
		,SUM(equivalent_games) AS equivalent_games
	INTO #temp_equivalent_games
	FROM Analytics.dbo.stage_players_season_playtime pt
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON pt.nfl_player_id = pl.nfl_id
		AND pl.is_deleted = 0
	WHERE season_type = 'REG'
	GROUP BY pl.id


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a table with a max model grade for any potential duplicates.

OUTPUT TABLES:
#temp_model_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_model_grades exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_model_grades') IS NOT NULL
	DROP TABLE #temp_model_grades

	SELECT bane_player_id
		,MAX(overall_grade) AS model_grade
		,MAX(overall_number) AS model_score
	INTO #temp_model_grades
	FROM AnalyticsWork.dbo.draft_model_pre_combine_overall_scores mo
	WHERE secondary_position = 0
		AND model_type = 'PMC'
		AND draft_model_year = 2019
	GROUP BY bane_player_id


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add the model grades to the grade table.

OUTPUT TABLES:
#temp_grades_comparison

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_grades_comparison exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_grades_comparison') IS NOT NULL
	DROP TABLE #temp_grades_comparison

	SELECT sg.*
		,COALESCE(equivalent_games,0) AS equivalent_games
		,CASE WHEN COALESCE(equivalent_games,0) > 0 THEN 1 ELSE 0 END AS played_in_nfl_game
		,model_grade
		,model_score
	--INTO #temp_grades_comparison
	FROM #temp_scout_grades sg 
	LEFT JOIN #temp_equivalent_games eq
		ON sg.bane_player_id = eq.bane_player_id
	LEFT JOIN #temp_model_grades mo
		ON sg.bane_player_id = mo.bane_player_id


/*
SELECT *
FROM Analytics.dbo.analysis_players_draft_model_grades_20170208
INNER JOIN BaneProductionAnalytics.dbo.players pl
ON gc.bane_player_id = pl.id
LEFT JOIN BaneProductionAnalytics.dbo.grades gr
on gc.model_grade = gr.value
and gr.scale_id = 4
and gr.active = 1
and (gr.id <=34 or gr.id = 63)
WHERE model_grade IS NOT NULL
ORDER BY grade_id
*/
